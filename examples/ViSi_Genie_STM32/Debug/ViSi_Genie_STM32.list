
ViSi_Genie_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000406c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000354  0800412c  0800412c  0001412c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004480  08004480  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08004480  08004480  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004480  08004480  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004480  08004480  00014480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004484  08004484  00014484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08004488  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  2000006c  080044f4  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c8  080044f4  000202c8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d274  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f21  00000000  00000000  0002d308  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000768  00000000  00000000  0002f230  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000690  00000000  00000000  0002f998  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000d1b0  00000000  00000000  00030028  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007fd6  00000000  00000000  0003d1d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000439ac  00000000  00000000  000451ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00088b5a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ba8  00000000  00000000  00088bd8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000006c 	.word	0x2000006c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004114 	.word	0x08004114

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000070 	.word	0x20000070
 8000104:	08004114 	.word	0x08004114

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000234:	4b07      	ldr	r3, [pc, #28]	; (8000254 <HAL_Init+0x24>)
 8000236:	681a      	ldr	r2, [r3, #0]
 8000238:	4b06      	ldr	r3, [pc, #24]	; (8000254 <HAL_Init+0x24>)
 800023a:	2110      	movs	r1, #16
 800023c:	430a      	orrs	r2, r1
 800023e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000240:	2000      	movs	r0, #0
 8000242:	f000 f809 	bl	8000258 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000246:	f002 f9db 	bl	8002600 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800024a:	2300      	movs	r3, #0
}
 800024c:	0018      	movs	r0, r3
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	40022000 	.word	0x40022000

08000258 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000260:	f000 ff3c 	bl	80010dc <HAL_RCC_GetHCLKFreq>
 8000264:	0002      	movs	r2, r0
 8000266:	23fa      	movs	r3, #250	; 0xfa
 8000268:	0099      	lsls	r1, r3, #2
 800026a:	0010      	movs	r0, r2
 800026c:	f7ff ff54 	bl	8000118 <__udivsi3>
 8000270:	0003      	movs	r3, r0
 8000272:	0018      	movs	r0, r3
 8000274:	f000 f90d 	bl	8000492 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000278:	6879      	ldr	r1, [r7, #4]
 800027a:	2301      	movs	r3, #1
 800027c:	425b      	negs	r3, r3
 800027e:	2200      	movs	r2, #0
 8000280:	0018      	movs	r0, r3
 8000282:	f000 f8e1 	bl	8000448 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 8000286:	2300      	movs	r3, #0
}
 8000288:	0018      	movs	r0, r3
 800028a:	46bd      	mov	sp, r7
 800028c:	b002      	add	sp, #8
 800028e:	bd80      	pop	{r7, pc}

08000290 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
  uwTick++;
 8000294:	4b03      	ldr	r3, [pc, #12]	; (80002a4 <HAL_IncTick+0x14>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	1c5a      	adds	r2, r3, #1
 800029a:	4b02      	ldr	r3, [pc, #8]	; (80002a4 <HAL_IncTick+0x14>)
 800029c:	601a      	str	r2, [r3, #0]
}
 800029e:	46c0      	nop			; (mov r8, r8)
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	20000098 	.word	0x20000098

080002a8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
  return uwTick;
 80002ac:	4b02      	ldr	r3, [pc, #8]	; (80002b8 <HAL_GetTick+0x10>)
 80002ae:	681b      	ldr	r3, [r3, #0]
}
 80002b0:	0018      	movs	r0, r3
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	46c0      	nop			; (mov r8, r8)
 80002b8:	20000098 	.word	0x20000098

080002bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80002c4:	f7ff fff0 	bl	80002a8 <HAL_GetTick>
 80002c8:	0003      	movs	r3, r0
 80002ca:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	3301      	adds	r3, #1
 80002d4:	d002      	beq.n	80002dc <HAL_Delay+0x20>
  {
     wait++;
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	3301      	adds	r3, #1
 80002da:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80002dc:	46c0      	nop			; (mov r8, r8)
 80002de:	f7ff ffe3 	bl	80002a8 <HAL_GetTick>
 80002e2:	0002      	movs	r2, r0
 80002e4:	68bb      	ldr	r3, [r7, #8]
 80002e6:	1ad3      	subs	r3, r2, r3
 80002e8:	68fa      	ldr	r2, [r7, #12]
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d8f7      	bhi.n	80002de <HAL_Delay+0x22>
  {
  }
}
 80002ee:	46c0      	nop			; (mov r8, r8)
 80002f0:	46bd      	mov	sp, r7
 80002f2:	b004      	add	sp, #16
 80002f4:	bd80      	pop	{r7, pc}
	...

080002f8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b082      	sub	sp, #8
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	0002      	movs	r2, r0
 8000300:	1dfb      	adds	r3, r7, #7
 8000302:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000304:	1dfb      	adds	r3, r7, #7
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	001a      	movs	r2, r3
 800030a:	231f      	movs	r3, #31
 800030c:	401a      	ands	r2, r3
 800030e:	4b04      	ldr	r3, [pc, #16]	; (8000320 <NVIC_EnableIRQ+0x28>)
 8000310:	2101      	movs	r1, #1
 8000312:	4091      	lsls	r1, r2
 8000314:	000a      	movs	r2, r1
 8000316:	601a      	str	r2, [r3, #0]
}
 8000318:	46c0      	nop			; (mov r8, r8)
 800031a:	46bd      	mov	sp, r7
 800031c:	b002      	add	sp, #8
 800031e:	bd80      	pop	{r7, pc}
 8000320:	e000e100 	.word	0xe000e100

08000324 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000324:	b590      	push	{r4, r7, lr}
 8000326:	b083      	sub	sp, #12
 8000328:	af00      	add	r7, sp, #0
 800032a:	0002      	movs	r2, r0
 800032c:	6039      	str	r1, [r7, #0]
 800032e:	1dfb      	adds	r3, r7, #7
 8000330:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8000332:	1dfb      	adds	r3, r7, #7
 8000334:	781b      	ldrb	r3, [r3, #0]
 8000336:	2b7f      	cmp	r3, #127	; 0x7f
 8000338:	d932      	bls.n	80003a0 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800033a:	4a2f      	ldr	r2, [pc, #188]	; (80003f8 <NVIC_SetPriority+0xd4>)
 800033c:	1dfb      	adds	r3, r7, #7
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	0019      	movs	r1, r3
 8000342:	230f      	movs	r3, #15
 8000344:	400b      	ands	r3, r1
 8000346:	3b08      	subs	r3, #8
 8000348:	089b      	lsrs	r3, r3, #2
 800034a:	3306      	adds	r3, #6
 800034c:	009b      	lsls	r3, r3, #2
 800034e:	18d3      	adds	r3, r2, r3
 8000350:	3304      	adds	r3, #4
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	1dfa      	adds	r2, r7, #7
 8000356:	7812      	ldrb	r2, [r2, #0]
 8000358:	0011      	movs	r1, r2
 800035a:	2203      	movs	r2, #3
 800035c:	400a      	ands	r2, r1
 800035e:	00d2      	lsls	r2, r2, #3
 8000360:	21ff      	movs	r1, #255	; 0xff
 8000362:	4091      	lsls	r1, r2
 8000364:	000a      	movs	r2, r1
 8000366:	43d2      	mvns	r2, r2
 8000368:	401a      	ands	r2, r3
 800036a:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800036c:	683b      	ldr	r3, [r7, #0]
 800036e:	019b      	lsls	r3, r3, #6
 8000370:	22ff      	movs	r2, #255	; 0xff
 8000372:	401a      	ands	r2, r3
 8000374:	1dfb      	adds	r3, r7, #7
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	0018      	movs	r0, r3
 800037a:	2303      	movs	r3, #3
 800037c:	4003      	ands	r3, r0
 800037e:	00db      	lsls	r3, r3, #3
 8000380:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000382:	481d      	ldr	r0, [pc, #116]	; (80003f8 <NVIC_SetPriority+0xd4>)
 8000384:	1dfb      	adds	r3, r7, #7
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	001c      	movs	r4, r3
 800038a:	230f      	movs	r3, #15
 800038c:	4023      	ands	r3, r4
 800038e:	3b08      	subs	r3, #8
 8000390:	089b      	lsrs	r3, r3, #2
 8000392:	430a      	orrs	r2, r1
 8000394:	3306      	adds	r3, #6
 8000396:	009b      	lsls	r3, r3, #2
 8000398:	18c3      	adds	r3, r0, r3
 800039a:	3304      	adds	r3, #4
 800039c:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800039e:	e027      	b.n	80003f0 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003a0:	4a16      	ldr	r2, [pc, #88]	; (80003fc <NVIC_SetPriority+0xd8>)
 80003a2:	1dfb      	adds	r3, r7, #7
 80003a4:	781b      	ldrb	r3, [r3, #0]
 80003a6:	b25b      	sxtb	r3, r3
 80003a8:	089b      	lsrs	r3, r3, #2
 80003aa:	33c0      	adds	r3, #192	; 0xc0
 80003ac:	009b      	lsls	r3, r3, #2
 80003ae:	589b      	ldr	r3, [r3, r2]
 80003b0:	1dfa      	adds	r2, r7, #7
 80003b2:	7812      	ldrb	r2, [r2, #0]
 80003b4:	0011      	movs	r1, r2
 80003b6:	2203      	movs	r2, #3
 80003b8:	400a      	ands	r2, r1
 80003ba:	00d2      	lsls	r2, r2, #3
 80003bc:	21ff      	movs	r1, #255	; 0xff
 80003be:	4091      	lsls	r1, r2
 80003c0:	000a      	movs	r2, r1
 80003c2:	43d2      	mvns	r2, r2
 80003c4:	401a      	ands	r2, r3
 80003c6:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80003c8:	683b      	ldr	r3, [r7, #0]
 80003ca:	019b      	lsls	r3, r3, #6
 80003cc:	22ff      	movs	r2, #255	; 0xff
 80003ce:	401a      	ands	r2, r3
 80003d0:	1dfb      	adds	r3, r7, #7
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	0018      	movs	r0, r3
 80003d6:	2303      	movs	r3, #3
 80003d8:	4003      	ands	r3, r0
 80003da:	00db      	lsls	r3, r3, #3
 80003dc:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003de:	4807      	ldr	r0, [pc, #28]	; (80003fc <NVIC_SetPriority+0xd8>)
 80003e0:	1dfb      	adds	r3, r7, #7
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	b25b      	sxtb	r3, r3
 80003e6:	089b      	lsrs	r3, r3, #2
 80003e8:	430a      	orrs	r2, r1
 80003ea:	33c0      	adds	r3, #192	; 0xc0
 80003ec:	009b      	lsls	r3, r3, #2
 80003ee:	501a      	str	r2, [r3, r0]
}
 80003f0:	46c0      	nop			; (mov r8, r8)
 80003f2:	46bd      	mov	sp, r7
 80003f4:	b003      	add	sp, #12
 80003f6:	bd90      	pop	{r4, r7, pc}
 80003f8:	e000ed00 	.word	0xe000ed00
 80003fc:	e000e100 	.word	0xe000e100

08000400 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	3b01      	subs	r3, #1
 800040c:	4a0c      	ldr	r2, [pc, #48]	; (8000440 <SysTick_Config+0x40>)
 800040e:	4293      	cmp	r3, r2
 8000410:	d901      	bls.n	8000416 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000412:	2301      	movs	r3, #1
 8000414:	e010      	b.n	8000438 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000416:	4b0b      	ldr	r3, [pc, #44]	; (8000444 <SysTick_Config+0x44>)
 8000418:	687a      	ldr	r2, [r7, #4]
 800041a:	3a01      	subs	r2, #1
 800041c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800041e:	2301      	movs	r3, #1
 8000420:	425b      	negs	r3, r3
 8000422:	2103      	movs	r1, #3
 8000424:	0018      	movs	r0, r3
 8000426:	f7ff ff7d 	bl	8000324 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800042a:	4b06      	ldr	r3, [pc, #24]	; (8000444 <SysTick_Config+0x44>)
 800042c:	2200      	movs	r2, #0
 800042e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000430:	4b04      	ldr	r3, [pc, #16]	; (8000444 <SysTick_Config+0x44>)
 8000432:	2207      	movs	r2, #7
 8000434:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000436:	2300      	movs	r3, #0
}
 8000438:	0018      	movs	r0, r3
 800043a:	46bd      	mov	sp, r7
 800043c:	b002      	add	sp, #8
 800043e:	bd80      	pop	{r7, pc}
 8000440:	00ffffff 	.word	0x00ffffff
 8000444:	e000e010 	.word	0xe000e010

08000448 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000448:	b580      	push	{r7, lr}
 800044a:	b084      	sub	sp, #16
 800044c:	af00      	add	r7, sp, #0
 800044e:	60b9      	str	r1, [r7, #8]
 8000450:	607a      	str	r2, [r7, #4]
 8000452:	210f      	movs	r1, #15
 8000454:	187b      	adds	r3, r7, r1
 8000456:	1c02      	adds	r2, r0, #0
 8000458:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800045a:	68ba      	ldr	r2, [r7, #8]
 800045c:	187b      	adds	r3, r7, r1
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	b25b      	sxtb	r3, r3
 8000462:	0011      	movs	r1, r2
 8000464:	0018      	movs	r0, r3
 8000466:	f7ff ff5d 	bl	8000324 <NVIC_SetPriority>
}
 800046a:	46c0      	nop			; (mov r8, r8)
 800046c:	46bd      	mov	sp, r7
 800046e:	b004      	add	sp, #16
 8000470:	bd80      	pop	{r7, pc}

08000472 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000472:	b580      	push	{r7, lr}
 8000474:	b082      	sub	sp, #8
 8000476:	af00      	add	r7, sp, #0
 8000478:	0002      	movs	r2, r0
 800047a:	1dfb      	adds	r3, r7, #7
 800047c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800047e:	1dfb      	adds	r3, r7, #7
 8000480:	781b      	ldrb	r3, [r3, #0]
 8000482:	b25b      	sxtb	r3, r3
 8000484:	0018      	movs	r0, r3
 8000486:	f7ff ff37 	bl	80002f8 <NVIC_EnableIRQ>
}
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	46bd      	mov	sp, r7
 800048e:	b002      	add	sp, #8
 8000490:	bd80      	pop	{r7, pc}

08000492 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000492:	b580      	push	{r7, lr}
 8000494:	b082      	sub	sp, #8
 8000496:	af00      	add	r7, sp, #0
 8000498:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	0018      	movs	r0, r3
 800049e:	f7ff ffaf 	bl	8000400 <SysTick_Config>
 80004a2:	0003      	movs	r3, r0
}
 80004a4:	0018      	movs	r0, r3
 80004a6:	46bd      	mov	sp, r7
 80004a8:	b002      	add	sp, #8
 80004aa:	bd80      	pop	{r7, pc}

080004ac <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b084      	sub	sp, #16
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80004b4:	230f      	movs	r3, #15
 80004b6:	18fb      	adds	r3, r7, r3
 80004b8:	2200      	movs	r2, #0
 80004ba:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	2221      	movs	r2, #33	; 0x21
 80004c0:	5c9b      	ldrb	r3, [r3, r2]
 80004c2:	b2db      	uxtb	r3, r3
 80004c4:	2b02      	cmp	r3, #2
 80004c6:	d007      	beq.n	80004d8 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	2204      	movs	r2, #4
 80004cc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80004ce:	230f      	movs	r3, #15
 80004d0:	18fb      	adds	r3, r7, r3
 80004d2:	2201      	movs	r2, #1
 80004d4:	701a      	strb	r2, [r3, #0]
 80004d6:	e028      	b.n	800052a <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	681a      	ldr	r2, [r3, #0]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	210e      	movs	r1, #14
 80004e4:	438a      	bics	r2, r1
 80004e6:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	681a      	ldr	r2, [r3, #0]
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	2101      	movs	r1, #1
 80004f4:	438a      	bics	r2, r1
 80004f6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000500:	2101      	movs	r1, #1
 8000502:	4091      	lsls	r1, r2
 8000504:	000a      	movs	r2, r1
 8000506:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	2221      	movs	r2, #33	; 0x21
 800050c:	2101      	movs	r1, #1
 800050e:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	2220      	movs	r2, #32
 8000514:	2100      	movs	r1, #0
 8000516:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800051c:	2b00      	cmp	r3, #0
 800051e:	d004      	beq.n	800052a <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000524:	687a      	ldr	r2, [r7, #4]
 8000526:	0010      	movs	r0, r2
 8000528:	4798      	blx	r3
    } 
  }
  return status;
 800052a:	230f      	movs	r3, #15
 800052c:	18fb      	adds	r3, r7, r3
 800052e:	781b      	ldrb	r3, [r3, #0]
}
 8000530:	0018      	movs	r0, r3
 8000532:	46bd      	mov	sp, r7
 8000534:	b004      	add	sp, #16
 8000536:	bd80      	pop	{r7, pc}

08000538 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000538:	b580      	push	{r7, lr}
 800053a:	b086      	sub	sp, #24
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
 8000540:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000542:	2300      	movs	r3, #0
 8000544:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000546:	2300      	movs	r3, #0
 8000548:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800054a:	2300      	movs	r3, #0
 800054c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800054e:	e14f      	b.n	80007f0 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2101      	movs	r1, #1
 8000556:	697a      	ldr	r2, [r7, #20]
 8000558:	4091      	lsls	r1, r2
 800055a:	000a      	movs	r2, r1
 800055c:	4013      	ands	r3, r2
 800055e:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	2b00      	cmp	r3, #0
 8000564:	d100      	bne.n	8000568 <HAL_GPIO_Init+0x30>
 8000566:	e140      	b.n	80007ea <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	685b      	ldr	r3, [r3, #4]
 800056c:	2b02      	cmp	r3, #2
 800056e:	d003      	beq.n	8000578 <HAL_GPIO_Init+0x40>
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	685b      	ldr	r3, [r3, #4]
 8000574:	2b12      	cmp	r3, #18
 8000576:	d123      	bne.n	80005c0 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8000578:	697b      	ldr	r3, [r7, #20]
 800057a:	08da      	lsrs	r2, r3, #3
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	3208      	adds	r2, #8
 8000580:	0092      	lsls	r2, r2, #2
 8000582:	58d3      	ldr	r3, [r2, r3]
 8000584:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000586:	697b      	ldr	r3, [r7, #20]
 8000588:	2207      	movs	r2, #7
 800058a:	4013      	ands	r3, r2
 800058c:	009b      	lsls	r3, r3, #2
 800058e:	220f      	movs	r2, #15
 8000590:	409a      	lsls	r2, r3
 8000592:	0013      	movs	r3, r2
 8000594:	43da      	mvns	r2, r3
 8000596:	693b      	ldr	r3, [r7, #16]
 8000598:	4013      	ands	r3, r2
 800059a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	691a      	ldr	r2, [r3, #16]
 80005a0:	697b      	ldr	r3, [r7, #20]
 80005a2:	2107      	movs	r1, #7
 80005a4:	400b      	ands	r3, r1
 80005a6:	009b      	lsls	r3, r3, #2
 80005a8:	409a      	lsls	r2, r3
 80005aa:	0013      	movs	r3, r2
 80005ac:	693a      	ldr	r2, [r7, #16]
 80005ae:	4313      	orrs	r3, r2
 80005b0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80005b2:	697b      	ldr	r3, [r7, #20]
 80005b4:	08da      	lsrs	r2, r3, #3
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	3208      	adds	r2, #8
 80005ba:	0092      	lsls	r2, r2, #2
 80005bc:	6939      	ldr	r1, [r7, #16]
 80005be:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80005c6:	697b      	ldr	r3, [r7, #20]
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	2203      	movs	r2, #3
 80005cc:	409a      	lsls	r2, r3
 80005ce:	0013      	movs	r3, r2
 80005d0:	43da      	mvns	r2, r3
 80005d2:	693b      	ldr	r3, [r7, #16]
 80005d4:	4013      	ands	r3, r2
 80005d6:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	685b      	ldr	r3, [r3, #4]
 80005dc:	2203      	movs	r2, #3
 80005de:	401a      	ands	r2, r3
 80005e0:	697b      	ldr	r3, [r7, #20]
 80005e2:	005b      	lsls	r3, r3, #1
 80005e4:	409a      	lsls	r2, r3
 80005e6:	0013      	movs	r3, r2
 80005e8:	693a      	ldr	r2, [r7, #16]
 80005ea:	4313      	orrs	r3, r2
 80005ec:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	693a      	ldr	r2, [r7, #16]
 80005f2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	685b      	ldr	r3, [r3, #4]
 80005f8:	2b01      	cmp	r3, #1
 80005fa:	d00b      	beq.n	8000614 <HAL_GPIO_Init+0xdc>
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	2b02      	cmp	r3, #2
 8000602:	d007      	beq.n	8000614 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000608:	2b11      	cmp	r3, #17
 800060a:	d003      	beq.n	8000614 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	685b      	ldr	r3, [r3, #4]
 8000610:	2b12      	cmp	r3, #18
 8000612:	d130      	bne.n	8000676 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	689b      	ldr	r3, [r3, #8]
 8000618:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800061a:	697b      	ldr	r3, [r7, #20]
 800061c:	005b      	lsls	r3, r3, #1
 800061e:	2203      	movs	r2, #3
 8000620:	409a      	lsls	r2, r3
 8000622:	0013      	movs	r3, r2
 8000624:	43da      	mvns	r2, r3
 8000626:	693b      	ldr	r3, [r7, #16]
 8000628:	4013      	ands	r3, r2
 800062a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	68da      	ldr	r2, [r3, #12]
 8000630:	697b      	ldr	r3, [r7, #20]
 8000632:	005b      	lsls	r3, r3, #1
 8000634:	409a      	lsls	r2, r3
 8000636:	0013      	movs	r3, r2
 8000638:	693a      	ldr	r2, [r7, #16]
 800063a:	4313      	orrs	r3, r2
 800063c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	693a      	ldr	r2, [r7, #16]
 8000642:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	685b      	ldr	r3, [r3, #4]
 8000648:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800064a:	2201      	movs	r2, #1
 800064c:	697b      	ldr	r3, [r7, #20]
 800064e:	409a      	lsls	r2, r3
 8000650:	0013      	movs	r3, r2
 8000652:	43da      	mvns	r2, r3
 8000654:	693b      	ldr	r3, [r7, #16]
 8000656:	4013      	ands	r3, r2
 8000658:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	685b      	ldr	r3, [r3, #4]
 800065e:	091b      	lsrs	r3, r3, #4
 8000660:	2201      	movs	r2, #1
 8000662:	401a      	ands	r2, r3
 8000664:	697b      	ldr	r3, [r7, #20]
 8000666:	409a      	lsls	r2, r3
 8000668:	0013      	movs	r3, r2
 800066a:	693a      	ldr	r2, [r7, #16]
 800066c:	4313      	orrs	r3, r2
 800066e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	693a      	ldr	r2, [r7, #16]
 8000674:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	68db      	ldr	r3, [r3, #12]
 800067a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	005b      	lsls	r3, r3, #1
 8000680:	2203      	movs	r2, #3
 8000682:	409a      	lsls	r2, r3
 8000684:	0013      	movs	r3, r2
 8000686:	43da      	mvns	r2, r3
 8000688:	693b      	ldr	r3, [r7, #16]
 800068a:	4013      	ands	r3, r2
 800068c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	689a      	ldr	r2, [r3, #8]
 8000692:	697b      	ldr	r3, [r7, #20]
 8000694:	005b      	lsls	r3, r3, #1
 8000696:	409a      	lsls	r2, r3
 8000698:	0013      	movs	r3, r2
 800069a:	693a      	ldr	r2, [r7, #16]
 800069c:	4313      	orrs	r3, r2
 800069e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	693a      	ldr	r2, [r7, #16]
 80006a4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	685a      	ldr	r2, [r3, #4]
 80006aa:	2380      	movs	r3, #128	; 0x80
 80006ac:	055b      	lsls	r3, r3, #21
 80006ae:	4013      	ands	r3, r2
 80006b0:	d100      	bne.n	80006b4 <HAL_GPIO_Init+0x17c>
 80006b2:	e09a      	b.n	80007ea <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006b4:	4b54      	ldr	r3, [pc, #336]	; (8000808 <HAL_GPIO_Init+0x2d0>)
 80006b6:	699a      	ldr	r2, [r3, #24]
 80006b8:	4b53      	ldr	r3, [pc, #332]	; (8000808 <HAL_GPIO_Init+0x2d0>)
 80006ba:	2101      	movs	r1, #1
 80006bc:	430a      	orrs	r2, r1
 80006be:	619a      	str	r2, [r3, #24]
 80006c0:	4b51      	ldr	r3, [pc, #324]	; (8000808 <HAL_GPIO_Init+0x2d0>)
 80006c2:	699b      	ldr	r3, [r3, #24]
 80006c4:	2201      	movs	r2, #1
 80006c6:	4013      	ands	r3, r2
 80006c8:	60bb      	str	r3, [r7, #8]
 80006ca:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 80006cc:	4a4f      	ldr	r2, [pc, #316]	; (800080c <HAL_GPIO_Init+0x2d4>)
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	089b      	lsrs	r3, r3, #2
 80006d2:	3302      	adds	r3, #2
 80006d4:	009b      	lsls	r3, r3, #2
 80006d6:	589b      	ldr	r3, [r3, r2]
 80006d8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80006da:	697b      	ldr	r3, [r7, #20]
 80006dc:	2203      	movs	r2, #3
 80006de:	4013      	ands	r3, r2
 80006e0:	009b      	lsls	r3, r3, #2
 80006e2:	220f      	movs	r2, #15
 80006e4:	409a      	lsls	r2, r3
 80006e6:	0013      	movs	r3, r2
 80006e8:	43da      	mvns	r2, r3
 80006ea:	693b      	ldr	r3, [r7, #16]
 80006ec:	4013      	ands	r3, r2
 80006ee:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006f0:	687a      	ldr	r2, [r7, #4]
 80006f2:	2390      	movs	r3, #144	; 0x90
 80006f4:	05db      	lsls	r3, r3, #23
 80006f6:	429a      	cmp	r2, r3
 80006f8:	d013      	beq.n	8000722 <HAL_GPIO_Init+0x1ea>
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	4a44      	ldr	r2, [pc, #272]	; (8000810 <HAL_GPIO_Init+0x2d8>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	d00d      	beq.n	800071e <HAL_GPIO_Init+0x1e6>
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	4a43      	ldr	r2, [pc, #268]	; (8000814 <HAL_GPIO_Init+0x2dc>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d007      	beq.n	800071a <HAL_GPIO_Init+0x1e2>
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	4a42      	ldr	r2, [pc, #264]	; (8000818 <HAL_GPIO_Init+0x2e0>)
 800070e:	4293      	cmp	r3, r2
 8000710:	d101      	bne.n	8000716 <HAL_GPIO_Init+0x1de>
 8000712:	2303      	movs	r3, #3
 8000714:	e006      	b.n	8000724 <HAL_GPIO_Init+0x1ec>
 8000716:	2305      	movs	r3, #5
 8000718:	e004      	b.n	8000724 <HAL_GPIO_Init+0x1ec>
 800071a:	2302      	movs	r3, #2
 800071c:	e002      	b.n	8000724 <HAL_GPIO_Init+0x1ec>
 800071e:	2301      	movs	r3, #1
 8000720:	e000      	b.n	8000724 <HAL_GPIO_Init+0x1ec>
 8000722:	2300      	movs	r3, #0
 8000724:	697a      	ldr	r2, [r7, #20]
 8000726:	2103      	movs	r1, #3
 8000728:	400a      	ands	r2, r1
 800072a:	0092      	lsls	r2, r2, #2
 800072c:	4093      	lsls	r3, r2
 800072e:	693a      	ldr	r2, [r7, #16]
 8000730:	4313      	orrs	r3, r2
 8000732:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000734:	4935      	ldr	r1, [pc, #212]	; (800080c <HAL_GPIO_Init+0x2d4>)
 8000736:	697b      	ldr	r3, [r7, #20]
 8000738:	089b      	lsrs	r3, r3, #2
 800073a:	3302      	adds	r3, #2
 800073c:	009b      	lsls	r3, r3, #2
 800073e:	693a      	ldr	r2, [r7, #16]
 8000740:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000742:	4b36      	ldr	r3, [pc, #216]	; (800081c <HAL_GPIO_Init+0x2e4>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	43da      	mvns	r2, r3
 800074c:	693b      	ldr	r3, [r7, #16]
 800074e:	4013      	ands	r3, r2
 8000750:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	685a      	ldr	r2, [r3, #4]
 8000756:	2380      	movs	r3, #128	; 0x80
 8000758:	025b      	lsls	r3, r3, #9
 800075a:	4013      	ands	r3, r2
 800075c:	d003      	beq.n	8000766 <HAL_GPIO_Init+0x22e>
        {
          SET_BIT(temp, iocurrent); 
 800075e:	693a      	ldr	r2, [r7, #16]
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	4313      	orrs	r3, r2
 8000764:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000766:	4b2d      	ldr	r3, [pc, #180]	; (800081c <HAL_GPIO_Init+0x2e4>)
 8000768:	693a      	ldr	r2, [r7, #16]
 800076a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800076c:	4b2b      	ldr	r3, [pc, #172]	; (800081c <HAL_GPIO_Init+0x2e4>)
 800076e:	685b      	ldr	r3, [r3, #4]
 8000770:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	43da      	mvns	r2, r3
 8000776:	693b      	ldr	r3, [r7, #16]
 8000778:	4013      	ands	r3, r2
 800077a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	685a      	ldr	r2, [r3, #4]
 8000780:	2380      	movs	r3, #128	; 0x80
 8000782:	029b      	lsls	r3, r3, #10
 8000784:	4013      	ands	r3, r2
 8000786:	d003      	beq.n	8000790 <HAL_GPIO_Init+0x258>
        { 
          SET_BIT(temp, iocurrent); 
 8000788:	693a      	ldr	r2, [r7, #16]
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	4313      	orrs	r3, r2
 800078e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000790:	4b22      	ldr	r3, [pc, #136]	; (800081c <HAL_GPIO_Init+0x2e4>)
 8000792:	693a      	ldr	r2, [r7, #16]
 8000794:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000796:	4b21      	ldr	r3, [pc, #132]	; (800081c <HAL_GPIO_Init+0x2e4>)
 8000798:	689b      	ldr	r3, [r3, #8]
 800079a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	43da      	mvns	r2, r3
 80007a0:	693b      	ldr	r3, [r7, #16]
 80007a2:	4013      	ands	r3, r2
 80007a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	685a      	ldr	r2, [r3, #4]
 80007aa:	2380      	movs	r3, #128	; 0x80
 80007ac:	035b      	lsls	r3, r3, #13
 80007ae:	4013      	ands	r3, r2
 80007b0:	d003      	beq.n	80007ba <HAL_GPIO_Init+0x282>
        {
          SET_BIT(temp, iocurrent); 
 80007b2:	693a      	ldr	r2, [r7, #16]
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	4313      	orrs	r3, r2
 80007b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80007ba:	4b18      	ldr	r3, [pc, #96]	; (800081c <HAL_GPIO_Init+0x2e4>)
 80007bc:	693a      	ldr	r2, [r7, #16]
 80007be:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80007c0:	4b16      	ldr	r3, [pc, #88]	; (800081c <HAL_GPIO_Init+0x2e4>)
 80007c2:	68db      	ldr	r3, [r3, #12]
 80007c4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	43da      	mvns	r2, r3
 80007ca:	693b      	ldr	r3, [r7, #16]
 80007cc:	4013      	ands	r3, r2
 80007ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	685a      	ldr	r2, [r3, #4]
 80007d4:	2380      	movs	r3, #128	; 0x80
 80007d6:	039b      	lsls	r3, r3, #14
 80007d8:	4013      	ands	r3, r2
 80007da:	d003      	beq.n	80007e4 <HAL_GPIO_Init+0x2ac>
        {
          SET_BIT(temp, iocurrent); 
 80007dc:	693a      	ldr	r2, [r7, #16]
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	4313      	orrs	r3, r2
 80007e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80007e4:	4b0d      	ldr	r3, [pc, #52]	; (800081c <HAL_GPIO_Init+0x2e4>)
 80007e6:	693a      	ldr	r2, [r7, #16]
 80007e8:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 80007ea:	697b      	ldr	r3, [r7, #20]
 80007ec:	3301      	adds	r3, #1
 80007ee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	681a      	ldr	r2, [r3, #0]
 80007f4:	697b      	ldr	r3, [r7, #20]
 80007f6:	40da      	lsrs	r2, r3
 80007f8:	1e13      	subs	r3, r2, #0
 80007fa:	d000      	beq.n	80007fe <HAL_GPIO_Init+0x2c6>
 80007fc:	e6a8      	b.n	8000550 <HAL_GPIO_Init+0x18>
  } 
}
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	46bd      	mov	sp, r7
 8000802:	b006      	add	sp, #24
 8000804:	bd80      	pop	{r7, pc}
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	40021000 	.word	0x40021000
 800080c:	40010000 	.word	0x40010000
 8000810:	48000400 	.word	0x48000400
 8000814:	48000800 	.word	0x48000800
 8000818:	48000c00 	.word	0x48000c00
 800081c:	40010400 	.word	0x40010400

08000820 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
 8000828:	0008      	movs	r0, r1
 800082a:	0011      	movs	r1, r2
 800082c:	1cbb      	adds	r3, r7, #2
 800082e:	1c02      	adds	r2, r0, #0
 8000830:	801a      	strh	r2, [r3, #0]
 8000832:	1c7b      	adds	r3, r7, #1
 8000834:	1c0a      	adds	r2, r1, #0
 8000836:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000838:	1c7b      	adds	r3, r7, #1
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d004      	beq.n	800084a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000840:	1cbb      	adds	r3, r7, #2
 8000842:	881a      	ldrh	r2, [r3, #0]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000848:	e003      	b.n	8000852 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800084a:	1cbb      	adds	r3, r7, #2
 800084c:	881a      	ldrh	r2, [r3, #0]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	46bd      	mov	sp, r7
 8000856:	b002      	add	sp, #8
 8000858:	bd80      	pop	{r7, pc}
	...

0800085c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b086      	sub	sp, #24
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8000864:	2300      	movs	r3, #0
 8000866:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2201      	movs	r2, #1
 800086e:	4013      	ands	r3, r2
 8000870:	d100      	bne.n	8000874 <HAL_RCC_OscConfig+0x18>
 8000872:	e08d      	b.n	8000990 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000874:	4bc3      	ldr	r3, [pc, #780]	; (8000b84 <HAL_RCC_OscConfig+0x328>)
 8000876:	685b      	ldr	r3, [r3, #4]
 8000878:	220c      	movs	r2, #12
 800087a:	4013      	ands	r3, r2
 800087c:	2b04      	cmp	r3, #4
 800087e:	d00e      	beq.n	800089e <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000880:	4bc0      	ldr	r3, [pc, #768]	; (8000b84 <HAL_RCC_OscConfig+0x328>)
 8000882:	685b      	ldr	r3, [r3, #4]
 8000884:	220c      	movs	r2, #12
 8000886:	4013      	ands	r3, r2
 8000888:	2b08      	cmp	r3, #8
 800088a:	d116      	bne.n	80008ba <HAL_RCC_OscConfig+0x5e>
 800088c:	4bbd      	ldr	r3, [pc, #756]	; (8000b84 <HAL_RCC_OscConfig+0x328>)
 800088e:	685a      	ldr	r2, [r3, #4]
 8000890:	2380      	movs	r3, #128	; 0x80
 8000892:	025b      	lsls	r3, r3, #9
 8000894:	401a      	ands	r2, r3
 8000896:	2380      	movs	r3, #128	; 0x80
 8000898:	025b      	lsls	r3, r3, #9
 800089a:	429a      	cmp	r2, r3
 800089c:	d10d      	bne.n	80008ba <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800089e:	4bb9      	ldr	r3, [pc, #740]	; (8000b84 <HAL_RCC_OscConfig+0x328>)
 80008a0:	681a      	ldr	r2, [r3, #0]
 80008a2:	2380      	movs	r3, #128	; 0x80
 80008a4:	029b      	lsls	r3, r3, #10
 80008a6:	4013      	ands	r3, r2
 80008a8:	d100      	bne.n	80008ac <HAL_RCC_OscConfig+0x50>
 80008aa:	e070      	b.n	800098e <HAL_RCC_OscConfig+0x132>
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	685b      	ldr	r3, [r3, #4]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d000      	beq.n	80008b6 <HAL_RCC_OscConfig+0x5a>
 80008b4:	e06b      	b.n	800098e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80008b6:	2301      	movs	r3, #1
 80008b8:	e2b6      	b.n	8000e28 <HAL_RCC_OscConfig+0x5cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	685b      	ldr	r3, [r3, #4]
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d107      	bne.n	80008d2 <HAL_RCC_OscConfig+0x76>
 80008c2:	4bb0      	ldr	r3, [pc, #704]	; (8000b84 <HAL_RCC_OscConfig+0x328>)
 80008c4:	681a      	ldr	r2, [r3, #0]
 80008c6:	4baf      	ldr	r3, [pc, #700]	; (8000b84 <HAL_RCC_OscConfig+0x328>)
 80008c8:	2180      	movs	r1, #128	; 0x80
 80008ca:	0249      	lsls	r1, r1, #9
 80008cc:	430a      	orrs	r2, r1
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	e02f      	b.n	8000932 <HAL_RCC_OscConfig+0xd6>
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	685b      	ldr	r3, [r3, #4]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d10c      	bne.n	80008f4 <HAL_RCC_OscConfig+0x98>
 80008da:	4baa      	ldr	r3, [pc, #680]	; (8000b84 <HAL_RCC_OscConfig+0x328>)
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	4ba9      	ldr	r3, [pc, #676]	; (8000b84 <HAL_RCC_OscConfig+0x328>)
 80008e0:	49a9      	ldr	r1, [pc, #676]	; (8000b88 <HAL_RCC_OscConfig+0x32c>)
 80008e2:	400a      	ands	r2, r1
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	4ba7      	ldr	r3, [pc, #668]	; (8000b84 <HAL_RCC_OscConfig+0x328>)
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	4ba6      	ldr	r3, [pc, #664]	; (8000b84 <HAL_RCC_OscConfig+0x328>)
 80008ec:	49a7      	ldr	r1, [pc, #668]	; (8000b8c <HAL_RCC_OscConfig+0x330>)
 80008ee:	400a      	ands	r2, r1
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	e01e      	b.n	8000932 <HAL_RCC_OscConfig+0xd6>
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	685b      	ldr	r3, [r3, #4]
 80008f8:	2b05      	cmp	r3, #5
 80008fa:	d10e      	bne.n	800091a <HAL_RCC_OscConfig+0xbe>
 80008fc:	4ba1      	ldr	r3, [pc, #644]	; (8000b84 <HAL_RCC_OscConfig+0x328>)
 80008fe:	681a      	ldr	r2, [r3, #0]
 8000900:	4ba0      	ldr	r3, [pc, #640]	; (8000b84 <HAL_RCC_OscConfig+0x328>)
 8000902:	2180      	movs	r1, #128	; 0x80
 8000904:	02c9      	lsls	r1, r1, #11
 8000906:	430a      	orrs	r2, r1
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	4b9e      	ldr	r3, [pc, #632]	; (8000b84 <HAL_RCC_OscConfig+0x328>)
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	4b9d      	ldr	r3, [pc, #628]	; (8000b84 <HAL_RCC_OscConfig+0x328>)
 8000910:	2180      	movs	r1, #128	; 0x80
 8000912:	0249      	lsls	r1, r1, #9
 8000914:	430a      	orrs	r2, r1
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	e00b      	b.n	8000932 <HAL_RCC_OscConfig+0xd6>
 800091a:	4b9a      	ldr	r3, [pc, #616]	; (8000b84 <HAL_RCC_OscConfig+0x328>)
 800091c:	681a      	ldr	r2, [r3, #0]
 800091e:	4b99      	ldr	r3, [pc, #612]	; (8000b84 <HAL_RCC_OscConfig+0x328>)
 8000920:	4999      	ldr	r1, [pc, #612]	; (8000b88 <HAL_RCC_OscConfig+0x32c>)
 8000922:	400a      	ands	r2, r1
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	4b97      	ldr	r3, [pc, #604]	; (8000b84 <HAL_RCC_OscConfig+0x328>)
 8000928:	681a      	ldr	r2, [r3, #0]
 800092a:	4b96      	ldr	r3, [pc, #600]	; (8000b84 <HAL_RCC_OscConfig+0x328>)
 800092c:	4997      	ldr	r1, [pc, #604]	; (8000b8c <HAL_RCC_OscConfig+0x330>)
 800092e:	400a      	ands	r2, r1
 8000930:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	685b      	ldr	r3, [r3, #4]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d014      	beq.n	8000964 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800093a:	f7ff fcb5 	bl	80002a8 <HAL_GetTick>
 800093e:	0003      	movs	r3, r0
 8000940:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000942:	e008      	b.n	8000956 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000944:	f7ff fcb0 	bl	80002a8 <HAL_GetTick>
 8000948:	0002      	movs	r2, r0
 800094a:	693b      	ldr	r3, [r7, #16]
 800094c:	1ad3      	subs	r3, r2, r3
 800094e:	2b64      	cmp	r3, #100	; 0x64
 8000950:	d901      	bls.n	8000956 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000952:	2303      	movs	r3, #3
 8000954:	e268      	b.n	8000e28 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000956:	4b8b      	ldr	r3, [pc, #556]	; (8000b84 <HAL_RCC_OscConfig+0x328>)
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	2380      	movs	r3, #128	; 0x80
 800095c:	029b      	lsls	r3, r3, #10
 800095e:	4013      	ands	r3, r2
 8000960:	d0f0      	beq.n	8000944 <HAL_RCC_OscConfig+0xe8>
 8000962:	e015      	b.n	8000990 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000964:	f7ff fca0 	bl	80002a8 <HAL_GetTick>
 8000968:	0003      	movs	r3, r0
 800096a:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800096c:	e008      	b.n	8000980 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800096e:	f7ff fc9b 	bl	80002a8 <HAL_GetTick>
 8000972:	0002      	movs	r2, r0
 8000974:	693b      	ldr	r3, [r7, #16]
 8000976:	1ad3      	subs	r3, r2, r3
 8000978:	2b64      	cmp	r3, #100	; 0x64
 800097a:	d901      	bls.n	8000980 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800097c:	2303      	movs	r3, #3
 800097e:	e253      	b.n	8000e28 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000980:	4b80      	ldr	r3, [pc, #512]	; (8000b84 <HAL_RCC_OscConfig+0x328>)
 8000982:	681a      	ldr	r2, [r3, #0]
 8000984:	2380      	movs	r3, #128	; 0x80
 8000986:	029b      	lsls	r3, r3, #10
 8000988:	4013      	ands	r3, r2
 800098a:	d1f0      	bne.n	800096e <HAL_RCC_OscConfig+0x112>
 800098c:	e000      	b.n	8000990 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800098e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2202      	movs	r2, #2
 8000996:	4013      	ands	r3, r2
 8000998:	d100      	bne.n	800099c <HAL_RCC_OscConfig+0x140>
 800099a:	e069      	b.n	8000a70 <HAL_RCC_OscConfig+0x214>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800099c:	4b79      	ldr	r3, [pc, #484]	; (8000b84 <HAL_RCC_OscConfig+0x328>)
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	220c      	movs	r2, #12
 80009a2:	4013      	ands	r3, r2
 80009a4:	d00b      	beq.n	80009be <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80009a6:	4b77      	ldr	r3, [pc, #476]	; (8000b84 <HAL_RCC_OscConfig+0x328>)
 80009a8:	685b      	ldr	r3, [r3, #4]
 80009aa:	220c      	movs	r2, #12
 80009ac:	4013      	ands	r3, r2
 80009ae:	2b08      	cmp	r3, #8
 80009b0:	d11c      	bne.n	80009ec <HAL_RCC_OscConfig+0x190>
 80009b2:	4b74      	ldr	r3, [pc, #464]	; (8000b84 <HAL_RCC_OscConfig+0x328>)
 80009b4:	685a      	ldr	r2, [r3, #4]
 80009b6:	2380      	movs	r3, #128	; 0x80
 80009b8:	025b      	lsls	r3, r3, #9
 80009ba:	4013      	ands	r3, r2
 80009bc:	d116      	bne.n	80009ec <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009be:	4b71      	ldr	r3, [pc, #452]	; (8000b84 <HAL_RCC_OscConfig+0x328>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	2202      	movs	r2, #2
 80009c4:	4013      	ands	r3, r2
 80009c6:	d005      	beq.n	80009d4 <HAL_RCC_OscConfig+0x178>
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	68db      	ldr	r3, [r3, #12]
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d001      	beq.n	80009d4 <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 80009d0:	2301      	movs	r3, #1
 80009d2:	e229      	b.n	8000e28 <HAL_RCC_OscConfig+0x5cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009d4:	4b6b      	ldr	r3, [pc, #428]	; (8000b84 <HAL_RCC_OscConfig+0x328>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	22f8      	movs	r2, #248	; 0xf8
 80009da:	4393      	bics	r3, r2
 80009dc:	0019      	movs	r1, r3
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	691b      	ldr	r3, [r3, #16]
 80009e2:	00da      	lsls	r2, r3, #3
 80009e4:	4b67      	ldr	r3, [pc, #412]	; (8000b84 <HAL_RCC_OscConfig+0x328>)
 80009e6:	430a      	orrs	r2, r1
 80009e8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009ea:	e041      	b.n	8000a70 <HAL_RCC_OscConfig+0x214>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	68db      	ldr	r3, [r3, #12]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d024      	beq.n	8000a3e <HAL_RCC_OscConfig+0x1e2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80009f4:	4b63      	ldr	r3, [pc, #396]	; (8000b84 <HAL_RCC_OscConfig+0x328>)
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	4b62      	ldr	r3, [pc, #392]	; (8000b84 <HAL_RCC_OscConfig+0x328>)
 80009fa:	2101      	movs	r1, #1
 80009fc:	430a      	orrs	r2, r1
 80009fe:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a00:	f7ff fc52 	bl	80002a8 <HAL_GetTick>
 8000a04:	0003      	movs	r3, r0
 8000a06:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a08:	e008      	b.n	8000a1c <HAL_RCC_OscConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a0a:	f7ff fc4d 	bl	80002a8 <HAL_GetTick>
 8000a0e:	0002      	movs	r2, r0
 8000a10:	693b      	ldr	r3, [r7, #16]
 8000a12:	1ad3      	subs	r3, r2, r3
 8000a14:	2b02      	cmp	r3, #2
 8000a16:	d901      	bls.n	8000a1c <HAL_RCC_OscConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	e205      	b.n	8000e28 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a1c:	4b59      	ldr	r3, [pc, #356]	; (8000b84 <HAL_RCC_OscConfig+0x328>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	2202      	movs	r2, #2
 8000a22:	4013      	ands	r3, r2
 8000a24:	d0f1      	beq.n	8000a0a <HAL_RCC_OscConfig+0x1ae>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a26:	4b57      	ldr	r3, [pc, #348]	; (8000b84 <HAL_RCC_OscConfig+0x328>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	22f8      	movs	r2, #248	; 0xf8
 8000a2c:	4393      	bics	r3, r2
 8000a2e:	0019      	movs	r1, r3
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	691b      	ldr	r3, [r3, #16]
 8000a34:	00da      	lsls	r2, r3, #3
 8000a36:	4b53      	ldr	r3, [pc, #332]	; (8000b84 <HAL_RCC_OscConfig+0x328>)
 8000a38:	430a      	orrs	r2, r1
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	e018      	b.n	8000a70 <HAL_RCC_OscConfig+0x214>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000a3e:	4b51      	ldr	r3, [pc, #324]	; (8000b84 <HAL_RCC_OscConfig+0x328>)
 8000a40:	681a      	ldr	r2, [r3, #0]
 8000a42:	4b50      	ldr	r3, [pc, #320]	; (8000b84 <HAL_RCC_OscConfig+0x328>)
 8000a44:	2101      	movs	r1, #1
 8000a46:	438a      	bics	r2, r1
 8000a48:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a4a:	f7ff fc2d 	bl	80002a8 <HAL_GetTick>
 8000a4e:	0003      	movs	r3, r0
 8000a50:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a52:	e008      	b.n	8000a66 <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a54:	f7ff fc28 	bl	80002a8 <HAL_GetTick>
 8000a58:	0002      	movs	r2, r0
 8000a5a:	693b      	ldr	r3, [r7, #16]
 8000a5c:	1ad3      	subs	r3, r2, r3
 8000a5e:	2b02      	cmp	r3, #2
 8000a60:	d901      	bls.n	8000a66 <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 8000a62:	2303      	movs	r3, #3
 8000a64:	e1e0      	b.n	8000e28 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a66:	4b47      	ldr	r3, [pc, #284]	; (8000b84 <HAL_RCC_OscConfig+0x328>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	2202      	movs	r2, #2
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	d1f1      	bne.n	8000a54 <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2208      	movs	r2, #8
 8000a76:	4013      	ands	r3, r2
 8000a78:	d036      	beq.n	8000ae8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	69db      	ldr	r3, [r3, #28]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d019      	beq.n	8000ab6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000a82:	4b40      	ldr	r3, [pc, #256]	; (8000b84 <HAL_RCC_OscConfig+0x328>)
 8000a84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a86:	4b3f      	ldr	r3, [pc, #252]	; (8000b84 <HAL_RCC_OscConfig+0x328>)
 8000a88:	2101      	movs	r1, #1
 8000a8a:	430a      	orrs	r2, r1
 8000a8c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a8e:	f7ff fc0b 	bl	80002a8 <HAL_GetTick>
 8000a92:	0003      	movs	r3, r0
 8000a94:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a96:	e008      	b.n	8000aaa <HAL_RCC_OscConfig+0x24e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a98:	f7ff fc06 	bl	80002a8 <HAL_GetTick>
 8000a9c:	0002      	movs	r2, r0
 8000a9e:	693b      	ldr	r3, [r7, #16]
 8000aa0:	1ad3      	subs	r3, r2, r3
 8000aa2:	2b02      	cmp	r3, #2
 8000aa4:	d901      	bls.n	8000aaa <HAL_RCC_OscConfig+0x24e>
        {
          return HAL_TIMEOUT;
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	e1be      	b.n	8000e28 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000aaa:	4b36      	ldr	r3, [pc, #216]	; (8000b84 <HAL_RCC_OscConfig+0x328>)
 8000aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aae:	2202      	movs	r2, #2
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	d0f1      	beq.n	8000a98 <HAL_RCC_OscConfig+0x23c>
 8000ab4:	e018      	b.n	8000ae8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ab6:	4b33      	ldr	r3, [pc, #204]	; (8000b84 <HAL_RCC_OscConfig+0x328>)
 8000ab8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000aba:	4b32      	ldr	r3, [pc, #200]	; (8000b84 <HAL_RCC_OscConfig+0x328>)
 8000abc:	2101      	movs	r1, #1
 8000abe:	438a      	bics	r2, r1
 8000ac0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ac2:	f7ff fbf1 	bl	80002a8 <HAL_GetTick>
 8000ac6:	0003      	movs	r3, r0
 8000ac8:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000aca:	e008      	b.n	8000ade <HAL_RCC_OscConfig+0x282>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000acc:	f7ff fbec 	bl	80002a8 <HAL_GetTick>
 8000ad0:	0002      	movs	r2, r0
 8000ad2:	693b      	ldr	r3, [r7, #16]
 8000ad4:	1ad3      	subs	r3, r2, r3
 8000ad6:	2b02      	cmp	r3, #2
 8000ad8:	d901      	bls.n	8000ade <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 8000ada:	2303      	movs	r3, #3
 8000adc:	e1a4      	b.n	8000e28 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ade:	4b29      	ldr	r3, [pc, #164]	; (8000b84 <HAL_RCC_OscConfig+0x328>)
 8000ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ae2:	2202      	movs	r2, #2
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	d1f1      	bne.n	8000acc <HAL_RCC_OscConfig+0x270>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	2204      	movs	r2, #4
 8000aee:	4013      	ands	r3, r2
 8000af0:	d100      	bne.n	8000af4 <HAL_RCC_OscConfig+0x298>
 8000af2:	e0b5      	b.n	8000c60 <HAL_RCC_OscConfig+0x404>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000af4:	2317      	movs	r3, #23
 8000af6:	18fb      	adds	r3, r7, r3
 8000af8:	2200      	movs	r2, #0
 8000afa:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000afc:	4b21      	ldr	r3, [pc, #132]	; (8000b84 <HAL_RCC_OscConfig+0x328>)
 8000afe:	69da      	ldr	r2, [r3, #28]
 8000b00:	2380      	movs	r3, #128	; 0x80
 8000b02:	055b      	lsls	r3, r3, #21
 8000b04:	4013      	ands	r3, r2
 8000b06:	d111      	bne.n	8000b2c <HAL_RCC_OscConfig+0x2d0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000b08:	4b1e      	ldr	r3, [pc, #120]	; (8000b84 <HAL_RCC_OscConfig+0x328>)
 8000b0a:	69da      	ldr	r2, [r3, #28]
 8000b0c:	4b1d      	ldr	r3, [pc, #116]	; (8000b84 <HAL_RCC_OscConfig+0x328>)
 8000b0e:	2180      	movs	r1, #128	; 0x80
 8000b10:	0549      	lsls	r1, r1, #21
 8000b12:	430a      	orrs	r2, r1
 8000b14:	61da      	str	r2, [r3, #28]
 8000b16:	4b1b      	ldr	r3, [pc, #108]	; (8000b84 <HAL_RCC_OscConfig+0x328>)
 8000b18:	69da      	ldr	r2, [r3, #28]
 8000b1a:	2380      	movs	r3, #128	; 0x80
 8000b1c:	055b      	lsls	r3, r3, #21
 8000b1e:	4013      	ands	r3, r2
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000b24:	2317      	movs	r3, #23
 8000b26:	18fb      	adds	r3, r7, r3
 8000b28:	2201      	movs	r2, #1
 8000b2a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b2c:	4b18      	ldr	r3, [pc, #96]	; (8000b90 <HAL_RCC_OscConfig+0x334>)
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	2380      	movs	r3, #128	; 0x80
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	4013      	ands	r3, r2
 8000b36:	d11a      	bne.n	8000b6e <HAL_RCC_OscConfig+0x312>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000b38:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <HAL_RCC_OscConfig+0x334>)
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	4b14      	ldr	r3, [pc, #80]	; (8000b90 <HAL_RCC_OscConfig+0x334>)
 8000b3e:	2180      	movs	r1, #128	; 0x80
 8000b40:	0049      	lsls	r1, r1, #1
 8000b42:	430a      	orrs	r2, r1
 8000b44:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000b46:	f7ff fbaf 	bl	80002a8 <HAL_GetTick>
 8000b4a:	0003      	movs	r3, r0
 8000b4c:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b4e:	e008      	b.n	8000b62 <HAL_RCC_OscConfig+0x306>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b50:	f7ff fbaa 	bl	80002a8 <HAL_GetTick>
 8000b54:	0002      	movs	r2, r0
 8000b56:	693b      	ldr	r3, [r7, #16]
 8000b58:	1ad3      	subs	r3, r2, r3
 8000b5a:	2b64      	cmp	r3, #100	; 0x64
 8000b5c:	d901      	bls.n	8000b62 <HAL_RCC_OscConfig+0x306>
        {
          return HAL_TIMEOUT;
 8000b5e:	2303      	movs	r3, #3
 8000b60:	e162      	b.n	8000e28 <HAL_RCC_OscConfig+0x5cc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b62:	4b0b      	ldr	r3, [pc, #44]	; (8000b90 <HAL_RCC_OscConfig+0x334>)
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	2380      	movs	r3, #128	; 0x80
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	d0f0      	beq.n	8000b50 <HAL_RCC_OscConfig+0x2f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	689b      	ldr	r3, [r3, #8]
 8000b72:	2b01      	cmp	r3, #1
 8000b74:	d10e      	bne.n	8000b94 <HAL_RCC_OscConfig+0x338>
 8000b76:	4b03      	ldr	r3, [pc, #12]	; (8000b84 <HAL_RCC_OscConfig+0x328>)
 8000b78:	6a1a      	ldr	r2, [r3, #32]
 8000b7a:	4b02      	ldr	r3, [pc, #8]	; (8000b84 <HAL_RCC_OscConfig+0x328>)
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	430a      	orrs	r2, r1
 8000b80:	621a      	str	r2, [r3, #32]
 8000b82:	e035      	b.n	8000bf0 <HAL_RCC_OscConfig+0x394>
 8000b84:	40021000 	.word	0x40021000
 8000b88:	fffeffff 	.word	0xfffeffff
 8000b8c:	fffbffff 	.word	0xfffbffff
 8000b90:	40007000 	.word	0x40007000
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	689b      	ldr	r3, [r3, #8]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d10c      	bne.n	8000bb6 <HAL_RCC_OscConfig+0x35a>
 8000b9c:	4ba4      	ldr	r3, [pc, #656]	; (8000e30 <HAL_RCC_OscConfig+0x5d4>)
 8000b9e:	6a1a      	ldr	r2, [r3, #32]
 8000ba0:	4ba3      	ldr	r3, [pc, #652]	; (8000e30 <HAL_RCC_OscConfig+0x5d4>)
 8000ba2:	2101      	movs	r1, #1
 8000ba4:	438a      	bics	r2, r1
 8000ba6:	621a      	str	r2, [r3, #32]
 8000ba8:	4ba1      	ldr	r3, [pc, #644]	; (8000e30 <HAL_RCC_OscConfig+0x5d4>)
 8000baa:	6a1a      	ldr	r2, [r3, #32]
 8000bac:	4ba0      	ldr	r3, [pc, #640]	; (8000e30 <HAL_RCC_OscConfig+0x5d4>)
 8000bae:	2104      	movs	r1, #4
 8000bb0:	438a      	bics	r2, r1
 8000bb2:	621a      	str	r2, [r3, #32]
 8000bb4:	e01c      	b.n	8000bf0 <HAL_RCC_OscConfig+0x394>
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	689b      	ldr	r3, [r3, #8]
 8000bba:	2b05      	cmp	r3, #5
 8000bbc:	d10c      	bne.n	8000bd8 <HAL_RCC_OscConfig+0x37c>
 8000bbe:	4b9c      	ldr	r3, [pc, #624]	; (8000e30 <HAL_RCC_OscConfig+0x5d4>)
 8000bc0:	6a1a      	ldr	r2, [r3, #32]
 8000bc2:	4b9b      	ldr	r3, [pc, #620]	; (8000e30 <HAL_RCC_OscConfig+0x5d4>)
 8000bc4:	2104      	movs	r1, #4
 8000bc6:	430a      	orrs	r2, r1
 8000bc8:	621a      	str	r2, [r3, #32]
 8000bca:	4b99      	ldr	r3, [pc, #612]	; (8000e30 <HAL_RCC_OscConfig+0x5d4>)
 8000bcc:	6a1a      	ldr	r2, [r3, #32]
 8000bce:	4b98      	ldr	r3, [pc, #608]	; (8000e30 <HAL_RCC_OscConfig+0x5d4>)
 8000bd0:	2101      	movs	r1, #1
 8000bd2:	430a      	orrs	r2, r1
 8000bd4:	621a      	str	r2, [r3, #32]
 8000bd6:	e00b      	b.n	8000bf0 <HAL_RCC_OscConfig+0x394>
 8000bd8:	4b95      	ldr	r3, [pc, #596]	; (8000e30 <HAL_RCC_OscConfig+0x5d4>)
 8000bda:	6a1a      	ldr	r2, [r3, #32]
 8000bdc:	4b94      	ldr	r3, [pc, #592]	; (8000e30 <HAL_RCC_OscConfig+0x5d4>)
 8000bde:	2101      	movs	r1, #1
 8000be0:	438a      	bics	r2, r1
 8000be2:	621a      	str	r2, [r3, #32]
 8000be4:	4b92      	ldr	r3, [pc, #584]	; (8000e30 <HAL_RCC_OscConfig+0x5d4>)
 8000be6:	6a1a      	ldr	r2, [r3, #32]
 8000be8:	4b91      	ldr	r3, [pc, #580]	; (8000e30 <HAL_RCC_OscConfig+0x5d4>)
 8000bea:	2104      	movs	r1, #4
 8000bec:	438a      	bics	r2, r1
 8000bee:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	689b      	ldr	r3, [r3, #8]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d014      	beq.n	8000c22 <HAL_RCC_OscConfig+0x3c6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000bf8:	f7ff fb56 	bl	80002a8 <HAL_GetTick>
 8000bfc:	0003      	movs	r3, r0
 8000bfe:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c00:	e009      	b.n	8000c16 <HAL_RCC_OscConfig+0x3ba>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c02:	f7ff fb51 	bl	80002a8 <HAL_GetTick>
 8000c06:	0002      	movs	r2, r0
 8000c08:	693b      	ldr	r3, [r7, #16]
 8000c0a:	1ad3      	subs	r3, r2, r3
 8000c0c:	4a89      	ldr	r2, [pc, #548]	; (8000e34 <HAL_RCC_OscConfig+0x5d8>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d901      	bls.n	8000c16 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8000c12:	2303      	movs	r3, #3
 8000c14:	e108      	b.n	8000e28 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c16:	4b86      	ldr	r3, [pc, #536]	; (8000e30 <HAL_RCC_OscConfig+0x5d4>)
 8000c18:	6a1b      	ldr	r3, [r3, #32]
 8000c1a:	2202      	movs	r2, #2
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	d0f0      	beq.n	8000c02 <HAL_RCC_OscConfig+0x3a6>
 8000c20:	e013      	b.n	8000c4a <HAL_RCC_OscConfig+0x3ee>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c22:	f7ff fb41 	bl	80002a8 <HAL_GetTick>
 8000c26:	0003      	movs	r3, r0
 8000c28:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c2a:	e009      	b.n	8000c40 <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c2c:	f7ff fb3c 	bl	80002a8 <HAL_GetTick>
 8000c30:	0002      	movs	r2, r0
 8000c32:	693b      	ldr	r3, [r7, #16]
 8000c34:	1ad3      	subs	r3, r2, r3
 8000c36:	4a7f      	ldr	r2, [pc, #508]	; (8000e34 <HAL_RCC_OscConfig+0x5d8>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d901      	bls.n	8000c40 <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 8000c3c:	2303      	movs	r3, #3
 8000c3e:	e0f3      	b.n	8000e28 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c40:	4b7b      	ldr	r3, [pc, #492]	; (8000e30 <HAL_RCC_OscConfig+0x5d4>)
 8000c42:	6a1b      	ldr	r3, [r3, #32]
 8000c44:	2202      	movs	r2, #2
 8000c46:	4013      	ands	r3, r2
 8000c48:	d1f0      	bne.n	8000c2c <HAL_RCC_OscConfig+0x3d0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000c4a:	2317      	movs	r3, #23
 8000c4c:	18fb      	adds	r3, r7, r3
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d105      	bne.n	8000c60 <HAL_RCC_OscConfig+0x404>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c54:	4b76      	ldr	r3, [pc, #472]	; (8000e30 <HAL_RCC_OscConfig+0x5d4>)
 8000c56:	69da      	ldr	r2, [r3, #28]
 8000c58:	4b75      	ldr	r3, [pc, #468]	; (8000e30 <HAL_RCC_OscConfig+0x5d4>)
 8000c5a:	4977      	ldr	r1, [pc, #476]	; (8000e38 <HAL_RCC_OscConfig+0x5dc>)
 8000c5c:	400a      	ands	r2, r1
 8000c5e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	2210      	movs	r2, #16
 8000c66:	4013      	ands	r3, r2
 8000c68:	d063      	beq.n	8000d32 <HAL_RCC_OscConfig+0x4d6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	695b      	ldr	r3, [r3, #20]
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d12a      	bne.n	8000cc8 <HAL_RCC_OscConfig+0x46c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000c72:	4b6f      	ldr	r3, [pc, #444]	; (8000e30 <HAL_RCC_OscConfig+0x5d4>)
 8000c74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c76:	4b6e      	ldr	r3, [pc, #440]	; (8000e30 <HAL_RCC_OscConfig+0x5d4>)
 8000c78:	2104      	movs	r1, #4
 8000c7a:	430a      	orrs	r2, r1
 8000c7c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8000c7e:	4b6c      	ldr	r3, [pc, #432]	; (8000e30 <HAL_RCC_OscConfig+0x5d4>)
 8000c80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c82:	4b6b      	ldr	r3, [pc, #428]	; (8000e30 <HAL_RCC_OscConfig+0x5d4>)
 8000c84:	2101      	movs	r1, #1
 8000c86:	430a      	orrs	r2, r1
 8000c88:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c8a:	f7ff fb0d 	bl	80002a8 <HAL_GetTick>
 8000c8e:	0003      	movs	r3, r0
 8000c90:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000c92:	e008      	b.n	8000ca6 <HAL_RCC_OscConfig+0x44a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000c94:	f7ff fb08 	bl	80002a8 <HAL_GetTick>
 8000c98:	0002      	movs	r2, r0
 8000c9a:	693b      	ldr	r3, [r7, #16]
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	2b02      	cmp	r3, #2
 8000ca0:	d901      	bls.n	8000ca6 <HAL_RCC_OscConfig+0x44a>
        {
          return HAL_TIMEOUT;
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	e0c0      	b.n	8000e28 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000ca6:	4b62      	ldr	r3, [pc, #392]	; (8000e30 <HAL_RCC_OscConfig+0x5d4>)
 8000ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000caa:	2202      	movs	r2, #2
 8000cac:	4013      	ands	r3, r2
 8000cae:	d0f1      	beq.n	8000c94 <HAL_RCC_OscConfig+0x438>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000cb0:	4b5f      	ldr	r3, [pc, #380]	; (8000e30 <HAL_RCC_OscConfig+0x5d4>)
 8000cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cb4:	22f8      	movs	r2, #248	; 0xf8
 8000cb6:	4393      	bics	r3, r2
 8000cb8:	0019      	movs	r1, r3
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	699b      	ldr	r3, [r3, #24]
 8000cbe:	00da      	lsls	r2, r3, #3
 8000cc0:	4b5b      	ldr	r3, [pc, #364]	; (8000e30 <HAL_RCC_OscConfig+0x5d4>)
 8000cc2:	430a      	orrs	r2, r1
 8000cc4:	635a      	str	r2, [r3, #52]	; 0x34
 8000cc6:	e034      	b.n	8000d32 <HAL_RCC_OscConfig+0x4d6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	695b      	ldr	r3, [r3, #20]
 8000ccc:	3305      	adds	r3, #5
 8000cce:	d111      	bne.n	8000cf4 <HAL_RCC_OscConfig+0x498>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000cd0:	4b57      	ldr	r3, [pc, #348]	; (8000e30 <HAL_RCC_OscConfig+0x5d4>)
 8000cd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cd4:	4b56      	ldr	r3, [pc, #344]	; (8000e30 <HAL_RCC_OscConfig+0x5d4>)
 8000cd6:	2104      	movs	r1, #4
 8000cd8:	438a      	bics	r2, r1
 8000cda:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000cdc:	4b54      	ldr	r3, [pc, #336]	; (8000e30 <HAL_RCC_OscConfig+0x5d4>)
 8000cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ce0:	22f8      	movs	r2, #248	; 0xf8
 8000ce2:	4393      	bics	r3, r2
 8000ce4:	0019      	movs	r1, r3
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	699b      	ldr	r3, [r3, #24]
 8000cea:	00da      	lsls	r2, r3, #3
 8000cec:	4b50      	ldr	r3, [pc, #320]	; (8000e30 <HAL_RCC_OscConfig+0x5d4>)
 8000cee:	430a      	orrs	r2, r1
 8000cf0:	635a      	str	r2, [r3, #52]	; 0x34
 8000cf2:	e01e      	b.n	8000d32 <HAL_RCC_OscConfig+0x4d6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000cf4:	4b4e      	ldr	r3, [pc, #312]	; (8000e30 <HAL_RCC_OscConfig+0x5d4>)
 8000cf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cf8:	4b4d      	ldr	r3, [pc, #308]	; (8000e30 <HAL_RCC_OscConfig+0x5d4>)
 8000cfa:	2104      	movs	r1, #4
 8000cfc:	430a      	orrs	r2, r1
 8000cfe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8000d00:	4b4b      	ldr	r3, [pc, #300]	; (8000e30 <HAL_RCC_OscConfig+0x5d4>)
 8000d02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d04:	4b4a      	ldr	r3, [pc, #296]	; (8000e30 <HAL_RCC_OscConfig+0x5d4>)
 8000d06:	2101      	movs	r1, #1
 8000d08:	438a      	bics	r2, r1
 8000d0a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d0c:	f7ff facc 	bl	80002a8 <HAL_GetTick>
 8000d10:	0003      	movs	r3, r0
 8000d12:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000d14:	e008      	b.n	8000d28 <HAL_RCC_OscConfig+0x4cc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000d16:	f7ff fac7 	bl	80002a8 <HAL_GetTick>
 8000d1a:	0002      	movs	r2, r0
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	1ad3      	subs	r3, r2, r3
 8000d20:	2b02      	cmp	r3, #2
 8000d22:	d901      	bls.n	8000d28 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8000d24:	2303      	movs	r3, #3
 8000d26:	e07f      	b.n	8000e28 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000d28:	4b41      	ldr	r3, [pc, #260]	; (8000e30 <HAL_RCC_OscConfig+0x5d4>)
 8000d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d2c:	2202      	movs	r2, #2
 8000d2e:	4013      	ands	r3, r2
 8000d30:	d1f1      	bne.n	8000d16 <HAL_RCC_OscConfig+0x4ba>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6a1b      	ldr	r3, [r3, #32]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d100      	bne.n	8000d3c <HAL_RCC_OscConfig+0x4e0>
 8000d3a:	e074      	b.n	8000e26 <HAL_RCC_OscConfig+0x5ca>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d3c:	4b3c      	ldr	r3, [pc, #240]	; (8000e30 <HAL_RCC_OscConfig+0x5d4>)
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	220c      	movs	r2, #12
 8000d42:	4013      	ands	r3, r2
 8000d44:	2b08      	cmp	r3, #8
 8000d46:	d100      	bne.n	8000d4a <HAL_RCC_OscConfig+0x4ee>
 8000d48:	e06b      	b.n	8000e22 <HAL_RCC_OscConfig+0x5c6>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6a1b      	ldr	r3, [r3, #32]
 8000d4e:	2b02      	cmp	r3, #2
 8000d50:	d14c      	bne.n	8000dec <HAL_RCC_OscConfig+0x590>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d52:	4b37      	ldr	r3, [pc, #220]	; (8000e30 <HAL_RCC_OscConfig+0x5d4>)
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	4b36      	ldr	r3, [pc, #216]	; (8000e30 <HAL_RCC_OscConfig+0x5d4>)
 8000d58:	4938      	ldr	r1, [pc, #224]	; (8000e3c <HAL_RCC_OscConfig+0x5e0>)
 8000d5a:	400a      	ands	r2, r1
 8000d5c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d5e:	f7ff faa3 	bl	80002a8 <HAL_GetTick>
 8000d62:	0003      	movs	r3, r0
 8000d64:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d66:	e008      	b.n	8000d7a <HAL_RCC_OscConfig+0x51e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d68:	f7ff fa9e 	bl	80002a8 <HAL_GetTick>
 8000d6c:	0002      	movs	r2, r0
 8000d6e:	693b      	ldr	r3, [r7, #16]
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	2b02      	cmp	r3, #2
 8000d74:	d901      	bls.n	8000d7a <HAL_RCC_OscConfig+0x51e>
          {
            return HAL_TIMEOUT;
 8000d76:	2303      	movs	r3, #3
 8000d78:	e056      	b.n	8000e28 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d7a:	4b2d      	ldr	r3, [pc, #180]	; (8000e30 <HAL_RCC_OscConfig+0x5d4>)
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	2380      	movs	r3, #128	; 0x80
 8000d80:	049b      	lsls	r3, r3, #18
 8000d82:	4013      	ands	r3, r2
 8000d84:	d1f0      	bne.n	8000d68 <HAL_RCC_OscConfig+0x50c>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d86:	4b2a      	ldr	r3, [pc, #168]	; (8000e30 <HAL_RCC_OscConfig+0x5d4>)
 8000d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d8a:	220f      	movs	r2, #15
 8000d8c:	4393      	bics	r3, r2
 8000d8e:	0019      	movs	r1, r3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d94:	4b26      	ldr	r3, [pc, #152]	; (8000e30 <HAL_RCC_OscConfig+0x5d4>)
 8000d96:	430a      	orrs	r2, r1
 8000d98:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d9a:	4b25      	ldr	r3, [pc, #148]	; (8000e30 <HAL_RCC_OscConfig+0x5d4>)
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	4a28      	ldr	r2, [pc, #160]	; (8000e40 <HAL_RCC_OscConfig+0x5e4>)
 8000da0:	4013      	ands	r3, r2
 8000da2:	0019      	movs	r1, r3
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dac:	431a      	orrs	r2, r3
 8000dae:	4b20      	ldr	r3, [pc, #128]	; (8000e30 <HAL_RCC_OscConfig+0x5d4>)
 8000db0:	430a      	orrs	r2, r1
 8000db2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000db4:	4b1e      	ldr	r3, [pc, #120]	; (8000e30 <HAL_RCC_OscConfig+0x5d4>)
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	4b1d      	ldr	r3, [pc, #116]	; (8000e30 <HAL_RCC_OscConfig+0x5d4>)
 8000dba:	2180      	movs	r1, #128	; 0x80
 8000dbc:	0449      	lsls	r1, r1, #17
 8000dbe:	430a      	orrs	r2, r1
 8000dc0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dc2:	f7ff fa71 	bl	80002a8 <HAL_GetTick>
 8000dc6:	0003      	movs	r3, r0
 8000dc8:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000dca:	e008      	b.n	8000dde <HAL_RCC_OscConfig+0x582>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000dcc:	f7ff fa6c 	bl	80002a8 <HAL_GetTick>
 8000dd0:	0002      	movs	r2, r0
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	2b02      	cmp	r3, #2
 8000dd8:	d901      	bls.n	8000dde <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	e024      	b.n	8000e28 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000dde:	4b14      	ldr	r3, [pc, #80]	; (8000e30 <HAL_RCC_OscConfig+0x5d4>)
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	2380      	movs	r3, #128	; 0x80
 8000de4:	049b      	lsls	r3, r3, #18
 8000de6:	4013      	ands	r3, r2
 8000de8:	d0f0      	beq.n	8000dcc <HAL_RCC_OscConfig+0x570>
 8000dea:	e01c      	b.n	8000e26 <HAL_RCC_OscConfig+0x5ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000dec:	4b10      	ldr	r3, [pc, #64]	; (8000e30 <HAL_RCC_OscConfig+0x5d4>)
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	4b0f      	ldr	r3, [pc, #60]	; (8000e30 <HAL_RCC_OscConfig+0x5d4>)
 8000df2:	4912      	ldr	r1, [pc, #72]	; (8000e3c <HAL_RCC_OscConfig+0x5e0>)
 8000df4:	400a      	ands	r2, r1
 8000df6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000df8:	f7ff fa56 	bl	80002a8 <HAL_GetTick>
 8000dfc:	0003      	movs	r3, r0
 8000dfe:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e00:	e008      	b.n	8000e14 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e02:	f7ff fa51 	bl	80002a8 <HAL_GetTick>
 8000e06:	0002      	movs	r2, r0
 8000e08:	693b      	ldr	r3, [r7, #16]
 8000e0a:	1ad3      	subs	r3, r2, r3
 8000e0c:	2b02      	cmp	r3, #2
 8000e0e:	d901      	bls.n	8000e14 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8000e10:	2303      	movs	r3, #3
 8000e12:	e009      	b.n	8000e28 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <HAL_RCC_OscConfig+0x5d4>)
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	2380      	movs	r3, #128	; 0x80
 8000e1a:	049b      	lsls	r3, r3, #18
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	d1f0      	bne.n	8000e02 <HAL_RCC_OscConfig+0x5a6>
 8000e20:	e001      	b.n	8000e26 <HAL_RCC_OscConfig+0x5ca>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	e000      	b.n	8000e28 <HAL_RCC_OscConfig+0x5cc>
    }
  }
  
  return HAL_OK;
 8000e26:	2300      	movs	r3, #0
}
 8000e28:	0018      	movs	r0, r3
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	b006      	add	sp, #24
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40021000 	.word	0x40021000
 8000e34:	00001388 	.word	0x00001388
 8000e38:	efffffff 	.word	0xefffffff
 8000e3c:	feffffff 	.word	0xfeffffff
 8000e40:	ffc2ffff 	.word	0xffc2ffff

08000e44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000e52:	4b6a      	ldr	r3, [pc, #424]	; (8000ffc <HAL_RCC_ClockConfig+0x1b8>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	2201      	movs	r2, #1
 8000e58:	4013      	ands	r3, r2
 8000e5a:	683a      	ldr	r2, [r7, #0]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d911      	bls.n	8000e84 <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e60:	4b66      	ldr	r3, [pc, #408]	; (8000ffc <HAL_RCC_ClockConfig+0x1b8>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2201      	movs	r2, #1
 8000e66:	4393      	bics	r3, r2
 8000e68:	0019      	movs	r1, r3
 8000e6a:	4b64      	ldr	r3, [pc, #400]	; (8000ffc <HAL_RCC_ClockConfig+0x1b8>)
 8000e6c:	683a      	ldr	r2, [r7, #0]
 8000e6e:	430a      	orrs	r2, r1
 8000e70:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000e72:	4b62      	ldr	r3, [pc, #392]	; (8000ffc <HAL_RCC_ClockConfig+0x1b8>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	2201      	movs	r2, #1
 8000e78:	4013      	ands	r3, r2
 8000e7a:	683a      	ldr	r2, [r7, #0]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	d001      	beq.n	8000e84 <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 8000e80:	2301      	movs	r3, #1
 8000e82:	e0b6      	b.n	8000ff2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2202      	movs	r2, #2
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	d009      	beq.n	8000ea2 <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e8e:	4b5c      	ldr	r3, [pc, #368]	; (8001000 <HAL_RCC_ClockConfig+0x1bc>)
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	22f0      	movs	r2, #240	; 0xf0
 8000e94:	4393      	bics	r3, r2
 8000e96:	0019      	movs	r1, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	689a      	ldr	r2, [r3, #8]
 8000e9c:	4b58      	ldr	r3, [pc, #352]	; (8001000 <HAL_RCC_ClockConfig+0x1bc>)
 8000e9e:	430a      	orrs	r2, r1
 8000ea0:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	d100      	bne.n	8000eae <HAL_RCC_ClockConfig+0x6a>
 8000eac:	e067      	b.n	8000f7e <HAL_RCC_ClockConfig+0x13a>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d107      	bne.n	8000ec6 <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eb6:	4b52      	ldr	r3, [pc, #328]	; (8001000 <HAL_RCC_ClockConfig+0x1bc>)
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	2380      	movs	r3, #128	; 0x80
 8000ebc:	029b      	lsls	r3, r3, #10
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	d114      	bne.n	8000eec <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e095      	b.n	8000ff2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	2b02      	cmp	r3, #2
 8000ecc:	d107      	bne.n	8000ede <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ece:	4b4c      	ldr	r3, [pc, #304]	; (8001000 <HAL_RCC_ClockConfig+0x1bc>)
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	2380      	movs	r3, #128	; 0x80
 8000ed4:	049b      	lsls	r3, r3, #18
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	d108      	bne.n	8000eec <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e089      	b.n	8000ff2 <HAL_RCC_ClockConfig+0x1ae>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ede:	4b48      	ldr	r3, [pc, #288]	; (8001000 <HAL_RCC_ClockConfig+0x1bc>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	2202      	movs	r2, #2
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	d101      	bne.n	8000eec <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	e082      	b.n	8000ff2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000eec:	4b44      	ldr	r3, [pc, #272]	; (8001000 <HAL_RCC_ClockConfig+0x1bc>)
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	2203      	movs	r2, #3
 8000ef2:	4393      	bics	r3, r2
 8000ef4:	0019      	movs	r1, r3
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	685a      	ldr	r2, [r3, #4]
 8000efa:	4b41      	ldr	r3, [pc, #260]	; (8001000 <HAL_RCC_ClockConfig+0x1bc>)
 8000efc:	430a      	orrs	r2, r1
 8000efe:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000f00:	f7ff f9d2 	bl	80002a8 <HAL_GetTick>
 8000f04:	0003      	movs	r3, r0
 8000f06:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d111      	bne.n	8000f34 <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f10:	e009      	b.n	8000f26 <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f12:	f7ff f9c9 	bl	80002a8 <HAL_GetTick>
 8000f16:	0002      	movs	r2, r0
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	1ad3      	subs	r3, r2, r3
 8000f1c:	4a39      	ldr	r2, [pc, #228]	; (8001004 <HAL_RCC_ClockConfig+0x1c0>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d901      	bls.n	8000f26 <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 8000f22:	2303      	movs	r3, #3
 8000f24:	e065      	b.n	8000ff2 <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f26:	4b36      	ldr	r3, [pc, #216]	; (8001000 <HAL_RCC_ClockConfig+0x1bc>)
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	220c      	movs	r2, #12
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	2b04      	cmp	r3, #4
 8000f30:	d1ef      	bne.n	8000f12 <HAL_RCC_ClockConfig+0xce>
 8000f32:	e024      	b.n	8000f7e <HAL_RCC_ClockConfig+0x13a>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	d11b      	bne.n	8000f74 <HAL_RCC_ClockConfig+0x130>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f3c:	e009      	b.n	8000f52 <HAL_RCC_ClockConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f3e:	f7ff f9b3 	bl	80002a8 <HAL_GetTick>
 8000f42:	0002      	movs	r2, r0
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	1ad3      	subs	r3, r2, r3
 8000f48:	4a2e      	ldr	r2, [pc, #184]	; (8001004 <HAL_RCC_ClockConfig+0x1c0>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d901      	bls.n	8000f52 <HAL_RCC_ClockConfig+0x10e>
        {
          return HAL_TIMEOUT;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	e04f      	b.n	8000ff2 <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f52:	4b2b      	ldr	r3, [pc, #172]	; (8001000 <HAL_RCC_ClockConfig+0x1bc>)
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	220c      	movs	r2, #12
 8000f58:	4013      	ands	r3, r2
 8000f5a:	2b08      	cmp	r3, #8
 8000f5c:	d1ef      	bne.n	8000f3e <HAL_RCC_ClockConfig+0xfa>
 8000f5e:	e00e      	b.n	8000f7e <HAL_RCC_ClockConfig+0x13a>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f60:	f7ff f9a2 	bl	80002a8 <HAL_GetTick>
 8000f64:	0002      	movs	r2, r0
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	4a26      	ldr	r2, [pc, #152]	; (8001004 <HAL_RCC_ClockConfig+0x1c0>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d901      	bls.n	8000f74 <HAL_RCC_ClockConfig+0x130>
        {
          return HAL_TIMEOUT;
 8000f70:	2303      	movs	r3, #3
 8000f72:	e03e      	b.n	8000ff2 <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f74:	4b22      	ldr	r3, [pc, #136]	; (8001000 <HAL_RCC_ClockConfig+0x1bc>)
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	220c      	movs	r2, #12
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	d1f0      	bne.n	8000f60 <HAL_RCC_ClockConfig+0x11c>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000f7e:	4b1f      	ldr	r3, [pc, #124]	; (8000ffc <HAL_RCC_ClockConfig+0x1b8>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	2201      	movs	r2, #1
 8000f84:	4013      	ands	r3, r2
 8000f86:	683a      	ldr	r2, [r7, #0]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d211      	bcs.n	8000fb0 <HAL_RCC_ClockConfig+0x16c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f8c:	4b1b      	ldr	r3, [pc, #108]	; (8000ffc <HAL_RCC_ClockConfig+0x1b8>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2201      	movs	r2, #1
 8000f92:	4393      	bics	r3, r2
 8000f94:	0019      	movs	r1, r3
 8000f96:	4b19      	ldr	r3, [pc, #100]	; (8000ffc <HAL_RCC_ClockConfig+0x1b8>)
 8000f98:	683a      	ldr	r2, [r7, #0]
 8000f9a:	430a      	orrs	r2, r1
 8000f9c:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000f9e:	4b17      	ldr	r3, [pc, #92]	; (8000ffc <HAL_RCC_ClockConfig+0x1b8>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	683a      	ldr	r2, [r7, #0]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d001      	beq.n	8000fb0 <HAL_RCC_ClockConfig+0x16c>
    {
      return HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	e020      	b.n	8000ff2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	2204      	movs	r2, #4
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	d009      	beq.n	8000fce <HAL_RCC_ClockConfig+0x18a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000fba:	4b11      	ldr	r3, [pc, #68]	; (8001000 <HAL_RCC_ClockConfig+0x1bc>)
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	4a12      	ldr	r2, [pc, #72]	; (8001008 <HAL_RCC_ClockConfig+0x1c4>)
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	0019      	movs	r1, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	68da      	ldr	r2, [r3, #12]
 8000fc8:	4b0d      	ldr	r3, [pc, #52]	; (8001000 <HAL_RCC_ClockConfig+0x1bc>)
 8000fca:	430a      	orrs	r2, r1
 8000fcc:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000fce:	f000 f821 	bl	8001014 <HAL_RCC_GetSysClockFreq>
 8000fd2:	0001      	movs	r1, r0
 8000fd4:	4b0a      	ldr	r3, [pc, #40]	; (8001000 <HAL_RCC_ClockConfig+0x1bc>)
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	091b      	lsrs	r3, r3, #4
 8000fda:	220f      	movs	r2, #15
 8000fdc:	4013      	ands	r3, r2
 8000fde:	4a0b      	ldr	r2, [pc, #44]	; (800100c <HAL_RCC_ClockConfig+0x1c8>)
 8000fe0:	5cd3      	ldrb	r3, [r2, r3]
 8000fe2:	000a      	movs	r2, r1
 8000fe4:	40da      	lsrs	r2, r3
 8000fe6:	4b0a      	ldr	r3, [pc, #40]	; (8001010 <HAL_RCC_ClockConfig+0x1cc>)
 8000fe8:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000fea:	2000      	movs	r0, #0
 8000fec:	f7ff f934 	bl	8000258 <HAL_InitTick>
  
  return HAL_OK;
 8000ff0:	2300      	movs	r3, #0
}
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	b004      	add	sp, #16
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	46c0      	nop			; (mov r8, r8)
 8000ffc:	40022000 	.word	0x40022000
 8001000:	40021000 	.word	0x40021000
 8001004:	00001388 	.word	0x00001388
 8001008:	fffff8ff 	.word	0xfffff8ff
 800100c:	080043f0 	.word	0x080043f0
 8001010:	20000004 	.word	0x20000004

08001014 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001014:	b590      	push	{r4, r7, lr}
 8001016:	b08f      	sub	sp, #60	; 0x3c
 8001018:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800101a:	2314      	movs	r3, #20
 800101c:	18fb      	adds	r3, r7, r3
 800101e:	4a2b      	ldr	r2, [pc, #172]	; (80010cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001020:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001022:	c313      	stmia	r3!, {r0, r1, r4}
 8001024:	6812      	ldr	r2, [r2, #0]
 8001026:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001028:	1d3b      	adds	r3, r7, #4
 800102a:	4a29      	ldr	r2, [pc, #164]	; (80010d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800102c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800102e:	c313      	stmia	r3!, {r0, r1, r4}
 8001030:	6812      	ldr	r2, [r2, #0]
 8001032:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001034:	2300      	movs	r3, #0
 8001036:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001038:	2300      	movs	r3, #0
 800103a:	62bb      	str	r3, [r7, #40]	; 0x28
 800103c:	2300      	movs	r3, #0
 800103e:	637b      	str	r3, [r7, #52]	; 0x34
 8001040:	2300      	movs	r3, #0
 8001042:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001044:	2300      	movs	r3, #0
 8001046:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001048:	4b22      	ldr	r3, [pc, #136]	; (80010d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800104e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001050:	220c      	movs	r2, #12
 8001052:	4013      	ands	r3, r2
 8001054:	2b04      	cmp	r3, #4
 8001056:	d002      	beq.n	800105e <HAL_RCC_GetSysClockFreq+0x4a>
 8001058:	2b08      	cmp	r3, #8
 800105a:	d003      	beq.n	8001064 <HAL_RCC_GetSysClockFreq+0x50>
 800105c:	e02d      	b.n	80010ba <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800105e:	4b1e      	ldr	r3, [pc, #120]	; (80010d8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001060:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001062:	e02d      	b.n	80010c0 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001066:	0c9b      	lsrs	r3, r3, #18
 8001068:	220f      	movs	r2, #15
 800106a:	4013      	ands	r3, r2
 800106c:	2214      	movs	r2, #20
 800106e:	18ba      	adds	r2, r7, r2
 8001070:	5cd3      	ldrb	r3, [r2, r3]
 8001072:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001074:	4b17      	ldr	r3, [pc, #92]	; (80010d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001078:	220f      	movs	r2, #15
 800107a:	4013      	ands	r3, r2
 800107c:	1d3a      	adds	r2, r7, #4
 800107e:	5cd3      	ldrb	r3, [r2, r3]
 8001080:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001082:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001084:	2380      	movs	r3, #128	; 0x80
 8001086:	025b      	lsls	r3, r3, #9
 8001088:	4013      	ands	r3, r2
 800108a:	d009      	beq.n	80010a0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 800108c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800108e:	4812      	ldr	r0, [pc, #72]	; (80010d8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001090:	f7ff f842 	bl	8000118 <__udivsi3>
 8001094:	0003      	movs	r3, r0
 8001096:	001a      	movs	r2, r3
 8001098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109a:	4353      	muls	r3, r2
 800109c:	637b      	str	r3, [r7, #52]	; 0x34
 800109e:	e009      	b.n	80010b4 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 80010a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80010a2:	000a      	movs	r2, r1
 80010a4:	0152      	lsls	r2, r2, #5
 80010a6:	1a52      	subs	r2, r2, r1
 80010a8:	0193      	lsls	r3, r2, #6
 80010aa:	1a9b      	subs	r3, r3, r2
 80010ac:	00db      	lsls	r3, r3, #3
 80010ae:	185b      	adds	r3, r3, r1
 80010b0:	021b      	lsls	r3, r3, #8
 80010b2:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80010b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010b6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80010b8:	e002      	b.n	80010c0 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80010ba:	4b07      	ldr	r3, [pc, #28]	; (80010d8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80010bc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80010be:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80010c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80010c2:	0018      	movs	r0, r3
 80010c4:	46bd      	mov	sp, r7
 80010c6:	b00f      	add	sp, #60	; 0x3c
 80010c8:	bd90      	pop	{r4, r7, pc}
 80010ca:	46c0      	nop			; (mov r8, r8)
 80010cc:	0800412c 	.word	0x0800412c
 80010d0:	0800413c 	.word	0x0800413c
 80010d4:	40021000 	.word	0x40021000
 80010d8:	007a1200 	.word	0x007a1200

080010dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80010e0:	4b02      	ldr	r3, [pc, #8]	; (80010ec <HAL_RCC_GetHCLKFreq+0x10>)
 80010e2:	681b      	ldr	r3, [r3, #0]
}
 80010e4:	0018      	movs	r0, r3
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	46c0      	nop			; (mov r8, r8)
 80010ec:	20000004 	.word	0x20000004

080010f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80010f4:	f7ff fff2 	bl	80010dc <HAL_RCC_GetHCLKFreq>
 80010f8:	0001      	movs	r1, r0
 80010fa:	4b06      	ldr	r3, [pc, #24]	; (8001114 <HAL_RCC_GetPCLK1Freq+0x24>)
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	0a1b      	lsrs	r3, r3, #8
 8001100:	2207      	movs	r2, #7
 8001102:	4013      	ands	r3, r2
 8001104:	4a04      	ldr	r2, [pc, #16]	; (8001118 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001106:	5cd3      	ldrb	r3, [r2, r3]
 8001108:	40d9      	lsrs	r1, r3
 800110a:	000b      	movs	r3, r1
}    
 800110c:	0018      	movs	r0, r3
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	46c0      	nop			; (mov r8, r8)
 8001114:	40021000 	.word	0x40021000
 8001118:	08004400 	.word	0x08004400

0800111c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001124:	2300      	movs	r3, #0
 8001126:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001128:	2300      	movs	r3, #0
 800112a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	2380      	movs	r3, #128	; 0x80
 8001132:	025b      	lsls	r3, r3, #9
 8001134:	4013      	ands	r3, r2
 8001136:	d100      	bne.n	800113a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001138:	e08f      	b.n	800125a <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800113a:	2317      	movs	r3, #23
 800113c:	18fb      	adds	r3, r7, r3
 800113e:	2200      	movs	r2, #0
 8001140:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001142:	4b57      	ldr	r3, [pc, #348]	; (80012a0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001144:	69da      	ldr	r2, [r3, #28]
 8001146:	2380      	movs	r3, #128	; 0x80
 8001148:	055b      	lsls	r3, r3, #21
 800114a:	4013      	ands	r3, r2
 800114c:	d111      	bne.n	8001172 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800114e:	4b54      	ldr	r3, [pc, #336]	; (80012a0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001150:	69da      	ldr	r2, [r3, #28]
 8001152:	4b53      	ldr	r3, [pc, #332]	; (80012a0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001154:	2180      	movs	r1, #128	; 0x80
 8001156:	0549      	lsls	r1, r1, #21
 8001158:	430a      	orrs	r2, r1
 800115a:	61da      	str	r2, [r3, #28]
 800115c:	4b50      	ldr	r3, [pc, #320]	; (80012a0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800115e:	69da      	ldr	r2, [r3, #28]
 8001160:	2380      	movs	r3, #128	; 0x80
 8001162:	055b      	lsls	r3, r3, #21
 8001164:	4013      	ands	r3, r2
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800116a:	2317      	movs	r3, #23
 800116c:	18fb      	adds	r3, r7, r3
 800116e:	2201      	movs	r2, #1
 8001170:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001172:	4b4c      	ldr	r3, [pc, #304]	; (80012a4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	2380      	movs	r3, #128	; 0x80
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	4013      	ands	r3, r2
 800117c:	d11a      	bne.n	80011b4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800117e:	4b49      	ldr	r3, [pc, #292]	; (80012a4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	4b48      	ldr	r3, [pc, #288]	; (80012a4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001184:	2180      	movs	r1, #128	; 0x80
 8001186:	0049      	lsls	r1, r1, #1
 8001188:	430a      	orrs	r2, r1
 800118a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800118c:	f7ff f88c 	bl	80002a8 <HAL_GetTick>
 8001190:	0003      	movs	r3, r0
 8001192:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001194:	e008      	b.n	80011a8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001196:	f7ff f887 	bl	80002a8 <HAL_GetTick>
 800119a:	0002      	movs	r2, r0
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	2b64      	cmp	r3, #100	; 0x64
 80011a2:	d901      	bls.n	80011a8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 80011a4:	2303      	movs	r3, #3
 80011a6:	e077      	b.n	8001298 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011a8:	4b3e      	ldr	r3, [pc, #248]	; (80012a4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	2380      	movs	r3, #128	; 0x80
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	4013      	ands	r3, r2
 80011b2:	d0f0      	beq.n	8001196 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80011b4:	4b3a      	ldr	r3, [pc, #232]	; (80012a0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80011b6:	6a1a      	ldr	r2, [r3, #32]
 80011b8:	23c0      	movs	r3, #192	; 0xc0
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	4013      	ands	r3, r2
 80011be:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d034      	beq.n	8001230 <HAL_RCCEx_PeriphCLKConfig+0x114>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685a      	ldr	r2, [r3, #4]
 80011ca:	23c0      	movs	r3, #192	; 0xc0
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	4013      	ands	r3, r2
 80011d0:	68fa      	ldr	r2, [r7, #12]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d02c      	beq.n	8001230 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80011d6:	4b32      	ldr	r3, [pc, #200]	; (80012a0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80011d8:	6a1b      	ldr	r3, [r3, #32]
 80011da:	4a33      	ldr	r2, [pc, #204]	; (80012a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80011dc:	4013      	ands	r3, r2
 80011de:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80011e0:	4b2f      	ldr	r3, [pc, #188]	; (80012a0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80011e2:	6a1a      	ldr	r2, [r3, #32]
 80011e4:	4b2e      	ldr	r3, [pc, #184]	; (80012a0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80011e6:	2180      	movs	r1, #128	; 0x80
 80011e8:	0249      	lsls	r1, r1, #9
 80011ea:	430a      	orrs	r2, r1
 80011ec:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80011ee:	4b2c      	ldr	r3, [pc, #176]	; (80012a0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80011f0:	6a1a      	ldr	r2, [r3, #32]
 80011f2:	4b2b      	ldr	r3, [pc, #172]	; (80012a0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80011f4:	492d      	ldr	r1, [pc, #180]	; (80012ac <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80011f6:	400a      	ands	r2, r1
 80011f8:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80011fa:	4b29      	ldr	r3, [pc, #164]	; (80012a0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80011fc:	68fa      	ldr	r2, [r7, #12]
 80011fe:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	2201      	movs	r2, #1
 8001204:	4013      	ands	r3, r2
 8001206:	d013      	beq.n	8001230 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001208:	f7ff f84e 	bl	80002a8 <HAL_GetTick>
 800120c:	0003      	movs	r3, r0
 800120e:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001210:	e009      	b.n	8001226 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001212:	f7ff f849 	bl	80002a8 <HAL_GetTick>
 8001216:	0002      	movs	r2, r0
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	4a24      	ldr	r2, [pc, #144]	; (80012b0 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d901      	bls.n	8001226 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001222:	2303      	movs	r3, #3
 8001224:	e038      	b.n	8001298 <HAL_RCCEx_PeriphCLKConfig+0x17c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001226:	4b1e      	ldr	r3, [pc, #120]	; (80012a0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001228:	6a1b      	ldr	r3, [r3, #32]
 800122a:	2202      	movs	r2, #2
 800122c:	4013      	ands	r3, r2
 800122e:	d0f0      	beq.n	8001212 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001230:	4b1b      	ldr	r3, [pc, #108]	; (80012a0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001232:	6a1b      	ldr	r3, [r3, #32]
 8001234:	4a1c      	ldr	r2, [pc, #112]	; (80012a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001236:	4013      	ands	r3, r2
 8001238:	0019      	movs	r1, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	685a      	ldr	r2, [r3, #4]
 800123e:	4b18      	ldr	r3, [pc, #96]	; (80012a0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001240:	430a      	orrs	r2, r1
 8001242:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001244:	2317      	movs	r3, #23
 8001246:	18fb      	adds	r3, r7, r3
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	2b01      	cmp	r3, #1
 800124c:	d105      	bne.n	800125a <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800124e:	4b14      	ldr	r3, [pc, #80]	; (80012a0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001250:	69da      	ldr	r2, [r3, #28]
 8001252:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001254:	4917      	ldr	r1, [pc, #92]	; (80012b4 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001256:	400a      	ands	r2, r1
 8001258:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2201      	movs	r2, #1
 8001260:	4013      	ands	r3, r2
 8001262:	d009      	beq.n	8001278 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001264:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001268:	2203      	movs	r2, #3
 800126a:	4393      	bics	r3, r2
 800126c:	0019      	movs	r1, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	689a      	ldr	r2, [r3, #8]
 8001272:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001274:	430a      	orrs	r2, r1
 8001276:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2220      	movs	r2, #32
 800127e:	4013      	ands	r3, r2
 8001280:	d009      	beq.n	8001296 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001282:	4b07      	ldr	r3, [pc, #28]	; (80012a0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	2210      	movs	r2, #16
 8001288:	4393      	bics	r3, r2
 800128a:	0019      	movs	r1, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	68da      	ldr	r2, [r3, #12]
 8001290:	4b03      	ldr	r3, [pc, #12]	; (80012a0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001292:	430a      	orrs	r2, r1
 8001294:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001296:	2300      	movs	r3, #0
}
 8001298:	0018      	movs	r0, r3
 800129a:	46bd      	mov	sp, r7
 800129c:	b006      	add	sp, #24
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40021000 	.word	0x40021000
 80012a4:	40007000 	.word	0x40007000
 80012a8:	fffffcff 	.word	0xfffffcff
 80012ac:	fffeffff 	.word	0xfffeffff
 80012b0:	00001388 	.word	0x00001388
 80012b4:	efffffff 	.word	0xefffffff

080012b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d101      	bne.n	80012ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e047      	b.n	800135a <HAL_UART_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2269      	movs	r2, #105	; 0x69
 80012ce:	5c9b      	ldrb	r3, [r3, r2]
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d107      	bne.n	80012e6 <HAL_UART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2268      	movs	r2, #104	; 0x68
 80012da:	2100      	movs	r1, #0
 80012dc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	0018      	movs	r0, r3
 80012e2:	f001 f9b1 	bl	8002648 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2269      	movs	r2, #105	; 0x69
 80012ea:	2124      	movs	r1, #36	; 0x24
 80012ec:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2101      	movs	r1, #1
 80012fa:	438a      	bics	r2, r1
 80012fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	0018      	movs	r0, r3
 8001302:	f000 fa69 	bl	80017d8 <UART_SetConfig>
 8001306:	0003      	movs	r3, r0
 8001308:	2b01      	cmp	r3, #1
 800130a:	d101      	bne.n	8001310 <HAL_UART_Init+0x58>
  {
    return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e024      	b.n	800135a <HAL_UART_Init+0xa2>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001314:	2b00      	cmp	r3, #0
 8001316:	d003      	beq.n	8001320 <HAL_UART_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	0018      	movs	r0, r3
 800131c:	f000 fbd2 	bl	8001ac4 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register. */
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	685a      	ldr	r2, [r3, #4]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	490e      	ldr	r1, [pc, #56]	; (8001364 <HAL_UART_Init+0xac>)
 800132c:	400a      	ands	r2, r1
 800132e:	605a      	str	r2, [r3, #4]
#endif
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	689a      	ldr	r2, [r3, #8]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2108      	movs	r1, #8
 800133c:	438a      	bics	r2, r1
 800133e:	609a      	str	r2, [r3, #8]
#endif
#endif

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2101      	movs	r1, #1
 800134c:	430a      	orrs	r2, r1
 800134e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	0018      	movs	r0, r3
 8001354:	f000 fc6a 	bl	8001c2c <UART_CheckIdleState>
 8001358:	0003      	movs	r3, r0
}
 800135a:	0018      	movs	r0, r3
 800135c:	46bd      	mov	sp, r7
 800135e:	b002      	add	sp, #8
 8001360:	bd80      	pop	{r7, pc}
 8001362:	46c0      	nop			; (mov r8, r8)
 8001364:	fffff7ff 	.word	0xfffff7ff

08001368 <HAL_UART_Transmit>:
  *         (as sent data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b088      	sub	sp, #32
 800136c:	af02      	add	r7, sp, #8
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	603b      	str	r3, [r7, #0]
 8001374:	1dbb      	adds	r3, r7, #6
 8001376:	801a      	strh	r2, [r3, #0]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8001378:	2300      	movs	r3, #0
 800137a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	2269      	movs	r2, #105	; 0x69
 8001380:	5c9b      	ldrb	r3, [r3, r2]
 8001382:	b2db      	uxtb	r3, r3
 8001384:	2b20      	cmp	r3, #32
 8001386:	d000      	beq.n	800138a <HAL_UART_Transmit+0x22>
 8001388:	e08c      	b.n	80014a4 <HAL_UART_Transmit+0x13c>
  {
    if((pData == NULL ) || (Size == 0U))
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d003      	beq.n	8001398 <HAL_UART_Transmit+0x30>
 8001390:	1dbb      	adds	r3, r7, #6
 8001392:	881b      	ldrh	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d101      	bne.n	800139c <HAL_UART_Transmit+0x34>
    {
      return  HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e084      	b.n	80014a6 <HAL_UART_Transmit+0x13e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
       should be aligned on a u16 frontier, as data to be filled into TDR will be 
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	689a      	ldr	r2, [r3, #8]
 80013a0:	2380      	movs	r3, #128	; 0x80
 80013a2:	015b      	lsls	r3, r3, #5
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d109      	bne.n	80013bc <HAL_UART_Transmit+0x54>
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	691b      	ldr	r3, [r3, #16]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d105      	bne.n	80013bc <HAL_UART_Transmit+0x54>
    {
      if((((uint32_t)pData)&1U) != 0U)
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	2201      	movs	r2, #1
 80013b4:	4013      	ands	r3, r2
 80013b6:	d001      	beq.n	80013bc <HAL_UART_Transmit+0x54>
      {
        return  HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e074      	b.n	80014a6 <HAL_UART_Transmit+0x13e>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2268      	movs	r2, #104	; 0x68
 80013c0:	5c9b      	ldrb	r3, [r3, r2]
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d101      	bne.n	80013ca <HAL_UART_Transmit+0x62>
 80013c6:	2302      	movs	r3, #2
 80013c8:	e06d      	b.n	80014a6 <HAL_UART_Transmit+0x13e>
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	2268      	movs	r2, #104	; 0x68
 80013ce:	2101      	movs	r1, #1
 80013d0:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	2200      	movs	r2, #0
 80013d6:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	2269      	movs	r2, #105	; 0x69
 80013dc:	2121      	movs	r1, #33	; 0x21
 80013de:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80013e0:	f7fe ff62 	bl	80002a8 <HAL_GetTick>
 80013e4:	0003      	movs	r3, r0
 80013e6:	617b      	str	r3, [r7, #20]

    huart->TxXferSize = Size;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	1dba      	adds	r2, r7, #6
 80013ec:	2150      	movs	r1, #80	; 0x50
 80013ee:	8812      	ldrh	r2, [r2, #0]
 80013f0:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	1dba      	adds	r2, r7, #6
 80013f6:	2152      	movs	r1, #82	; 0x52
 80013f8:	8812      	ldrh	r2, [r2, #0]
 80013fa:	525a      	strh	r2, [r3, r1]
    while(huart->TxXferCount > 0)
 80013fc:	e035      	b.n	800146a <HAL_UART_Transmit+0x102>
    {
      huart->TxXferCount--;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	2252      	movs	r2, #82	; 0x52
 8001402:	5a9b      	ldrh	r3, [r3, r2]
 8001404:	b29b      	uxth	r3, r3
 8001406:	3b01      	subs	r3, #1
 8001408:	b299      	uxth	r1, r3
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	2252      	movs	r2, #82	; 0x52
 800140e:	5299      	strh	r1, [r3, r2]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001410:	697a      	ldr	r2, [r7, #20]
 8001412:	68f8      	ldr	r0, [r7, #12]
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	9300      	str	r3, [sp, #0]
 8001418:	0013      	movs	r3, r2
 800141a:	2200      	movs	r2, #0
 800141c:	2180      	movs	r1, #128	; 0x80
 800141e:	f000 fc1d 	bl	8001c5c <UART_WaitOnFlagUntilTimeout>
 8001422:	1e03      	subs	r3, r0, #0
 8001424:	d001      	beq.n	800142a <HAL_UART_Transmit+0xc2>
      {
        return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e03d      	b.n	80014a6 <HAL_UART_Transmit+0x13e>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	689a      	ldr	r2, [r3, #8]
 800142e:	2380      	movs	r3, #128	; 0x80
 8001430:	015b      	lsls	r3, r3, #5
 8001432:	429a      	cmp	r2, r3
 8001434:	d111      	bne.n	800145a <HAL_UART_Transmit+0xf2>
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	691b      	ldr	r3, [r3, #16]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d10d      	bne.n	800145a <HAL_UART_Transmit+0xf2>
      {
        tmp = (uint16_t*) pData;
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	881a      	ldrh	r2, [r3, #0]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	05d2      	lsls	r2, r2, #23
 800144c:	0dd2      	lsrs	r2, r2, #23
 800144e:	b292      	uxth	r2, r2
 8001450:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2;
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	3302      	adds	r3, #2
 8001456:	60bb      	str	r3, [r7, #8]
 8001458:	e007      	b.n	800146a <HAL_UART_Transmit+0x102>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	1c5a      	adds	r2, r3, #1
 800145e:	60ba      	str	r2, [r7, #8]
 8001460:	781a      	ldrb	r2, [r3, #0]
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	b292      	uxth	r2, r2
 8001468:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0)
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	2252      	movs	r2, #82	; 0x52
 800146e:	5a9b      	ldrh	r3, [r3, r2]
 8001470:	b29b      	uxth	r3, r3
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1c3      	bne.n	80013fe <HAL_UART_Transmit+0x96>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001476:	697a      	ldr	r2, [r7, #20]
 8001478:	68f8      	ldr	r0, [r7, #12]
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	9300      	str	r3, [sp, #0]
 800147e:	0013      	movs	r3, r2
 8001480:	2200      	movs	r2, #0
 8001482:	2140      	movs	r1, #64	; 0x40
 8001484:	f000 fbea 	bl	8001c5c <UART_WaitOnFlagUntilTimeout>
 8001488:	1e03      	subs	r3, r0, #0
 800148a:	d001      	beq.n	8001490 <HAL_UART_Transmit+0x128>
    {
      return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e00a      	b.n	80014a6 <HAL_UART_Transmit+0x13e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2269      	movs	r2, #105	; 0x69
 8001494:	2120      	movs	r1, #32
 8001496:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	2268      	movs	r2, #104	; 0x68
 800149c:	2100      	movs	r1, #0
 800149e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80014a0:	2300      	movs	r3, #0
 80014a2:	e000      	b.n	80014a6 <HAL_UART_Transmit+0x13e>
  }
  else
  {
    return HAL_BUSY;
 80014a4:	2302      	movs	r3, #2
  }
}
 80014a6:	0018      	movs	r0, r3
 80014a8:	46bd      	mov	sp, r7
 80014aa:	b006      	add	sp, #24
 80014ac:	bd80      	pop	{r7, pc}
	...

080014b0 <HAL_UART_Receive_IT>:
  *         (as received data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	1dbb      	adds	r3, r7, #6
 80014bc:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	226a      	movs	r2, #106	; 0x6a
 80014c2:	5c9b      	ldrb	r3, [r3, r2]
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	2b20      	cmp	r3, #32
 80014c8:	d000      	beq.n	80014cc <HAL_UART_Receive_IT+0x1c>
 80014ca:	e073      	b.n	80015b4 <HAL_UART_Receive_IT+0x104>
  {
    if((pData == NULL ) || (Size == 0U))
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d003      	beq.n	80014da <HAL_UART_Receive_IT+0x2a>
 80014d2:	1dbb      	adds	r3, r7, #6
 80014d4:	881b      	ldrh	r3, [r3, #0]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d101      	bne.n	80014de <HAL_UART_Receive_IT+0x2e>
    {
      return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e06b      	b.n	80015b6 <HAL_UART_Receive_IT+0x106>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
       should be aligned on a u16 frontier, as data to be received from RDR will be 
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	689a      	ldr	r2, [r3, #8]
 80014e2:	2380      	movs	r3, #128	; 0x80
 80014e4:	015b      	lsls	r3, r3, #5
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d109      	bne.n	80014fe <HAL_UART_Receive_IT+0x4e>
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	691b      	ldr	r3, [r3, #16]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d105      	bne.n	80014fe <HAL_UART_Receive_IT+0x4e>
    {
      if((((uint32_t)pData)&1U) != 0U)
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	2201      	movs	r2, #1
 80014f6:	4013      	ands	r3, r2
 80014f8:	d001      	beq.n	80014fe <HAL_UART_Receive_IT+0x4e>
      {
        return  HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e05b      	b.n	80015b6 <HAL_UART_Receive_IT+0x106>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2268      	movs	r2, #104	; 0x68
 8001502:	5c9b      	ldrb	r3, [r3, r2]
 8001504:	2b01      	cmp	r3, #1
 8001506:	d101      	bne.n	800150c <HAL_UART_Receive_IT+0x5c>
 8001508:	2302      	movs	r3, #2
 800150a:	e054      	b.n	80015b6 <HAL_UART_Receive_IT+0x106>
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	2268      	movs	r2, #104	; 0x68
 8001510:	2101      	movs	r1, #1
 8001512:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr = pData;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	68ba      	ldr	r2, [r7, #8]
 8001518:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	1dba      	adds	r2, r7, #6
 800151e:	2158      	movs	r1, #88	; 0x58
 8001520:	8812      	ldrh	r2, [r2, #0]
 8001522:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	1dba      	adds	r2, r7, #6
 8001528:	215a      	movs	r1, #90	; 0x5a
 800152a:	8812      	ldrh	r2, [r2, #0]
 800152c:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	689a      	ldr	r2, [r3, #8]
 8001532:	2380      	movs	r3, #128	; 0x80
 8001534:	015b      	lsls	r3, r3, #5
 8001536:	429a      	cmp	r2, r3
 8001538:	d10d      	bne.n	8001556 <HAL_UART_Receive_IT+0xa6>
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	691b      	ldr	r3, [r3, #16]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d104      	bne.n	800154c <HAL_UART_Receive_IT+0x9c>
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	225c      	movs	r2, #92	; 0x5c
 8001546:	491e      	ldr	r1, [pc, #120]	; (80015c0 <HAL_UART_Receive_IT+0x110>)
 8001548:	5299      	strh	r1, [r3, r2]
 800154a:	e015      	b.n	8001578 <HAL_UART_Receive_IT+0xc8>
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	225c      	movs	r2, #92	; 0x5c
 8001550:	21ff      	movs	r1, #255	; 0xff
 8001552:	5299      	strh	r1, [r3, r2]
 8001554:	e010      	b.n	8001578 <HAL_UART_Receive_IT+0xc8>
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d10c      	bne.n	8001578 <HAL_UART_Receive_IT+0xc8>
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	691b      	ldr	r3, [r3, #16]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d104      	bne.n	8001570 <HAL_UART_Receive_IT+0xc0>
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	225c      	movs	r2, #92	; 0x5c
 800156a:	21ff      	movs	r1, #255	; 0xff
 800156c:	5299      	strh	r1, [r3, r2]
 800156e:	e003      	b.n	8001578 <HAL_UART_Receive_IT+0xc8>
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	225c      	movs	r2, #92	; 0x5c
 8001574:	217f      	movs	r1, #127	; 0x7f
 8001576:	5299      	strh	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	2200      	movs	r2, #0
 800157c:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	226a      	movs	r2, #106	; 0x6a
 8001582:	2122      	movs	r1, #34	; 0x22
 8001584:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	2268      	movs	r2, #104	; 0x68
 800158a:	2100      	movs	r1, #0
 800158c:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	689a      	ldr	r2, [r3, #8]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2101      	movs	r1, #1
 800159a:	430a      	orrs	r2, r1
 800159c:	609a      	str	r2, [r3, #8]

    /* Enable the UART Parity Error and Data Register not empty Interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2190      	movs	r1, #144	; 0x90
 80015aa:	0049      	lsls	r1, r1, #1
 80015ac:	430a      	orrs	r2, r1
 80015ae:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80015b0:	2300      	movs	r3, #0
 80015b2:	e000      	b.n	80015b6 <HAL_UART_Receive_IT+0x106>
  }
  else
  {
    return HAL_BUSY;
 80015b4:	2302      	movs	r3, #2
  }
}
 80015b6:	0018      	movs	r0, r3
 80015b8:	46bd      	mov	sp, r7
 80015ba:	b004      	add	sp, #16
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	46c0      	nop			; (mov r8, r8)
 80015c0:	000001ff 	.word	0x000001ff

080015c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	69db      	ldr	r3, [r3, #28]
 80015d2:	617b      	str	r3, [r7, #20]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	613b      	str	r3, [r7, #16]
  uint32_t cr3its;
  uint32_t errorflags;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	220f      	movs	r2, #15
 80015e0:	4013      	ands	r3, r2
 80015e2:	60fb      	str	r3, [r7, #12]
  if (errorflags == RESET)
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d10c      	bne.n	8001604 <HAL_UART_IRQHandler+0x40>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	2220      	movs	r2, #32
 80015ee:	4013      	ands	r3, r2
 80015f0:	d008      	beq.n	8001604 <HAL_UART_IRQHandler+0x40>
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	2220      	movs	r2, #32
 80015f6:	4013      	ands	r3, r2
 80015f8:	d004      	beq.n	8001604 <HAL_UART_IRQHandler+0x40>
    {
      UART_Receive_IT(huart);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	0018      	movs	r0, r3
 80015fe:	f000 fc1f 	bl	8001e40 <UART_Receive_IT>
      return;
 8001602:	e0d3      	b.n	80017ac <HAL_UART_IRQHandler+0x1e8>
    }
  }  

  /* If some errors occur */
  cr3its = READ_REG(huart->Instance->CR3);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	60bb      	str	r3, [r7, #8]
  if(   (errorflags != RESET)
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d100      	bne.n	8001614 <HAL_UART_IRQHandler+0x50>
 8001612:	e0af      	b.n	8001774 <HAL_UART_IRQHandler+0x1b0>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	2201      	movs	r2, #1
 8001618:	4013      	ands	r3, r2
 800161a:	d105      	bne.n	8001628 <HAL_UART_IRQHandler+0x64>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 800161c:	693a      	ldr	r2, [r7, #16]
 800161e:	2390      	movs	r3, #144	; 0x90
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	4013      	ands	r3, r2
 8001624:	d100      	bne.n	8001628 <HAL_UART_IRQHandler+0x64>
 8001626:	e0a5      	b.n	8001774 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	2201      	movs	r2, #1
 800162c:	4013      	ands	r3, r2
 800162e:	d00e      	beq.n	800164e <HAL_UART_IRQHandler+0x8a>
 8001630:	693a      	ldr	r2, [r7, #16]
 8001632:	2380      	movs	r3, #128	; 0x80
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	4013      	ands	r3, r2
 8001638:	d009      	beq.n	800164e <HAL_UART_IRQHandler+0x8a>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2201      	movs	r2, #1
 8001640:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001646:	2201      	movs	r2, #1
 8001648:	431a      	orrs	r2, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	2202      	movs	r2, #2
 8001652:	4013      	ands	r3, r2
 8001654:	d00d      	beq.n	8001672 <HAL_UART_IRQHandler+0xae>
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	2201      	movs	r2, #1
 800165a:	4013      	ands	r3, r2
 800165c:	d009      	beq.n	8001672 <HAL_UART_IRQHandler+0xae>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2202      	movs	r2, #2
 8001664:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800166a:	2204      	movs	r2, #4
 800166c:	431a      	orrs	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	2204      	movs	r2, #4
 8001676:	4013      	ands	r3, r2
 8001678:	d00d      	beq.n	8001696 <HAL_UART_IRQHandler+0xd2>
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	2201      	movs	r2, #1
 800167e:	4013      	ands	r3, r2
 8001680:	d009      	beq.n	8001696 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2204      	movs	r2, #4
 8001688:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800168e:	2202      	movs	r2, #2
 8001690:	431a      	orrs	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	66da      	str	r2, [r3, #108]	; 0x6c
    }
    
    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	2208      	movs	r2, #8
 800169a:	4013      	ands	r3, r2
 800169c:	d011      	beq.n	80016c2 <HAL_UART_IRQHandler+0xfe>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	2220      	movs	r2, #32
 80016a2:	4013      	ands	r3, r2
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 80016a4:	d103      	bne.n	80016ae <HAL_UART_IRQHandler+0xea>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	2201      	movs	r2, #1
 80016aa:	4013      	ands	r3, r2
 80016ac:	d009      	beq.n	80016c2 <HAL_UART_IRQHandler+0xfe>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2208      	movs	r2, #8
 80016b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80016ba:	2208      	movs	r2, #8
 80016bc:	431a      	orrs	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d100      	bne.n	80016cc <HAL_UART_IRQHandler+0x108>
 80016ca:	e06e      	b.n	80017aa <HAL_UART_IRQHandler+0x1e6>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	2220      	movs	r2, #32
 80016d0:	4013      	ands	r3, r2
 80016d2:	d007      	beq.n	80016e4 <HAL_UART_IRQHandler+0x120>
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	2220      	movs	r2, #32
 80016d8:	4013      	ands	r3, r2
 80016da:	d003      	beq.n	80016e4 <HAL_UART_IRQHandler+0x120>
      {
        UART_Receive_IT(huart);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	0018      	movs	r0, r3
 80016e0:	f000 fbae 	bl	8001e40 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80016e8:	2208      	movs	r2, #8
 80016ea:	4013      	ands	r3, r2
 80016ec:	d105      	bne.n	80016fa <HAL_UART_IRQHandler+0x136>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	2240      	movs	r2, #64	; 0x40
 80016f6:	4013      	ands	r3, r2
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80016f8:	d032      	beq.n	8001760 <HAL_UART_IRQHandler+0x19c>
      {  
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	0018      	movs	r0, r3
 80016fe:	f000 faf9 	bl	8001cf4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	2240      	movs	r2, #64	; 0x40
 800170a:	4013      	ands	r3, r2
 800170c:	d023      	beq.n	8001756 <HAL_UART_IRQHandler+0x192>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	689a      	ldr	r2, [r3, #8]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2140      	movs	r1, #64	; 0x40
 800171a:	438a      	bics	r2, r1
 800171c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001722:	2b00      	cmp	r3, #0
 8001724:	d012      	beq.n	800174c <HAL_UART_IRQHandler+0x188>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800172a:	4a22      	ldr	r2, [pc, #136]	; (80017b4 <HAL_UART_IRQHandler+0x1f0>)
 800172c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001732:	0018      	movs	r0, r3
 8001734:	f7fe feba 	bl	80004ac <HAL_DMA_Abort_IT>
 8001738:	1e03      	subs	r3, r0, #0
 800173a:	d019      	beq.n	8001770 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001740:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001746:	0018      	movs	r0, r3
 8001748:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800174a:	e011      	b.n	8001770 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	0018      	movs	r0, r3
 8001750:	f000 f83a 	bl	80017c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001754:	e00c      	b.n	8001770 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	0018      	movs	r0, r3
 800175a:	f000 f835 	bl	80017c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800175e:	e007      	b.n	8001770 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	0018      	movs	r0, r3
 8001764:	f000 f830 	bl	80017c8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2200      	movs	r2, #0
 800176c:	66da      	str	r2, [r3, #108]	; 0x6c
      }
    }
    return;
 800176e:	e01c      	b.n	80017aa <HAL_UART_IRQHandler+0x1e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001770:	46c0      	nop			; (mov r8, r8)
    return;
 8001772:	e01a      	b.n	80017aa <HAL_UART_IRQHandler+0x1e6>
    return;
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	2280      	movs	r2, #128	; 0x80
 8001778:	4013      	ands	r3, r2
 800177a:	d008      	beq.n	800178e <HAL_UART_IRQHandler+0x1ca>
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	2280      	movs	r2, #128	; 0x80
 8001780:	4013      	ands	r3, r2
 8001782:	d004      	beq.n	800178e <HAL_UART_IRQHandler+0x1ca>
  {
    UART_Transmit_IT(huart);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	0018      	movs	r0, r3
 8001788:	f000 fae9 	bl	8001d5e <UART_Transmit_IT>
    return;
 800178c:	e00e      	b.n	80017ac <HAL_UART_IRQHandler+0x1e8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	2240      	movs	r2, #64	; 0x40
 8001792:	4013      	ands	r3, r2
 8001794:	d00a      	beq.n	80017ac <HAL_UART_IRQHandler+0x1e8>
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	2240      	movs	r2, #64	; 0x40
 800179a:	4013      	ands	r3, r2
 800179c:	d006      	beq.n	80017ac <HAL_UART_IRQHandler+0x1e8>
  {
    UART_EndTransmit_IT(huart);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	0018      	movs	r0, r3
 80017a2:	f000 fb33 	bl	8001e0c <UART_EndTransmit_IT>
    return;
 80017a6:	46c0      	nop			; (mov r8, r8)
 80017a8:	e000      	b.n	80017ac <HAL_UART_IRQHandler+0x1e8>
    return;
 80017aa:	46c0      	nop			; (mov r8, r8)
  }

}
 80017ac:	46bd      	mov	sp, r7
 80017ae:	b006      	add	sp, #24
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	46c0      	nop			; (mov r8, r8)
 80017b4:	08001d31 	.word	0x08001d31

080017b8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80017c0:	46c0      	nop			; (mov r8, r8)
 80017c2:	46bd      	mov	sp, r7
 80017c4:	b002      	add	sp, #8
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <HAL_UART_ErrorCallback>:
  * @brief UART error callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80017d0:	46c0      	nop			; (mov r8, r8)
 80017d2:	46bd      	mov	sp, r7
 80017d4:	b002      	add	sp, #8
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80017d8:	b590      	push	{r4, r7, lr}
 80017da:	b087      	sub	sp, #28
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 80017e0:	2300      	movs	r3, #0
 80017e2:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80017e4:	2317      	movs	r3, #23
 80017e6:	18fb      	adds	r3, r7, r3
 80017e8:	2210      	movs	r2, #16
 80017ea:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp                    = 0x0000U;
 80017ec:	230a      	movs	r3, #10
 80017ee:	18fb      	adds	r3, r7, r3
 80017f0:	2200      	movs	r2, #0
 80017f2:	801a      	strh	r2, [r3, #0]
  uint16_t usartdiv                   = 0x0000U;
 80017f4:	2314      	movs	r3, #20
 80017f6:	18fb      	adds	r3, r7, r3
 80017f8:	2200      	movs	r2, #0
 80017fa:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 80017fc:	2313      	movs	r3, #19
 80017fe:	18fb      	adds	r3, r7, r3
 8001800:	2200      	movs	r2, #0
 8001802:	701a      	strb	r2, [r3, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	689a      	ldr	r2, [r3, #8]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	691b      	ldr	r3, [r3, #16]
 800180c:	431a      	orrs	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	695b      	ldr	r3, [r3, #20]
 8001812:	431a      	orrs	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	69db      	ldr	r3, [r3, #28]
 8001818:	4313      	orrs	r3, r2
 800181a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4aa0      	ldr	r2, [pc, #640]	; (8001aa4 <UART_SetConfig+0x2cc>)
 8001824:	4013      	ands	r3, r2
 8001826:	0019      	movs	r1, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	68fa      	ldr	r2, [r7, #12]
 800182e:	430a      	orrs	r2, r1
 8001830:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	4a9b      	ldr	r2, [pc, #620]	; (8001aa8 <UART_SetConfig+0x2d0>)
 800183a:	4013      	ands	r3, r2
 800183c:	0019      	movs	r1, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	68da      	ldr	r2, [r3, #12]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	430a      	orrs	r2, r1
 8001848:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	699a      	ldr	r2, [r3, #24]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6a1b      	ldr	r3, [r3, #32]
 8001852:	4313      	orrs	r3, r2
 8001854:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	4a93      	ldr	r2, [pc, #588]	; (8001aac <UART_SetConfig+0x2d4>)
 800185e:	4013      	ands	r3, r2
 8001860:	0019      	movs	r1, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	68fa      	ldr	r2, [r7, #12]
 8001868:	430a      	orrs	r2, r1
 800186a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a8f      	ldr	r2, [pc, #572]	; (8001ab0 <UART_SetConfig+0x2d8>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d125      	bne.n	80018c2 <UART_SetConfig+0xea>
 8001876:	4b8f      	ldr	r3, [pc, #572]	; (8001ab4 <UART_SetConfig+0x2dc>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	2203      	movs	r2, #3
 800187c:	4013      	ands	r3, r2
 800187e:	2b01      	cmp	r3, #1
 8001880:	d00f      	beq.n	80018a2 <UART_SetConfig+0xca>
 8001882:	d304      	bcc.n	800188e <UART_SetConfig+0xb6>
 8001884:	2b02      	cmp	r3, #2
 8001886:	d011      	beq.n	80018ac <UART_SetConfig+0xd4>
 8001888:	2b03      	cmp	r3, #3
 800188a:	d005      	beq.n	8001898 <UART_SetConfig+0xc0>
 800188c:	e013      	b.n	80018b6 <UART_SetConfig+0xde>
 800188e:	2317      	movs	r3, #23
 8001890:	18fb      	adds	r3, r7, r3
 8001892:	2200      	movs	r2, #0
 8001894:	701a      	strb	r2, [r3, #0]
 8001896:	e022      	b.n	80018de <UART_SetConfig+0x106>
 8001898:	2317      	movs	r3, #23
 800189a:	18fb      	adds	r3, r7, r3
 800189c:	2202      	movs	r2, #2
 800189e:	701a      	strb	r2, [r3, #0]
 80018a0:	e01d      	b.n	80018de <UART_SetConfig+0x106>
 80018a2:	2317      	movs	r3, #23
 80018a4:	18fb      	adds	r3, r7, r3
 80018a6:	2204      	movs	r2, #4
 80018a8:	701a      	strb	r2, [r3, #0]
 80018aa:	e018      	b.n	80018de <UART_SetConfig+0x106>
 80018ac:	2317      	movs	r3, #23
 80018ae:	18fb      	adds	r3, r7, r3
 80018b0:	2208      	movs	r2, #8
 80018b2:	701a      	strb	r2, [r3, #0]
 80018b4:	e013      	b.n	80018de <UART_SetConfig+0x106>
 80018b6:	2317      	movs	r3, #23
 80018b8:	18fb      	adds	r3, r7, r3
 80018ba:	2210      	movs	r2, #16
 80018bc:	701a      	strb	r2, [r3, #0]
 80018be:	46c0      	nop			; (mov r8, r8)
 80018c0:	e00d      	b.n	80018de <UART_SetConfig+0x106>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a7c      	ldr	r2, [pc, #496]	; (8001ab8 <UART_SetConfig+0x2e0>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d104      	bne.n	80018d6 <UART_SetConfig+0xfe>
 80018cc:	2317      	movs	r3, #23
 80018ce:	18fb      	adds	r3, r7, r3
 80018d0:	2200      	movs	r2, #0
 80018d2:	701a      	strb	r2, [r3, #0]
 80018d4:	e003      	b.n	80018de <UART_SetConfig+0x106>
 80018d6:	2317      	movs	r3, #23
 80018d8:	18fb      	adds	r3, r7, r3
 80018da:	2210      	movs	r2, #16
 80018dc:	701a      	strb	r2, [r3, #0]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	69da      	ldr	r2, [r3, #28]
 80018e2:	2380      	movs	r3, #128	; 0x80
 80018e4:	021b      	lsls	r3, r3, #8
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d000      	beq.n	80018ec <UART_SetConfig+0x114>
 80018ea:	e077      	b.n	80019dc <UART_SetConfig+0x204>
  {
    switch (clocksource)
 80018ec:	2317      	movs	r3, #23
 80018ee:	18fb      	adds	r3, r7, r3
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d01c      	beq.n	8001930 <UART_SetConfig+0x158>
 80018f6:	dc02      	bgt.n	80018fe <UART_SetConfig+0x126>
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d005      	beq.n	8001908 <UART_SetConfig+0x130>
 80018fc:	e04f      	b.n	800199e <UART_SetConfig+0x1c6>
 80018fe:	2b04      	cmp	r3, #4
 8001900:	d027      	beq.n	8001952 <UART_SetConfig+0x17a>
 8001902:	2b08      	cmp	r3, #8
 8001904:	d039      	beq.n	800197a <UART_SetConfig+0x1a2>
 8001906:	e04a      	b.n	800199e <UART_SetConfig+0x1c6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001908:	f7ff fbf2 	bl	80010f0 <HAL_RCC_GetPCLK1Freq>
 800190c:	0003      	movs	r3, r0
 800190e:	005a      	lsls	r2, r3, #1
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	085b      	lsrs	r3, r3, #1
 8001916:	18d2      	adds	r2, r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	0019      	movs	r1, r3
 800191e:	0010      	movs	r0, r2
 8001920:	f7fe fbfa 	bl	8000118 <__udivsi3>
 8001924:	0003      	movs	r3, r0
 8001926:	001a      	movs	r2, r3
 8001928:	2314      	movs	r3, #20
 800192a:	18fb      	adds	r3, r7, r3
 800192c:	801a      	strh	r2, [r3, #0]
        break;
 800192e:	e03b      	b.n	80019a8 <UART_SetConfig+0x1d0>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	085b      	lsrs	r3, r3, #1
 8001936:	4a61      	ldr	r2, [pc, #388]	; (8001abc <UART_SetConfig+0x2e4>)
 8001938:	189a      	adds	r2, r3, r2
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	0019      	movs	r1, r3
 8001940:	0010      	movs	r0, r2
 8001942:	f7fe fbe9 	bl	8000118 <__udivsi3>
 8001946:	0003      	movs	r3, r0
 8001948:	001a      	movs	r2, r3
 800194a:	2314      	movs	r3, #20
 800194c:	18fb      	adds	r3, r7, r3
 800194e:	801a      	strh	r2, [r3, #0]
        break;
 8001950:	e02a      	b.n	80019a8 <UART_SetConfig+0x1d0>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001952:	f7ff fb5f 	bl	8001014 <HAL_RCC_GetSysClockFreq>
 8001956:	0003      	movs	r3, r0
 8001958:	005a      	lsls	r2, r3, #1
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	085b      	lsrs	r3, r3, #1
 8001960:	18d2      	adds	r2, r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	0019      	movs	r1, r3
 8001968:	0010      	movs	r0, r2
 800196a:	f7fe fbd5 	bl	8000118 <__udivsi3>
 800196e:	0003      	movs	r3, r0
 8001970:	001a      	movs	r2, r3
 8001972:	2314      	movs	r3, #20
 8001974:	18fb      	adds	r3, r7, r3
 8001976:	801a      	strh	r2, [r3, #0]
        break;
 8001978:	e016      	b.n	80019a8 <UART_SetConfig+0x1d0>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	085b      	lsrs	r3, r3, #1
 8001980:	2280      	movs	r2, #128	; 0x80
 8001982:	0252      	lsls	r2, r2, #9
 8001984:	189a      	adds	r2, r3, r2
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	0019      	movs	r1, r3
 800198c:	0010      	movs	r0, r2
 800198e:	f7fe fbc3 	bl	8000118 <__udivsi3>
 8001992:	0003      	movs	r3, r0
 8001994:	001a      	movs	r2, r3
 8001996:	2314      	movs	r3, #20
 8001998:	18fb      	adds	r3, r7, r3
 800199a:	801a      	strh	r2, [r3, #0]
        break;
 800199c:	e004      	b.n	80019a8 <UART_SetConfig+0x1d0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800199e:	2313      	movs	r3, #19
 80019a0:	18fb      	adds	r3, r7, r3
 80019a2:	2201      	movs	r2, #1
 80019a4:	701a      	strb	r2, [r3, #0]
        break;
 80019a6:	46c0      	nop			; (mov r8, r8)
    }

    brrtemp = usartdiv & 0xFFF0U;
 80019a8:	200a      	movs	r0, #10
 80019aa:	183b      	adds	r3, r7, r0
 80019ac:	2414      	movs	r4, #20
 80019ae:	193a      	adds	r2, r7, r4
 80019b0:	8812      	ldrh	r2, [r2, #0]
 80019b2:	210f      	movs	r1, #15
 80019b4:	438a      	bics	r2, r1
 80019b6:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80019b8:	193b      	adds	r3, r7, r4
 80019ba:	881b      	ldrh	r3, [r3, #0]
 80019bc:	105b      	asrs	r3, r3, #1
 80019be:	b29b      	uxth	r3, r3
 80019c0:	2207      	movs	r2, #7
 80019c2:	4013      	ands	r3, r2
 80019c4:	b299      	uxth	r1, r3
 80019c6:	183b      	adds	r3, r7, r0
 80019c8:	183a      	adds	r2, r7, r0
 80019ca:	8812      	ldrh	r2, [r2, #0]
 80019cc:	430a      	orrs	r2, r1
 80019ce:	801a      	strh	r2, [r3, #0]
    huart->Instance->BRR = brrtemp;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	183a      	adds	r2, r7, r0
 80019d6:	8812      	ldrh	r2, [r2, #0]
 80019d8:	60da      	str	r2, [r3, #12]
 80019da:	e05b      	b.n	8001a94 <UART_SetConfig+0x2bc>
  }
  else
  {
    switch (clocksource)
 80019dc:	2317      	movs	r3, #23
 80019de:	18fb      	adds	r3, r7, r3
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d01b      	beq.n	8001a1e <UART_SetConfig+0x246>
 80019e6:	dc02      	bgt.n	80019ee <UART_SetConfig+0x216>
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d005      	beq.n	80019f8 <UART_SetConfig+0x220>
 80019ec:	e04d      	b.n	8001a8a <UART_SetConfig+0x2b2>
 80019ee:	2b04      	cmp	r3, #4
 80019f0:	d026      	beq.n	8001a40 <UART_SetConfig+0x268>
 80019f2:	2b08      	cmp	r3, #8
 80019f4:	d037      	beq.n	8001a66 <UART_SetConfig+0x28e>
 80019f6:	e048      	b.n	8001a8a <UART_SetConfig+0x2b2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80019f8:	f7ff fb7a 	bl	80010f0 <HAL_RCC_GetPCLK1Freq>
 80019fc:	0002      	movs	r2, r0
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	085b      	lsrs	r3, r3, #1
 8001a04:	18d2      	adds	r2, r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	0019      	movs	r1, r3
 8001a0c:	0010      	movs	r0, r2
 8001a0e:	f7fe fb83 	bl	8000118 <__udivsi3>
 8001a12:	0003      	movs	r3, r0
 8001a14:	b29a      	uxth	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	60da      	str	r2, [r3, #12]
        break;
 8001a1c:	e03a      	b.n	8001a94 <UART_SetConfig+0x2bc>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	085b      	lsrs	r3, r3, #1
 8001a24:	4a26      	ldr	r2, [pc, #152]	; (8001ac0 <UART_SetConfig+0x2e8>)
 8001a26:	189a      	adds	r2, r3, r2
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	0019      	movs	r1, r3
 8001a2e:	0010      	movs	r0, r2
 8001a30:	f7fe fb72 	bl	8000118 <__udivsi3>
 8001a34:	0003      	movs	r3, r0
 8001a36:	b29a      	uxth	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	60da      	str	r2, [r3, #12]
        break;
 8001a3e:	e029      	b.n	8001a94 <UART_SetConfig+0x2bc>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001a40:	f7ff fae8 	bl	8001014 <HAL_RCC_GetSysClockFreq>
 8001a44:	0002      	movs	r2, r0
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	085b      	lsrs	r3, r3, #1
 8001a4c:	18d2      	adds	r2, r2, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	0019      	movs	r1, r3
 8001a54:	0010      	movs	r0, r2
 8001a56:	f7fe fb5f 	bl	8000118 <__udivsi3>
 8001a5a:	0003      	movs	r3, r0
 8001a5c:	b29a      	uxth	r2, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	60da      	str	r2, [r3, #12]
        break;
 8001a64:	e016      	b.n	8001a94 <UART_SetConfig+0x2bc>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	085b      	lsrs	r3, r3, #1
 8001a6c:	2280      	movs	r2, #128	; 0x80
 8001a6e:	0212      	lsls	r2, r2, #8
 8001a70:	189a      	adds	r2, r3, r2
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	0019      	movs	r1, r3
 8001a78:	0010      	movs	r0, r2
 8001a7a:	f7fe fb4d 	bl	8000118 <__udivsi3>
 8001a7e:	0003      	movs	r3, r0
 8001a80:	b29a      	uxth	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	60da      	str	r2, [r3, #12]
        break;
 8001a88:	e004      	b.n	8001a94 <UART_SetConfig+0x2bc>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8001a8a:	2313      	movs	r3, #19
 8001a8c:	18fb      	adds	r3, r7, r3
 8001a8e:	2201      	movs	r2, #1
 8001a90:	701a      	strb	r2, [r3, #0]
        break;
 8001a92:	46c0      	nop			; (mov r8, r8)
    }
  }

  return ret;
 8001a94:	2313      	movs	r3, #19
 8001a96:	18fb      	adds	r3, r7, r3
 8001a98:	781b      	ldrb	r3, [r3, #0]

}
 8001a9a:	0018      	movs	r0, r3
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	b007      	add	sp, #28
 8001aa0:	bd90      	pop	{r4, r7, pc}
 8001aa2:	46c0      	nop			; (mov r8, r8)
 8001aa4:	ffff69f3 	.word	0xffff69f3
 8001aa8:	ffffcfff 	.word	0xffffcfff
 8001aac:	fffff4ff 	.word	0xfffff4ff
 8001ab0:	40013800 	.word	0x40013800
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	40004400 	.word	0x40004400
 8001abc:	00f42400 	.word	0x00f42400
 8001ac0:	007a1200 	.word	0x007a1200

08001ac4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	d00b      	beq.n	8001aee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	4a4a      	ldr	r2, [pc, #296]	; (8001c08 <UART_AdvFeatureConfig+0x144>)
 8001ade:	4013      	ands	r3, r2
 8001ae0:	0019      	movs	r1, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	430a      	orrs	r2, r1
 8001aec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af2:	2202      	movs	r2, #2
 8001af4:	4013      	ands	r3, r2
 8001af6:	d00b      	beq.n	8001b10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	4a43      	ldr	r2, [pc, #268]	; (8001c0c <UART_AdvFeatureConfig+0x148>)
 8001b00:	4013      	ands	r3, r2
 8001b02:	0019      	movs	r1, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b14:	2204      	movs	r2, #4
 8001b16:	4013      	ands	r3, r2
 8001b18:	d00b      	beq.n	8001b32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	4a3b      	ldr	r2, [pc, #236]	; (8001c10 <UART_AdvFeatureConfig+0x14c>)
 8001b22:	4013      	ands	r3, r2
 8001b24:	0019      	movs	r1, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b36:	2208      	movs	r2, #8
 8001b38:	4013      	ands	r3, r2
 8001b3a:	d00b      	beq.n	8001b54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	4a34      	ldr	r2, [pc, #208]	; (8001c14 <UART_AdvFeatureConfig+0x150>)
 8001b44:	4013      	ands	r3, r2
 8001b46:	0019      	movs	r1, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	430a      	orrs	r2, r1
 8001b52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b58:	2210      	movs	r2, #16
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	d00b      	beq.n	8001b76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	4a2c      	ldr	r2, [pc, #176]	; (8001c18 <UART_AdvFeatureConfig+0x154>)
 8001b66:	4013      	ands	r3, r2
 8001b68:	0019      	movs	r1, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	430a      	orrs	r2, r1
 8001b74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7a:	2220      	movs	r2, #32
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	d00b      	beq.n	8001b98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	4a25      	ldr	r2, [pc, #148]	; (8001c1c <UART_AdvFeatureConfig+0x158>)
 8001b88:	4013      	ands	r3, r2
 8001b8a:	0019      	movs	r1, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	430a      	orrs	r2, r1
 8001b96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9c:	2240      	movs	r2, #64	; 0x40
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	d01d      	beq.n	8001bde <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	4a1d      	ldr	r2, [pc, #116]	; (8001c20 <UART_AdvFeatureConfig+0x15c>)
 8001baa:	4013      	ands	r3, r2
 8001bac:	0019      	movs	r1, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bbe:	2380      	movs	r3, #128	; 0x80
 8001bc0:	035b      	lsls	r3, r3, #13
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d10b      	bne.n	8001bde <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	4a15      	ldr	r2, [pc, #84]	; (8001c24 <UART_AdvFeatureConfig+0x160>)
 8001bce:	4013      	ands	r3, r2
 8001bd0:	0019      	movs	r1, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be2:	2280      	movs	r2, #128	; 0x80
 8001be4:	4013      	ands	r3, r2
 8001be6:	d00b      	beq.n	8001c00 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	4a0e      	ldr	r2, [pc, #56]	; (8001c28 <UART_AdvFeatureConfig+0x164>)
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	0019      	movs	r1, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	605a      	str	r2, [r3, #4]
  }
}
 8001c00:	46c0      	nop			; (mov r8, r8)
 8001c02:	46bd      	mov	sp, r7
 8001c04:	b002      	add	sp, #8
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	fffdffff 	.word	0xfffdffff
 8001c0c:	fffeffff 	.word	0xfffeffff
 8001c10:	fffbffff 	.word	0xfffbffff
 8001c14:	ffff7fff 	.word	0xffff7fff
 8001c18:	ffffefff 	.word	0xffffefff
 8001c1c:	ffffdfff 	.word	0xffffdfff
 8001c20:	ffefffff 	.word	0xffefffff
 8001c24:	ff9fffff 	.word	0xff9fffff
 8001c28:	fff7ffff 	.word	0xfff7ffff

08001c2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2269      	movs	r2, #105	; 0x69
 8001c3e:	2120      	movs	r1, #32
 8001c40:	5499      	strb	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	226a      	movs	r2, #106	; 0x6a
 8001c46:	2120      	movs	r1, #32
 8001c48:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2268      	movs	r2, #104	; 0x68
 8001c4e:	2100      	movs	r1, #0
 8001c50:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001c52:	2300      	movs	r3, #0
}
 8001c54:	0018      	movs	r0, r3
 8001c56:	46bd      	mov	sp, r7
 8001c58:	b002      	add	sp, #8
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	603b      	str	r3, [r7, #0]
 8001c68:	1dfb      	adds	r3, r7, #7
 8001c6a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c6c:	e02b      	b.n	8001cc6 <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	3301      	adds	r3, #1
 8001c72:	d028      	beq.n	8001cc6 <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d007      	beq.n	8001c8a <UART_WaitOnFlagUntilTimeout+0x2e>
 8001c7a:	f7fe fb15 	bl	80002a8 <HAL_GetTick>
 8001c7e:	0002      	movs	r2, r0
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d21d      	bcs.n	8001cc6 <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4916      	ldr	r1, [pc, #88]	; (8001cf0 <UART_WaitOnFlagUntilTimeout+0x94>)
 8001c96:	400a      	ands	r2, r1
 8001c98:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	689a      	ldr	r2, [r3, #8]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	438a      	bics	r2, r1
 8001ca8:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2269      	movs	r2, #105	; 0x69
 8001cae:	2120      	movs	r1, #32
 8001cb0:	5499      	strb	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	226a      	movs	r2, #106	; 0x6a
 8001cb6:	2120      	movs	r1, #32
 8001cb8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2268      	movs	r2, #104	; 0x68
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e00f      	b.n	8001ce6 <UART_WaitOnFlagUntilTimeout+0x8a>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	69db      	ldr	r3, [r3, #28]
 8001ccc:	68ba      	ldr	r2, [r7, #8]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	68ba      	ldr	r2, [r7, #8]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	425a      	negs	r2, r3
 8001cd6:	4153      	adcs	r3, r2
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	001a      	movs	r2, r3
 8001cdc:	1dfb      	adds	r3, r7, #7
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d0c4      	beq.n	8001c6e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	0018      	movs	r0, r3
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	b004      	add	sp, #16
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	46c0      	nop			; (mov r8, r8)
 8001cf0:	fffffe5f 	.word	0xfffffe5f

08001cf4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4909      	ldr	r1, [pc, #36]	; (8001d2c <UART_EndRxTransfer+0x38>)
 8001d08:	400a      	ands	r2, r1
 8001d0a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	689a      	ldr	r2, [r3, #8]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2101      	movs	r1, #1
 8001d18:	438a      	bics	r2, r1
 8001d1a:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	226a      	movs	r2, #106	; 0x6a
 8001d20:	2120      	movs	r1, #32
 8001d22:	5499      	strb	r1, [r3, r2]
}
 8001d24:	46c0      	nop			; (mov r8, r8)
 8001d26:	46bd      	mov	sp, r7
 8001d28:	b002      	add	sp, #8
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	fffffedf 	.word	0xfffffedf

08001d30 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	225a      	movs	r2, #90	; 0x5a
 8001d42:	2100      	movs	r1, #0
 8001d44:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2252      	movs	r2, #82	; 0x52
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	5299      	strh	r1, [r3, r2]

  HAL_UART_ErrorCallback(huart);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	0018      	movs	r0, r3
 8001d52:	f7ff fd39 	bl	80017c8 <HAL_UART_ErrorCallback>
}
 8001d56:	46c0      	nop			; (mov r8, r8)
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	b004      	add	sp, #16
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <UART_Transmit_IT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b084      	sub	sp, #16
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2269      	movs	r2, #105	; 0x69
 8001d6a:	5c9b      	ldrb	r3, [r3, r2]
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	2b21      	cmp	r3, #33	; 0x21
 8001d70:	d147      	bne.n	8001e02 <UART_Transmit_IT+0xa4>
  {
    if(huart->TxXferCount == 0U)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2252      	movs	r2, #82	; 0x52
 8001d76:	5a9b      	ldrh	r3, [r3, r2]
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d111      	bne.n	8001da2 <UART_Transmit_IT+0x44>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2180      	movs	r1, #128	; 0x80
 8001d8a:	438a      	bics	r2, r1
 8001d8c:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2140      	movs	r1, #64	; 0x40
 8001d9a:	430a      	orrs	r2, r1
 8001d9c:	601a      	str	r2, [r3, #0]

      return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	e030      	b.n	8001e04 <UART_Transmit_IT+0xa6>
    }
    else
    {
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	689a      	ldr	r2, [r3, #8]
 8001da6:	2380      	movs	r3, #128	; 0x80
 8001da8:	015b      	lsls	r3, r3, #5
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d114      	bne.n	8001dd8 <UART_Transmit_IT+0x7a>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d110      	bne.n	8001dd8 <UART_Transmit_IT+0x7a>
      {
        tmp = (uint16_t*) huart->pTxBuffPtr;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dba:	60fb      	str	r3, [r7, #12]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	881a      	ldrh	r2, [r3, #0]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	05d2      	lsls	r2, r2, #23
 8001dc6:	0dd2      	lsrs	r2, r2, #23
 8001dc8:	b292      	uxth	r2, r2
 8001dca:	851a      	strh	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd0:	1c9a      	adds	r2, r3, #2
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	64da      	str	r2, [r3, #76]	; 0x4c
 8001dd6:	e009      	b.n	8001dec <UART_Transmit_IT+0x8e>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ddc:	1c59      	adds	r1, r3, #1
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	64d1      	str	r1, [r2, #76]	; 0x4c
 8001de2:	781a      	ldrb	r2, [r3, #0]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	b292      	uxth	r2, r2
 8001dea:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      huart->TxXferCount--;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2252      	movs	r2, #82	; 0x52
 8001df0:	5a9b      	ldrh	r3, [r3, r2]
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	3b01      	subs	r3, #1
 8001df6:	b299      	uxth	r1, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2252      	movs	r2, #82	; 0x52
 8001dfc:	5299      	strh	r1, [r3, r2]

      return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	e000      	b.n	8001e04 <UART_Transmit_IT+0xa6>
    }
  }
  else
  {
    return HAL_BUSY;
 8001e02:	2302      	movs	r3, #2
  }
}
 8001e04:	0018      	movs	r0, r3
 8001e06:	46bd      	mov	sp, r7
 8001e08:	b004      	add	sp, #16
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2140      	movs	r1, #64	; 0x40
 8001e20:	438a      	bics	r2, r1
 8001e22:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2269      	movs	r2, #105	; 0x69
 8001e28:	2120      	movs	r1, #32
 8001e2a:	5499      	strb	r1, [r3, r2]

  HAL_UART_TxCpltCallback(huart);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	0018      	movs	r0, r3
 8001e30:	f7ff fcc2 	bl	80017b8 <HAL_UART_TxCpltCallback>

  return HAL_OK;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	0018      	movs	r0, r3
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	b002      	add	sp, #8
 8001e3c:	bd80      	pop	{r7, pc}
	...

08001e40 <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001e40:	b590      	push	{r4, r7, lr}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
 8001e48:	230e      	movs	r3, #14
 8001e4a:	18fb      	adds	r3, r7, r3
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	215c      	movs	r1, #92	; 0x5c
 8001e50:	5a52      	ldrh	r2, [r2, r1]
 8001e52:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	226a      	movs	r2, #106	; 0x6a
 8001e58:	5c9b      	ldrb	r3, [r3, r2]
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	2b22      	cmp	r3, #34	; 0x22
 8001e5e:	d15b      	bne.n	8001f18 <UART_Receive_IT+0xd8>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	230c      	movs	r3, #12
 8001e66:	18fb      	adds	r3, r7, r3
 8001e68:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8001e6a:	801a      	strh	r2, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689a      	ldr	r2, [r3, #8]
 8001e70:	2380      	movs	r3, #128	; 0x80
 8001e72:	015b      	lsls	r3, r3, #5
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d116      	bne.n	8001ea6 <UART_Receive_IT+0x66>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d112      	bne.n	8001ea6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e84:	60bb      	str	r3, [r7, #8]
      *tmp = (uint16_t)(uhdata & uhMask);
 8001e86:	230c      	movs	r3, #12
 8001e88:	18fb      	adds	r3, r7, r3
 8001e8a:	220e      	movs	r2, #14
 8001e8c:	18ba      	adds	r2, r7, r2
 8001e8e:	881b      	ldrh	r3, [r3, #0]
 8001e90:	8812      	ldrh	r2, [r2, #0]
 8001e92:	4013      	ands	r3, r2
 8001e94:	b29a      	uxth	r2, r3
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr +=2U;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e9e:	1c9a      	adds	r2, r3, #2
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	655a      	str	r2, [r3, #84]	; 0x54
 8001ea4:	e010      	b.n	8001ec8 <UART_Receive_IT+0x88>
    }
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8001ea6:	230c      	movs	r3, #12
 8001ea8:	18fb      	adds	r3, r7, r3
 8001eaa:	881b      	ldrh	r3, [r3, #0]
 8001eac:	b2d9      	uxtb	r1, r3
 8001eae:	230e      	movs	r3, #14
 8001eb0:	18fb      	adds	r3, r7, r3
 8001eb2:	881b      	ldrh	r3, [r3, #0]
 8001eb4:	b2d8      	uxtb	r0, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eba:	1c5c      	adds	r4, r3, #1
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	6554      	str	r4, [r2, #84]	; 0x54
 8001ec0:	0002      	movs	r2, r0
 8001ec2:	400a      	ands	r2, r1
 8001ec4:	b2d2      	uxtb	r2, r2
 8001ec6:	701a      	strb	r2, [r3, #0]
    }

    if(--huart->RxXferCount == 0U)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	225a      	movs	r2, #90	; 0x5a
 8001ecc:	5a9b      	ldrh	r3, [r3, r2]
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	215a      	movs	r1, #90	; 0x5a
 8001ed8:	1c18      	adds	r0, r3, #0
 8001eda:	5250      	strh	r0, [r2, r1]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d119      	bne.n	8001f14 <UART_Receive_IT+0xd4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4912      	ldr	r1, [pc, #72]	; (8001f34 <UART_Receive_IT+0xf4>)
 8001eec:	400a      	ands	r2, r1
 8001eee:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	689a      	ldr	r2, [r3, #8]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2101      	movs	r1, #1
 8001efc:	438a      	bics	r2, r1
 8001efe:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	226a      	movs	r2, #106	; 0x6a
 8001f04:	2120      	movs	r1, #32
 8001f06:	5499      	strb	r1, [r3, r2]

      HAL_UART_RxCpltCallback(huart);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	0018      	movs	r0, r3
 8001f0c:	f000 f88a 	bl	8002024 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8001f10:	2300      	movs	r3, #0
 8001f12:	e00a      	b.n	8001f2a <UART_Receive_IT+0xea>
    }

    return HAL_OK;
 8001f14:	2300      	movs	r3, #0
 8001f16:	e008      	b.n	8001f2a <UART_Receive_IT+0xea>
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	699a      	ldr	r2, [r3, #24]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2108      	movs	r1, #8
 8001f24:	430a      	orrs	r2, r1
 8001f26:	619a      	str	r2, [r3, #24]

    return HAL_BUSY;
 8001f28:	2302      	movs	r3, #2
  }
}
 8001f2a:	0018      	movs	r0, r3
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	b005      	add	sp, #20
 8001f30:	bd90      	pop	{r4, r7, pc}
 8001f32:	46c0      	nop			; (mov r8, r8)
 8001f34:	fffffedf 	.word	0xfffffedf

08001f38 <myprintf>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Uart Functions
#include <stdarg.h>
char buffer[100];
void myprintf(const char *fmt, ...) {
 8001f38:	b40f      	push	{r0, r1, r2, r3}
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b082      	sub	sp, #8
 8001f3e:	af00      	add	r7, sp, #0
  va_list args;
  va_start(args, fmt);
 8001f40:	2314      	movs	r3, #20
 8001f42:	18fb      	adds	r3, r7, r3
 8001f44:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	693a      	ldr	r2, [r7, #16]
 8001f4a:	480c      	ldr	r0, [pc, #48]	; (8001f7c <myprintf+0x44>)
 8001f4c:	2164      	movs	r1, #100	; 0x64
 8001f4e:	f001 fcf7 	bl	8003940 <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 8001f52:	4b0a      	ldr	r3, [pc, #40]	; (8001f7c <myprintf+0x44>)
 8001f54:	0018      	movs	r0, r3
 8001f56:	f7fe f8d7 	bl	8000108 <strlen>
 8001f5a:	0003      	movs	r3, r0
 8001f5c:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, 1000);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	b29a      	uxth	r2, r3
 8001f62:	23fa      	movs	r3, #250	; 0xfa
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	4905      	ldr	r1, [pc, #20]	; (8001f7c <myprintf+0x44>)
 8001f68:	4805      	ldr	r0, [pc, #20]	; (8001f80 <myprintf+0x48>)
 8001f6a:	f7ff f9fd 	bl	8001368 <HAL_UART_Transmit>

}
 8001f6e:	46c0      	nop			; (mov r8, r8)
 8001f70:	46bd      	mov	sp, r7
 8001f72:	b002      	add	sp, #8
 8001f74:	bc80      	pop	{r7}
 8001f76:	bc08      	pop	{r3}
 8001f78:	b004      	add	sp, #16
 8001f7a:	4718      	bx	r3
 8001f7c:	20000170 	.word	0x20000170
 8001f80:	20000248 	.word	0x20000248

08001f84 <ReInitializeRX>:

RxStatus ReInitializeRX() {
 8001f84:	b590      	push	{r4, r7, lr}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef res = HAL_UART_Receive_IT(&huart1, &rx_buffer.new, 1);
 8001f8a:	1dfc      	adds	r4, r7, #7
 8001f8c:	4909      	ldr	r1, [pc, #36]	; (8001fb4 <ReInitializeRX+0x30>)
 8001f8e:	4b0a      	ldr	r3, [pc, #40]	; (8001fb8 <ReInitializeRX+0x34>)
 8001f90:	2201      	movs	r2, #1
 8001f92:	0018      	movs	r0, r3
 8001f94:	f7ff fa8c 	bl	80014b0 <HAL_UART_Receive_IT>
 8001f98:	0003      	movs	r3, r0
 8001f9a:	7023      	strb	r3, [r4, #0]
	if (res != HAL_OK) {
 8001f9c:	1dfb      	adds	r3, r7, #7
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <ReInitializeRX+0x24>
		//myprintf("Failed to Initialize RX Interrupt\r\n");
		return RX_REINITIALIZE;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	e000      	b.n	8001faa <ReInitializeRX+0x26>
	}
	return RX_READY;
 8001fa8:	2301      	movs	r3, #1
}
 8001faa:	0018      	movs	r0, r3
 8001fac:	46bd      	mov	sp, r7
 8001fae:	b003      	add	sp, #12
 8001fb0:	bd90      	pop	{r4, r7, pc}
 8001fb2:	46c0      	nop			; (mov r8, r8)
 8001fb4:	200000f7 	.word	0x200000f7
 8001fb8:	200000fc 	.word	0x200000fc

08001fbc <InitializeRX>:

RxStatus InitializeRX() {
 8001fbc:	b590      	push	{r4, r7, lr}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
	rx_buffer.count = 0;
 8001fc2:	4b15      	ldr	r3, [pc, #84]	; (8002018 <InitializeRX+0x5c>)
 8001fc4:	2242      	movs	r2, #66	; 0x42
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	5499      	strb	r1, [r3, r2]
	rx_buffer.head = 0;
 8001fca:	4b13      	ldr	r3, [pc, #76]	; (8002018 <InitializeRX+0x5c>)
 8001fcc:	2240      	movs	r2, #64	; 0x40
 8001fce:	2100      	movs	r1, #0
 8001fd0:	5499      	strb	r1, [r3, r2]
	rx_buffer.tail = 0;
 8001fd2:	4b11      	ldr	r3, [pc, #68]	; (8002018 <InitializeRX+0x5c>)
 8001fd4:	2241      	movs	r2, #65	; 0x41
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	5499      	strb	r1, [r3, r2]
	rx_buffer.new = 0;
 8001fda:	4b0f      	ldr	r3, [pc, #60]	; (8002018 <InitializeRX+0x5c>)
 8001fdc:	2243      	movs	r2, #67	; 0x43
 8001fde:	2100      	movs	r1, #0
 8001fe0:	5499      	strb	r1, [r3, r2]
	memset(rx_buffer.data, 0, RX_BUF_SIZE);
 8001fe2:	4b0d      	ldr	r3, [pc, #52]	; (8002018 <InitializeRX+0x5c>)
 8001fe4:	2240      	movs	r2, #64	; 0x40
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	0018      	movs	r0, r3
 8001fea:	f001 fc76 	bl	80038da <memset>

	HAL_StatusTypeDef res = HAL_UART_Receive_IT(&huart1, &rx_buffer.new, 1);
 8001fee:	1dfc      	adds	r4, r7, #7
 8001ff0:	490a      	ldr	r1, [pc, #40]	; (800201c <InitializeRX+0x60>)
 8001ff2:	4b0b      	ldr	r3, [pc, #44]	; (8002020 <InitializeRX+0x64>)
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	0018      	movs	r0, r3
 8001ff8:	f7ff fa5a 	bl	80014b0 <HAL_UART_Receive_IT>
 8001ffc:	0003      	movs	r3, r0
 8001ffe:	7023      	strb	r3, [r4, #0]
	if (res != HAL_OK) {
 8002000:	1dfb      	adds	r3, r7, #7
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <InitializeRX+0x50>
		return RX_REINITIALIZE;
 8002008:	2300      	movs	r3, #0
 800200a:	e000      	b.n	800200e <InitializeRX+0x52>
	}
	return RX_READY;
 800200c:	2301      	movs	r3, #1
}
 800200e:	0018      	movs	r0, r3
 8002010:	46bd      	mov	sp, r7
 8002012:	b003      	add	sp, #12
 8002014:	bd90      	pop	{r4, r7, pc}
 8002016:	46c0      	nop			; (mov r8, r8)
 8002018:	200000b4 	.word	0x200000b4
 800201c:	200000f7 	.word	0x200000f7
 8002020:	200000fc 	.word	0x200000fc

08002024 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, &rx_buffer.new, 1);
 800202c:	4917      	ldr	r1, [pc, #92]	; (800208c <HAL_UART_RxCpltCallback+0x68>)
 800202e:	4b18      	ldr	r3, [pc, #96]	; (8002090 <HAL_UART_RxCpltCallback+0x6c>)
 8002030:	2201      	movs	r2, #1
 8002032:	0018      	movs	r0, r3
 8002034:	f7ff fa3c 	bl	80014b0 <HAL_UART_Receive_IT>

	rx_buffer.data[rx_buffer.tail++] = rx_buffer.new;
 8002038:	4b16      	ldr	r3, [pc, #88]	; (8002094 <HAL_UART_RxCpltCallback+0x70>)
 800203a:	2241      	movs	r2, #65	; 0x41
 800203c:	5c9b      	ldrb	r3, [r3, r2]
 800203e:	1c5a      	adds	r2, r3, #1
 8002040:	b2d0      	uxtb	r0, r2
 8002042:	4a14      	ldr	r2, [pc, #80]	; (8002094 <HAL_UART_RxCpltCallback+0x70>)
 8002044:	2141      	movs	r1, #65	; 0x41
 8002046:	5450      	strb	r0, [r2, r1]
 8002048:	0019      	movs	r1, r3
 800204a:	4b12      	ldr	r3, [pc, #72]	; (8002094 <HAL_UART_RxCpltCallback+0x70>)
 800204c:	2243      	movs	r2, #67	; 0x43
 800204e:	5c9a      	ldrb	r2, [r3, r2]
 8002050:	4b10      	ldr	r3, [pc, #64]	; (8002094 <HAL_UART_RxCpltCallback+0x70>)
 8002052:	545a      	strb	r2, [r3, r1]
	if (rx_buffer.tail == RX_BUF_SIZE) rx_buffer.tail = 0;
 8002054:	4b0f      	ldr	r3, [pc, #60]	; (8002094 <HAL_UART_RxCpltCallback+0x70>)
 8002056:	2241      	movs	r2, #65	; 0x41
 8002058:	5c9b      	ldrb	r3, [r3, r2]
 800205a:	2b40      	cmp	r3, #64	; 0x40
 800205c:	d103      	bne.n	8002066 <HAL_UART_RxCpltCallback+0x42>
 800205e:	4b0d      	ldr	r3, [pc, #52]	; (8002094 <HAL_UART_RxCpltCallback+0x70>)
 8002060:	2241      	movs	r2, #65	; 0x41
 8002062:	2100      	movs	r1, #0
 8002064:	5499      	strb	r1, [r3, r2]

	rx_buffer.count++;
 8002066:	4b0b      	ldr	r3, [pc, #44]	; (8002094 <HAL_UART_RxCpltCallback+0x70>)
 8002068:	2242      	movs	r2, #66	; 0x42
 800206a:	5c9b      	ldrb	r3, [r3, r2]
 800206c:	3301      	adds	r3, #1
 800206e:	b2d9      	uxtb	r1, r3
 8002070:	4b08      	ldr	r3, [pc, #32]	; (8002094 <HAL_UART_RxCpltCallback+0x70>)
 8002072:	2242      	movs	r2, #66	; 0x42
 8002074:	5499      	strb	r1, [r3, r2]

	rx_buffer.status = ReInitializeRX();
 8002076:	f7ff ff85 	bl	8001f84 <ReInitializeRX>
 800207a:	0003      	movs	r3, r0
 800207c:	0019      	movs	r1, r3
 800207e:	4b05      	ldr	r3, [pc, #20]	; (8002094 <HAL_UART_RxCpltCallback+0x70>)
 8002080:	2244      	movs	r2, #68	; 0x44
 8002082:	5499      	strb	r1, [r3, r2]
}
 8002084:	46c0      	nop			; (mov r8, r8)
 8002086:	46bd      	mov	sp, r7
 8002088:	b002      	add	sp, #8
 800208a:	bd80      	pop	{r7, pc}
 800208c:	200000f7 	.word	0x200000f7
 8002090:	200000fc 	.word	0x200000fc
 8002094:	200000b4 	.word	0x200000b4

08002098 <ResetDisplay>:

void ResetDisplay() {
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DISP_RST_GPIO_Port, DISP_RST_Pin, GPIO_PIN_RESET);
 800209c:	2380      	movs	r3, #128	; 0x80
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	480b      	ldr	r0, [pc, #44]	; (80020d0 <ResetDisplay+0x38>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	0019      	movs	r1, r3
 80020a6:	f7fe fbbb 	bl	8000820 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80020aa:	23fa      	movs	r3, #250	; 0xfa
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	0018      	movs	r0, r3
 80020b0:	f7fe f904 	bl	80002bc <HAL_Delay>
	HAL_GPIO_WritePin(DISP_RST_GPIO_Port, DISP_RST_Pin, GPIO_PIN_SET);
 80020b4:	2380      	movs	r3, #128	; 0x80
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	4805      	ldr	r0, [pc, #20]	; (80020d0 <ResetDisplay+0x38>)
 80020ba:	2201      	movs	r2, #1
 80020bc:	0019      	movs	r1, r3
 80020be:	f7fe fbaf 	bl	8000820 <HAL_GPIO_WritePin>
	HAL_Delay(3000);
 80020c2:	4b04      	ldr	r3, [pc, #16]	; (80020d4 <ResetDisplay+0x3c>)
 80020c4:	0018      	movs	r0, r3
 80020c6:	f7fe f8f9 	bl	80002bc <HAL_Delay>
}
 80020ca:	46c0      	nop			; (mov r8, r8)
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	48000800 	.word	0x48000800
 80020d4:	00000bb8 	.word	0x00000bb8

080020d8 <millis>:
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
		HAL_Delay(interval);
	}
}

unsigned long millis(void) {
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80020dc:	f7fe f8e4 	bl	80002a8 <HAL_GetTick>
 80020e0:	0003      	movs	r3, r0
}
 80020e2:	0018      	movs	r0, r3
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <genieGetByteCount>:

uint16_t genieGetByteCount() {
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
	//myprintf("Genie Bytes Available : %i\r\n",rx_buffer.count);
	return rx_buffer.count;
 80020ec:	4b03      	ldr	r3, [pc, #12]	; (80020fc <genieGetByteCount+0x14>)
 80020ee:	2242      	movs	r2, #66	; 0x42
 80020f0:	5c9b      	ldrb	r3, [r3, r2]
 80020f2:	b29b      	uxth	r3, r3
}
 80020f4:	0018      	movs	r0, r3
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	46c0      	nop			; (mov r8, r8)
 80020fc:	200000b4 	.word	0x200000b4

08002100 <geniePutByte>:


void geniePutByte(uint8_t c) {
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	0002      	movs	r2, r0
 8002108:	1dfb      	adds	r3, r7, #7
 800210a:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, &c, 1, 10000);
 800210c:	4b0a      	ldr	r3, [pc, #40]	; (8002138 <geniePutByte+0x38>)
 800210e:	1df9      	adds	r1, r7, #7
 8002110:	480a      	ldr	r0, [pc, #40]	; (800213c <geniePutByte+0x3c>)
 8002112:	2201      	movs	r2, #1
 8002114:	f7ff f928 	bl	8001368 <HAL_UART_Transmit>
	if (rx_buffer.status == RX_REINITIALIZE) {
 8002118:	4b09      	ldr	r3, [pc, #36]	; (8002140 <geniePutByte+0x40>)
 800211a:	2244      	movs	r2, #68	; 0x44
 800211c:	5c9b      	ldrb	r3, [r3, r2]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d106      	bne.n	8002130 <geniePutByte+0x30>
		rx_buffer.status = ReInitializeRX();
 8002122:	f7ff ff2f 	bl	8001f84 <ReInitializeRX>
 8002126:	0003      	movs	r3, r0
 8002128:	0019      	movs	r1, r3
 800212a:	4b05      	ldr	r3, [pc, #20]	; (8002140 <geniePutByte+0x40>)
 800212c:	2244      	movs	r2, #68	; 0x44
 800212e:	5499      	strb	r1, [r3, r2]
	}
}
 8002130:	46c0      	nop			; (mov r8, r8)
 8002132:	46bd      	mov	sp, r7
 8002134:	b002      	add	sp, #8
 8002136:	bd80      	pop	{r7, pc}
 8002138:	00002710 	.word	0x00002710
 800213c:	200000fc 	.word	0x200000fc
 8002140:	200000b4 	.word	0x200000b4

08002144 <genieGetByte>:

uint8_t genieGetByte() {
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
	if (rx_buffer.count == 0) return -1;
 800214a:	4b15      	ldr	r3, [pc, #84]	; (80021a0 <genieGetByte+0x5c>)
 800214c:	2242      	movs	r2, #66	; 0x42
 800214e:	5c9b      	ldrb	r3, [r3, r2]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d101      	bne.n	8002158 <genieGetByte+0x14>
 8002154:	23ff      	movs	r3, #255	; 0xff
 8002156:	e01f      	b.n	8002198 <genieGetByte+0x54>
	uint8_t val = rx_buffer.data[rx_buffer.head++];
 8002158:	4b11      	ldr	r3, [pc, #68]	; (80021a0 <genieGetByte+0x5c>)
 800215a:	2240      	movs	r2, #64	; 0x40
 800215c:	5c9b      	ldrb	r3, [r3, r2]
 800215e:	1c5a      	adds	r2, r3, #1
 8002160:	b2d0      	uxtb	r0, r2
 8002162:	4a0f      	ldr	r2, [pc, #60]	; (80021a0 <genieGetByte+0x5c>)
 8002164:	2140      	movs	r1, #64	; 0x40
 8002166:	5450      	strb	r0, [r2, r1]
 8002168:	0019      	movs	r1, r3
 800216a:	1dfb      	adds	r3, r7, #7
 800216c:	4a0c      	ldr	r2, [pc, #48]	; (80021a0 <genieGetByte+0x5c>)
 800216e:	5c52      	ldrb	r2, [r2, r1]
 8002170:	701a      	strb	r2, [r3, #0]
	if (rx_buffer.head == RX_BUF_SIZE) rx_buffer.head = 0;
 8002172:	4b0b      	ldr	r3, [pc, #44]	; (80021a0 <genieGetByte+0x5c>)
 8002174:	2240      	movs	r2, #64	; 0x40
 8002176:	5c9b      	ldrb	r3, [r3, r2]
 8002178:	2b40      	cmp	r3, #64	; 0x40
 800217a:	d103      	bne.n	8002184 <genieGetByte+0x40>
 800217c:	4b08      	ldr	r3, [pc, #32]	; (80021a0 <genieGetByte+0x5c>)
 800217e:	2240      	movs	r2, #64	; 0x40
 8002180:	2100      	movs	r1, #0
 8002182:	5499      	strb	r1, [r3, r2]
	rx_buffer.count--;
 8002184:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <genieGetByte+0x5c>)
 8002186:	2242      	movs	r2, #66	; 0x42
 8002188:	5c9b      	ldrb	r3, [r3, r2]
 800218a:	3b01      	subs	r3, #1
 800218c:	b2d9      	uxtb	r1, r3
 800218e:	4b04      	ldr	r3, [pc, #16]	; (80021a0 <genieGetByte+0x5c>)
 8002190:	2242      	movs	r2, #66	; 0x42
 8002192:	5499      	strb	r1, [r3, r2]
	return val;
 8002194:	1dfb      	adds	r3, r7, #7
 8002196:	781b      	ldrb	r3, [r3, #0]
}
 8002198:	0018      	movs	r0, r3
 800219a:	46bd      	mov	sp, r7
 800219c:	b002      	add	sp, #8
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	200000b4 	.word	0x200000b4

080021a4 <geniePeekByte>:

uint8_t geniePeekByte() {
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
	return rx_buffer.data[rx_buffer.head];
 80021a8:	4b04      	ldr	r3, [pc, #16]	; (80021bc <geniePeekByte+0x18>)
 80021aa:	2240      	movs	r2, #64	; 0x40
 80021ac:	5c9b      	ldrb	r3, [r3, r2]
 80021ae:	001a      	movs	r2, r3
 80021b0:	4b02      	ldr	r3, [pc, #8]	; (80021bc <geniePeekByte+0x18>)
 80021b2:	5c9b      	ldrb	r3, [r3, r2]
}
 80021b4:	0018      	movs	r0, r3
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	46c0      	nop			; (mov r8, r8)
 80021bc:	200000b4 	.word	0x200000b4

080021c0 <myGenieEventHandler>:
	myprintf("%s\r\n", str);
}



void myGenieEventHandler(void) {
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
	genieFrame Event;
	genieDequeueEvent(&Event);
 80021c6:	003b      	movs	r3, r7
 80021c8:	0018      	movs	r0, r3
 80021ca:	f000 fdf9 	bl	8002dc0 <genieDequeueEvent>

	//If the cmd received is from a Reported Event (Events triggered from the Events tab of Workshop4 objects)
	static int slider_val = 0;

	/* If the commamd received is from a Reported Event, it will be processed here. */
	if (Event.reportObject.cmd == GENIE_REPORT_EVENT) {
 80021ce:	003b      	movs	r3, r7
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	2b07      	cmp	r3, #7
 80021d4:	d118      	bne.n	8002208 <myGenieEventHandler+0x48>
	    if (Event.reportObject.object == GENIE_OBJ_SLIDER) { // If the Reported Message was from a Slider
 80021d6:	003b      	movs	r3, r7
 80021d8:	785b      	ldrb	r3, [r3, #1]
 80021da:	2b04      	cmp	r3, #4
 80021dc:	d159      	bne.n	8002292 <myGenieEventHandler+0xd2>
	        if (Event.reportObject.index == 0) { // If Slider0 (Index = 0)
 80021de:	003b      	movs	r3, r7
 80021e0:	789b      	ldrb	r3, [r3, #2]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d155      	bne.n	8002292 <myGenieEventHandler+0xd2>
	            slider_val = genieGetEventData( & Event); // Receive the event data from the Slider0
 80021e6:	003b      	movs	r3, r7
 80021e8:	0018      	movs	r0, r3
 80021ea:	f000 fdd7 	bl	8002d9c <genieGetEventData>
 80021ee:	0003      	movs	r3, r0
 80021f0:	001a      	movs	r2, r3
 80021f2:	4b2a      	ldr	r3, [pc, #168]	; (800229c <myGenieEventHandler+0xdc>)
 80021f4:	601a      	str	r2, [r3, #0]
	            genieWriteObject(GENIE_OBJ_LED_DIGITS, 0, slider_val); // Write Slider0 value to to LED Digits 0
 80021f6:	4b29      	ldr	r3, [pc, #164]	; (800229c <myGenieEventHandler+0xdc>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	001a      	movs	r2, r3
 80021fe:	2100      	movs	r1, #0
 8002200:	200f      	movs	r0, #15
 8002202:	f000 fc17 	bl	8002a34 <genieWriteObject>
	    } else if (Event.reportObject.object == GENIE_NAK) {
	        /* If a user issues a genie.Ping(interval) request and it fails,
	        this function will happen every 'interval' times chosen by the user. */
	    }
	}
}
 8002206:	e044      	b.n	8002292 <myGenieEventHandler+0xd2>
	else if (Event.reportObject.cmd == GENIE_REPORT_OBJ) {
 8002208:	003b      	movs	r3, r7
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	2b05      	cmp	r3, #5
 800220e:	d11f      	bne.n	8002250 <myGenieEventHandler+0x90>
	    if (Event.reportObject.object == GENIE_OBJ_USER_LED) { // If the Reported Message was from a User LED
 8002210:	003b      	movs	r3, r7
 8002212:	785b      	ldrb	r3, [r3, #1]
 8002214:	2b13      	cmp	r3, #19
 8002216:	d13c      	bne.n	8002292 <myGenieEventHandler+0xd2>
	        if (Event.reportObject.index == 0) { // If UserLed0 (Index = 0)
 8002218:	003b      	movs	r3, r7
 800221a:	789b      	ldrb	r3, [r3, #2]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d138      	bne.n	8002292 <myGenieEventHandler+0xd2>
	            bool UserLed0_val = genieGetEventData( & Event); // Receive the event data from the UserLed0
 8002220:	003b      	movs	r3, r7
 8002222:	0018      	movs	r0, r3
 8002224:	f000 fdba 	bl	8002d9c <genieGetEventData>
 8002228:	0003      	movs	r3, r0
 800222a:	001a      	movs	r2, r3
 800222c:	1dfb      	adds	r3, r7, #7
 800222e:	701a      	strb	r2, [r3, #0]
	            UserLed0_val = !UserLed0_val; // Toggle the state of the User LED Variable
 8002230:	1dfb      	adds	r3, r7, #7
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	425a      	negs	r2, r3
 8002236:	4153      	adcs	r3, r2
 8002238:	b2da      	uxtb	r2, r3
 800223a:	1dfb      	adds	r3, r7, #7
 800223c:	701a      	strb	r2, [r3, #0]
	            genieWriteObject(GENIE_OBJ_USER_LED, 0, UserLed0_val); // Write UserLed0_val value back to to UserLed0
 800223e:	1dfb      	adds	r3, r7, #7
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	b29b      	uxth	r3, r3
 8002244:	001a      	movs	r2, r3
 8002246:	2100      	movs	r1, #0
 8002248:	2013      	movs	r0, #19
 800224a:	f000 fbf3 	bl	8002a34 <genieWriteObject>
}
 800224e:	e020      	b.n	8002292 <myGenieEventHandler+0xd2>
	else if (Event.reportObject.cmd == GENIE_PING) {
 8002250:	003b      	movs	r3, r7
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	2b80      	cmp	r3, #128	; 0x80
 8002256:	d11c      	bne.n	8002292 <myGenieEventHandler+0xd2>
	    if (Event.reportObject.object == GENIE_DISCONNECTED) {
 8002258:	003b      	movs	r3, r7
 800225a:	785b      	ldrb	r3, [r3, #1]
 800225c:	2b82      	cmp	r3, #130	; 0x82
 800225e:	d018      	beq.n	8002292 <myGenieEventHandler+0xd2>
	    } else if (Event.reportObject.object == GENIE_READY) {
 8002260:	003b      	movs	r3, r7
 8002262:	785b      	ldrb	r3, [r3, #1]
 8002264:	2b81      	cmp	r3, #129	; 0x81
 8002266:	d114      	bne.n	8002292 <myGenieEventHandler+0xd2>
	    	genieWriteObject(GENIE_OBJ_LED_DIGITS, 0, slider_val); // Restore Leddigits0
 8002268:	4b0c      	ldr	r3, [pc, #48]	; (800229c <myGenieEventHandler+0xdc>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	b29b      	uxth	r3, r3
 800226e:	001a      	movs	r2, r3
 8002270:	2100      	movs	r1, #0
 8002272:	200f      	movs	r0, #15
 8002274:	f000 fbde 	bl	8002a34 <genieWriteObject>
	        genieWriteObject(GENIE_OBJ_SLIDER, 0, slider_val); // Restore Slider0
 8002278:	4b08      	ldr	r3, [pc, #32]	; (800229c <myGenieEventHandler+0xdc>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	b29b      	uxth	r3, r3
 800227e:	001a      	movs	r2, r3
 8002280:	2100      	movs	r1, #0
 8002282:	2004      	movs	r0, #4
 8002284:	f000 fbd6 	bl	8002a34 <genieWriteObject>
	        recover_times++;
 8002288:	4b05      	ldr	r3, [pc, #20]	; (80022a0 <myGenieEventHandler+0xe0>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	1c5a      	adds	r2, r3, #1
 800228e:	4b04      	ldr	r3, [pc, #16]	; (80022a0 <myGenieEventHandler+0xe0>)
 8002290:	601a      	str	r2, [r3, #0]
}
 8002292:	46c0      	nop			; (mov r8, r8)
 8002294:	46bd      	mov	sp, r7
 8002296:	b002      	add	sp, #8
 8002298:	bd80      	pop	{r7, pc}
 800229a:	46c0      	nop			; (mov r8, r8)
 800229c:	20000088 	.word	0x20000088
 80022a0:	20000000 	.word	0x20000000

080022a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022aa:	f7fd ffc1 	bl	8000230 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022ae:	f000 f881 	bl	80023b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022b2:	f000 f941 	bl	8002538 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80022b6:	f000 f8df 	bl	8002478 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80022ba:	f000 f90d 	bl	80024d8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  ResetDisplay();
 80022be:	f7ff feeb 	bl	8002098 <ResetDisplay>
  InitializeRX();
 80022c2:	f7ff fe7b 	bl	8001fbc <InitializeRX>
  genieBegin();
 80022c6:	f000 fae5 	bl	8002894 <genieBegin>
  genieAttachEventHandler(myGenieEventHandler);
 80022ca:	4b36      	ldr	r3, [pc, #216]	; (80023a4 <main+0x100>)
 80022cc:	0018      	movs	r0, r3
 80022ce:	f001 f8d1 	bl	8003474 <genieAttachEventHandler>
  genieAttachDebugger(myprintf);
 80022d2:	4b35      	ldr	r3, [pc, #212]	; (80023a8 <main+0x104>)
 80022d4:	0018      	movs	r0, r3
 80022d6:	f001 f8bf 	bl	8003458 <genieAttachDebugger>
  unsigned long lastUpdate = 0;
 80022da:	2300      	movs	r3, #0
 80022dc:	60fb      	str	r3, [r7, #12]

  int coolgaugeVal;
  bool gaugeRotation = CW;
 80022de:	1dfb      	adds	r3, r7, #7
 80022e0:	2200      	movs	r2, #0
 80022e2:	701a      	strb	r2, [r3, #0]

  if (genieOnline()) {
 80022e4:	f001 f914 	bl	8003510 <genieOnline>
 80022e8:	1e03      	subs	r3, r0, #0
 80022ea:	d003      	beq.n	80022f4 <main+0x50>
      /* Set the brightness/Contrast of the Display - (Not needed but illustrates how)
      Most Displays, 1 = Display ON, 0 = Display OFF. See below for exceptions and for DIABLO16 displays.
      For uLCD-43, uLCD-220RD, uLCD-70DT, and uLCD-35DT, use 0-15 for Brightness Control, where 0 = Display OFF, though to 15 = Max Brightness ON. */
      genieWriteContrast(15);
 80022ec:	200f      	movs	r0, #15
 80022ee:	f000 fc4d 	bl	8002b8c <genieWriteContrast>
 80022f2:	e001      	b.n	80022f8 <main+0x54>
  } else

  /* returns the current form the lcd is on */
  if (genieCurrentForm() == 0) {
 80022f4:	f001 f916 	bl	8003524 <genieCurrentForm>
      // if lcd is on form 0, do something.
  }

  genieWriteStr(0, GENIE_VERSION);
 80022f8:	4b2c      	ldr	r3, [pc, #176]	; (80023ac <main+0x108>)
 80022fa:	0019      	movs	r1, r3
 80022fc:	2000      	movs	r0, #0
 80022fe:	f000 fcb5 	bl	8002c6c <genieWriteStr>
  lastUpdate = millis() - UPDATE_INTERVAL;
 8002302:	f7ff fee9 	bl	80020d8 <millis>
 8002306:	0003      	movs	r3, r0
 8002308:	3b0a      	subs	r3, #10
 800230a:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  genieDoEvents();
 800230c:	f000 fd90 	bl	8002e30 <genieDoEvents>
	  if (millis() - lastUpdate >= UPDATE_INTERVAL) {
 8002310:	f7ff fee2 	bl	80020d8 <millis>
 8002314:	0002      	movs	r2, r0
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b09      	cmp	r3, #9
 800231c:	d9f6      	bls.n	800230c <main+0x68>
		  lastUpdate = millis();
 800231e:	f7ff fedb 	bl	80020d8 <millis>
 8002322:	0003      	movs	r3, r0
 8002324:	60fb      	str	r3, [r7, #12]
		  state = !(state);
 8002326:	1dbb      	adds	r3, r7, #6
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	425a      	negs	r2, r3
 800232c:	4153      	adcs	r3, r2
 800232e:	b2da      	uxtb	r2, r3
 8002330:	1dbb      	adds	r3, r7, #6
 8002332:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, state);
 8002334:	1dbb      	adds	r3, r7, #6
 8002336:	781a      	ldrb	r2, [r3, #0]
 8002338:	2380      	movs	r3, #128	; 0x80
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	481c      	ldr	r0, [pc, #112]	; (80023b0 <main+0x10c>)
 800233e:	0019      	movs	r1, r3
 8002340:	f7fe fa6e 	bl	8000820 <HAL_GPIO_WritePin>
		  if (genieOnline()) { // check if the display is online (connected) and if on Form0
 8002344:	f001 f8e4 	bl	8003510 <genieOnline>
 8002348:	1e03      	subs	r3, r0, #0
 800234a:	d0df      	beq.n	800230c <main+0x68>
		      if (gaugeRotation == CW) {
 800234c:	1dfb      	adds	r3, r7, #7
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d10b      	bne.n	800236c <main+0xc8>
		          coolgaugeVal++;
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	3301      	adds	r3, #1
 8002358:	60bb      	str	r3, [r7, #8]
		          if (coolgaugeVal > 100) {
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	2b64      	cmp	r3, #100	; 0x64
 800235e:	dd14      	ble.n	800238a <main+0xe6>
		              coolgaugeVal = 100;
 8002360:	2364      	movs	r3, #100	; 0x64
 8002362:	60bb      	str	r3, [r7, #8]
		              gaugeRotation = CCW;
 8002364:	1dfb      	adds	r3, r7, #7
 8002366:	2201      	movs	r2, #1
 8002368:	701a      	strb	r2, [r3, #0]
 800236a:	e00e      	b.n	800238a <main+0xe6>
		          }
		      } else if (gaugeRotation == CCW) {
 800236c:	1dfb      	adds	r3, r7, #7
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	2b01      	cmp	r3, #1
 8002372:	d10a      	bne.n	800238a <main+0xe6>
		          coolgaugeVal--;
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	3b01      	subs	r3, #1
 8002378:	60bb      	str	r3, [r7, #8]
		          if (coolgaugeVal < 0) {
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	2b00      	cmp	r3, #0
 800237e:	da04      	bge.n	800238a <main+0xe6>
		              coolgaugeVal = 0;
 8002380:	2300      	movs	r3, #0
 8002382:	60bb      	str	r3, [r7, #8]
		              gaugeRotation = CW;
 8002384:	1dfb      	adds	r3, r7, #7
 8002386:	2200      	movs	r2, #0
 8002388:	701a      	strb	r2, [r3, #0]
		          }
		      }
			genieWriteObject(GENIE_OBJ_COOL_GAUGE, 0, coolgaugeVal);
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	b29b      	uxth	r3, r3
 800238e:	001a      	movs	r2, r3
 8002390:	2100      	movs	r1, #0
 8002392:	2008      	movs	r0, #8
 8002394:	f000 fb4e 	bl	8002a34 <genieWriteObject>

			// The results of this call will be available to myGenieEventHandler() after the display has responded
			genieReadObject(GENIE_OBJ_USER_LED, 0); // Do a manual read from the UserLEd0 object
 8002398:	2100      	movs	r1, #0
 800239a:	2013      	movs	r0, #19
 800239c:	f000 fb0a 	bl	80029b4 <genieReadObject>
	  genieDoEvents();
 80023a0:	e7b4      	b.n	800230c <main+0x68>
 80023a2:	46c0      	nop			; (mov r8, r8)
 80023a4:	080021c1 	.word	0x080021c1
 80023a8:	08001f39 	.word	0x08001f39
 80023ac:	08004154 	.word	0x08004154
 80023b0:	48000800 	.word	0x48000800

080023b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023b4:	b590      	push	{r4, r7, lr}
 80023b6:	b095      	sub	sp, #84	; 0x54
 80023b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023ba:	2420      	movs	r4, #32
 80023bc:	193b      	adds	r3, r7, r4
 80023be:	0018      	movs	r0, r3
 80023c0:	2330      	movs	r3, #48	; 0x30
 80023c2:	001a      	movs	r2, r3
 80023c4:	2100      	movs	r1, #0
 80023c6:	f001 fa88 	bl	80038da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023ca:	2310      	movs	r3, #16
 80023cc:	18fb      	adds	r3, r7, r3
 80023ce:	0018      	movs	r0, r3
 80023d0:	2310      	movs	r3, #16
 80023d2:	001a      	movs	r2, r3
 80023d4:	2100      	movs	r1, #0
 80023d6:	f001 fa80 	bl	80038da <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023da:	003b      	movs	r3, r7
 80023dc:	0018      	movs	r0, r3
 80023de:	2310      	movs	r3, #16
 80023e0:	001a      	movs	r2, r3
 80023e2:	2100      	movs	r1, #0
 80023e4:	f001 fa79 	bl	80038da <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80023e8:	0021      	movs	r1, r4
 80023ea:	187b      	adds	r3, r7, r1
 80023ec:	2202      	movs	r2, #2
 80023ee:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023f0:	187b      	adds	r3, r7, r1
 80023f2:	2201      	movs	r2, #1
 80023f4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80023f6:	187b      	adds	r3, r7, r1
 80023f8:	2210      	movs	r2, #16
 80023fa:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023fc:	187b      	adds	r3, r7, r1
 80023fe:	2202      	movs	r2, #2
 8002400:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002402:	187b      	adds	r3, r7, r1
 8002404:	2200      	movs	r2, #0
 8002406:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002408:	187b      	adds	r3, r7, r1
 800240a:	22a0      	movs	r2, #160	; 0xa0
 800240c:	0392      	lsls	r2, r2, #14
 800240e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002410:	187b      	adds	r3, r7, r1
 8002412:	2200      	movs	r2, #0
 8002414:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002416:	187b      	adds	r3, r7, r1
 8002418:	0018      	movs	r0, r3
 800241a:	f7fe fa1f 	bl	800085c <HAL_RCC_OscConfig>
 800241e:	1e03      	subs	r3, r0, #0
 8002420:	d001      	beq.n	8002426 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002422:	f000 f8e7 	bl	80025f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002426:	2110      	movs	r1, #16
 8002428:	187b      	adds	r3, r7, r1
 800242a:	2207      	movs	r2, #7
 800242c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800242e:	187b      	adds	r3, r7, r1
 8002430:	2202      	movs	r2, #2
 8002432:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002434:	187b      	adds	r3, r7, r1
 8002436:	2200      	movs	r2, #0
 8002438:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800243a:	187b      	adds	r3, r7, r1
 800243c:	2200      	movs	r2, #0
 800243e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002440:	187b      	adds	r3, r7, r1
 8002442:	2101      	movs	r1, #1
 8002444:	0018      	movs	r0, r3
 8002446:	f7fe fcfd 	bl	8000e44 <HAL_RCC_ClockConfig>
 800244a:	1e03      	subs	r3, r0, #0
 800244c:	d001      	beq.n	8002452 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800244e:	f000 f8d1 	bl	80025f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002452:	003b      	movs	r3, r7
 8002454:	2201      	movs	r2, #1
 8002456:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002458:	003b      	movs	r3, r7
 800245a:	2200      	movs	r2, #0
 800245c:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800245e:	003b      	movs	r3, r7
 8002460:	0018      	movs	r0, r3
 8002462:	f7fe fe5b 	bl	800111c <HAL_RCCEx_PeriphCLKConfig>
 8002466:	1e03      	subs	r3, r0, #0
 8002468:	d001      	beq.n	800246e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800246a:	f000 f8c3 	bl	80025f4 <Error_Handler>
  }
}
 800246e:	46c0      	nop			; (mov r8, r8)
 8002470:	46bd      	mov	sp, r7
 8002472:	b015      	add	sp, #84	; 0x54
 8002474:	bd90      	pop	{r4, r7, pc}
	...

08002478 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800247c:	4b14      	ldr	r3, [pc, #80]	; (80024d0 <MX_USART1_UART_Init+0x58>)
 800247e:	4a15      	ldr	r2, [pc, #84]	; (80024d4 <MX_USART1_UART_Init+0x5c>)
 8002480:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002482:	4b13      	ldr	r3, [pc, #76]	; (80024d0 <MX_USART1_UART_Init+0x58>)
 8002484:	22e1      	movs	r2, #225	; 0xe1
 8002486:	0252      	lsls	r2, r2, #9
 8002488:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800248a:	4b11      	ldr	r3, [pc, #68]	; (80024d0 <MX_USART1_UART_Init+0x58>)
 800248c:	2200      	movs	r2, #0
 800248e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002490:	4b0f      	ldr	r3, [pc, #60]	; (80024d0 <MX_USART1_UART_Init+0x58>)
 8002492:	2200      	movs	r2, #0
 8002494:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002496:	4b0e      	ldr	r3, [pc, #56]	; (80024d0 <MX_USART1_UART_Init+0x58>)
 8002498:	2200      	movs	r2, #0
 800249a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800249c:	4b0c      	ldr	r3, [pc, #48]	; (80024d0 <MX_USART1_UART_Init+0x58>)
 800249e:	220c      	movs	r2, #12
 80024a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024a2:	4b0b      	ldr	r3, [pc, #44]	; (80024d0 <MX_USART1_UART_Init+0x58>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80024a8:	4b09      	ldr	r3, [pc, #36]	; (80024d0 <MX_USART1_UART_Init+0x58>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024ae:	4b08      	ldr	r3, [pc, #32]	; (80024d0 <MX_USART1_UART_Init+0x58>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024b4:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <MX_USART1_UART_Init+0x58>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80024ba:	4b05      	ldr	r3, [pc, #20]	; (80024d0 <MX_USART1_UART_Init+0x58>)
 80024bc:	0018      	movs	r0, r3
 80024be:	f7fe fefb 	bl	80012b8 <HAL_UART_Init>
 80024c2:	1e03      	subs	r3, r0, #0
 80024c4:	d001      	beq.n	80024ca <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80024c6:	f000 f895 	bl	80025f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80024ca:	46c0      	nop			; (mov r8, r8)
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	200000fc 	.word	0x200000fc
 80024d4:	40013800 	.word	0x40013800

080024d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80024dc:	4b14      	ldr	r3, [pc, #80]	; (8002530 <MX_USART2_UART_Init+0x58>)
 80024de:	4a15      	ldr	r2, [pc, #84]	; (8002534 <MX_USART2_UART_Init+0x5c>)
 80024e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80024e2:	4b13      	ldr	r3, [pc, #76]	; (8002530 <MX_USART2_UART_Init+0x58>)
 80024e4:	22e1      	movs	r2, #225	; 0xe1
 80024e6:	0252      	lsls	r2, r2, #9
 80024e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80024ea:	4b11      	ldr	r3, [pc, #68]	; (8002530 <MX_USART2_UART_Init+0x58>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80024f0:	4b0f      	ldr	r3, [pc, #60]	; (8002530 <MX_USART2_UART_Init+0x58>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80024f6:	4b0e      	ldr	r3, [pc, #56]	; (8002530 <MX_USART2_UART_Init+0x58>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80024fc:	4b0c      	ldr	r3, [pc, #48]	; (8002530 <MX_USART2_UART_Init+0x58>)
 80024fe:	220c      	movs	r2, #12
 8002500:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002502:	4b0b      	ldr	r3, [pc, #44]	; (8002530 <MX_USART2_UART_Init+0x58>)
 8002504:	2200      	movs	r2, #0
 8002506:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002508:	4b09      	ldr	r3, [pc, #36]	; (8002530 <MX_USART2_UART_Init+0x58>)
 800250a:	2200      	movs	r2, #0
 800250c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800250e:	4b08      	ldr	r3, [pc, #32]	; (8002530 <MX_USART2_UART_Init+0x58>)
 8002510:	2200      	movs	r2, #0
 8002512:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002514:	4b06      	ldr	r3, [pc, #24]	; (8002530 <MX_USART2_UART_Init+0x58>)
 8002516:	2200      	movs	r2, #0
 8002518:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800251a:	4b05      	ldr	r3, [pc, #20]	; (8002530 <MX_USART2_UART_Init+0x58>)
 800251c:	0018      	movs	r0, r3
 800251e:	f7fe fecb 	bl	80012b8 <HAL_UART_Init>
 8002522:	1e03      	subs	r3, r0, #0
 8002524:	d001      	beq.n	800252a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002526:	f000 f865 	bl	80025f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800252a:	46c0      	nop			; (mov r8, r8)
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	20000248 	.word	0x20000248
 8002534:	40004400 	.word	0x40004400

08002538 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002538:	b590      	push	{r4, r7, lr}
 800253a:	b089      	sub	sp, #36	; 0x24
 800253c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800253e:	240c      	movs	r4, #12
 8002540:	193b      	adds	r3, r7, r4
 8002542:	0018      	movs	r0, r3
 8002544:	2314      	movs	r3, #20
 8002546:	001a      	movs	r2, r3
 8002548:	2100      	movs	r1, #0
 800254a:	f001 f9c6 	bl	80038da <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800254e:	4b27      	ldr	r3, [pc, #156]	; (80025ec <MX_GPIO_Init+0xb4>)
 8002550:	695a      	ldr	r2, [r3, #20]
 8002552:	4b26      	ldr	r3, [pc, #152]	; (80025ec <MX_GPIO_Init+0xb4>)
 8002554:	2180      	movs	r1, #128	; 0x80
 8002556:	0289      	lsls	r1, r1, #10
 8002558:	430a      	orrs	r2, r1
 800255a:	615a      	str	r2, [r3, #20]
 800255c:	4b23      	ldr	r3, [pc, #140]	; (80025ec <MX_GPIO_Init+0xb4>)
 800255e:	695a      	ldr	r2, [r3, #20]
 8002560:	2380      	movs	r3, #128	; 0x80
 8002562:	029b      	lsls	r3, r3, #10
 8002564:	4013      	ands	r3, r2
 8002566:	60bb      	str	r3, [r7, #8]
 8002568:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800256a:	4b20      	ldr	r3, [pc, #128]	; (80025ec <MX_GPIO_Init+0xb4>)
 800256c:	695a      	ldr	r2, [r3, #20]
 800256e:	4b1f      	ldr	r3, [pc, #124]	; (80025ec <MX_GPIO_Init+0xb4>)
 8002570:	2180      	movs	r1, #128	; 0x80
 8002572:	0309      	lsls	r1, r1, #12
 8002574:	430a      	orrs	r2, r1
 8002576:	615a      	str	r2, [r3, #20]
 8002578:	4b1c      	ldr	r3, [pc, #112]	; (80025ec <MX_GPIO_Init+0xb4>)
 800257a:	695a      	ldr	r2, [r3, #20]
 800257c:	2380      	movs	r3, #128	; 0x80
 800257e:	031b      	lsls	r3, r3, #12
 8002580:	4013      	ands	r3, r2
 8002582:	607b      	str	r3, [r7, #4]
 8002584:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|DISP_RST_Pin, GPIO_PIN_RESET);
 8002586:	23c0      	movs	r3, #192	; 0xc0
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	4819      	ldr	r0, [pc, #100]	; (80025f0 <MX_GPIO_Init+0xb8>)
 800258c:	2200      	movs	r2, #0
 800258e:	0019      	movs	r1, r3
 8002590:	f7fe f946 	bl	8000820 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002594:	193b      	adds	r3, r7, r4
 8002596:	2280      	movs	r2, #128	; 0x80
 8002598:	0052      	lsls	r2, r2, #1
 800259a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800259c:	193b      	adds	r3, r7, r4
 800259e:	2201      	movs	r2, #1
 80025a0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a2:	193b      	adds	r3, r7, r4
 80025a4:	2200      	movs	r2, #0
 80025a6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a8:	193b      	adds	r3, r7, r4
 80025aa:	2200      	movs	r2, #0
 80025ac:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80025ae:	193b      	adds	r3, r7, r4
 80025b0:	4a0f      	ldr	r2, [pc, #60]	; (80025f0 <MX_GPIO_Init+0xb8>)
 80025b2:	0019      	movs	r1, r3
 80025b4:	0010      	movs	r0, r2
 80025b6:	f7fd ffbf 	bl	8000538 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISP_RST_Pin */
  GPIO_InitStruct.Pin = DISP_RST_Pin;
 80025ba:	0021      	movs	r1, r4
 80025bc:	187b      	adds	r3, r7, r1
 80025be:	2280      	movs	r2, #128	; 0x80
 80025c0:	0092      	lsls	r2, r2, #2
 80025c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025c4:	187b      	adds	r3, r7, r1
 80025c6:	2201      	movs	r2, #1
 80025c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025ca:	187b      	adds	r3, r7, r1
 80025cc:	2201      	movs	r2, #1
 80025ce:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d0:	187b      	adds	r3, r7, r1
 80025d2:	2200      	movs	r2, #0
 80025d4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DISP_RST_GPIO_Port, &GPIO_InitStruct);
 80025d6:	187b      	adds	r3, r7, r1
 80025d8:	4a05      	ldr	r2, [pc, #20]	; (80025f0 <MX_GPIO_Init+0xb8>)
 80025da:	0019      	movs	r1, r3
 80025dc:	0010      	movs	r0, r2
 80025de:	f7fd ffab 	bl	8000538 <HAL_GPIO_Init>

}
 80025e2:	46c0      	nop			; (mov r8, r8)
 80025e4:	46bd      	mov	sp, r7
 80025e6:	b009      	add	sp, #36	; 0x24
 80025e8:	bd90      	pop	{r4, r7, pc}
 80025ea:	46c0      	nop			; (mov r8, r8)
 80025ec:	40021000 	.word	0x40021000
 80025f0:	48000800 	.word	0x48000800

080025f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80025f8:	46c0      	nop			; (mov r8, r8)
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
	...

08002600 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002606:	4b0f      	ldr	r3, [pc, #60]	; (8002644 <HAL_MspInit+0x44>)
 8002608:	699a      	ldr	r2, [r3, #24]
 800260a:	4b0e      	ldr	r3, [pc, #56]	; (8002644 <HAL_MspInit+0x44>)
 800260c:	2101      	movs	r1, #1
 800260e:	430a      	orrs	r2, r1
 8002610:	619a      	str	r2, [r3, #24]
 8002612:	4b0c      	ldr	r3, [pc, #48]	; (8002644 <HAL_MspInit+0x44>)
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	2201      	movs	r2, #1
 8002618:	4013      	ands	r3, r2
 800261a:	607b      	str	r3, [r7, #4]
 800261c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800261e:	4b09      	ldr	r3, [pc, #36]	; (8002644 <HAL_MspInit+0x44>)
 8002620:	69da      	ldr	r2, [r3, #28]
 8002622:	4b08      	ldr	r3, [pc, #32]	; (8002644 <HAL_MspInit+0x44>)
 8002624:	2180      	movs	r1, #128	; 0x80
 8002626:	0549      	lsls	r1, r1, #21
 8002628:	430a      	orrs	r2, r1
 800262a:	61da      	str	r2, [r3, #28]
 800262c:	4b05      	ldr	r3, [pc, #20]	; (8002644 <HAL_MspInit+0x44>)
 800262e:	69da      	ldr	r2, [r3, #28]
 8002630:	2380      	movs	r3, #128	; 0x80
 8002632:	055b      	lsls	r3, r3, #21
 8002634:	4013      	ands	r3, r2
 8002636:	603b      	str	r3, [r7, #0]
 8002638:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800263a:	46c0      	nop			; (mov r8, r8)
 800263c:	46bd      	mov	sp, r7
 800263e:	b002      	add	sp, #8
 8002640:	bd80      	pop	{r7, pc}
 8002642:	46c0      	nop			; (mov r8, r8)
 8002644:	40021000 	.word	0x40021000

08002648 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b08c      	sub	sp, #48	; 0x30
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002650:	231c      	movs	r3, #28
 8002652:	18fb      	adds	r3, r7, r3
 8002654:	0018      	movs	r0, r3
 8002656:	2314      	movs	r3, #20
 8002658:	001a      	movs	r2, r3
 800265a:	2100      	movs	r1, #0
 800265c:	f001 f93d 	bl	80038da <memset>
  if(huart->Instance==USART1)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a3d      	ldr	r2, [pc, #244]	; (800275c <HAL_UART_MspInit+0x114>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d13c      	bne.n	80026e4 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800266a:	4b3d      	ldr	r3, [pc, #244]	; (8002760 <HAL_UART_MspInit+0x118>)
 800266c:	699a      	ldr	r2, [r3, #24]
 800266e:	4b3c      	ldr	r3, [pc, #240]	; (8002760 <HAL_UART_MspInit+0x118>)
 8002670:	2180      	movs	r1, #128	; 0x80
 8002672:	01c9      	lsls	r1, r1, #7
 8002674:	430a      	orrs	r2, r1
 8002676:	619a      	str	r2, [r3, #24]
 8002678:	4b39      	ldr	r3, [pc, #228]	; (8002760 <HAL_UART_MspInit+0x118>)
 800267a:	699a      	ldr	r2, [r3, #24]
 800267c:	2380      	movs	r3, #128	; 0x80
 800267e:	01db      	lsls	r3, r3, #7
 8002680:	4013      	ands	r3, r2
 8002682:	61bb      	str	r3, [r7, #24]
 8002684:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002686:	4b36      	ldr	r3, [pc, #216]	; (8002760 <HAL_UART_MspInit+0x118>)
 8002688:	695a      	ldr	r2, [r3, #20]
 800268a:	4b35      	ldr	r3, [pc, #212]	; (8002760 <HAL_UART_MspInit+0x118>)
 800268c:	2180      	movs	r1, #128	; 0x80
 800268e:	0289      	lsls	r1, r1, #10
 8002690:	430a      	orrs	r2, r1
 8002692:	615a      	str	r2, [r3, #20]
 8002694:	4b32      	ldr	r3, [pc, #200]	; (8002760 <HAL_UART_MspInit+0x118>)
 8002696:	695a      	ldr	r2, [r3, #20]
 8002698:	2380      	movs	r3, #128	; 0x80
 800269a:	029b      	lsls	r3, r3, #10
 800269c:	4013      	ands	r3, r2
 800269e:	617b      	str	r3, [r7, #20]
 80026a0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80026a2:	211c      	movs	r1, #28
 80026a4:	187b      	adds	r3, r7, r1
 80026a6:	22c0      	movs	r2, #192	; 0xc0
 80026a8:	00d2      	lsls	r2, r2, #3
 80026aa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ac:	187b      	adds	r3, r7, r1
 80026ae:	2202      	movs	r2, #2
 80026b0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b2:	187b      	adds	r3, r7, r1
 80026b4:	2200      	movs	r2, #0
 80026b6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026b8:	187b      	adds	r3, r7, r1
 80026ba:	2203      	movs	r2, #3
 80026bc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80026be:	187b      	adds	r3, r7, r1
 80026c0:	2201      	movs	r2, #1
 80026c2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026c4:	187a      	adds	r2, r7, r1
 80026c6:	2390      	movs	r3, #144	; 0x90
 80026c8:	05db      	lsls	r3, r3, #23
 80026ca:	0011      	movs	r1, r2
 80026cc:	0018      	movs	r0, r3
 80026ce:	f7fd ff33 	bl	8000538 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80026d2:	2200      	movs	r2, #0
 80026d4:	2100      	movs	r1, #0
 80026d6:	201b      	movs	r0, #27
 80026d8:	f7fd feb6 	bl	8000448 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80026dc:	201b      	movs	r0, #27
 80026de:	f7fd fec8 	bl	8000472 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80026e2:	e037      	b.n	8002754 <HAL_UART_MspInit+0x10c>
  else if(huart->Instance==USART2)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a1e      	ldr	r2, [pc, #120]	; (8002764 <HAL_UART_MspInit+0x11c>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d132      	bne.n	8002754 <HAL_UART_MspInit+0x10c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80026ee:	4b1c      	ldr	r3, [pc, #112]	; (8002760 <HAL_UART_MspInit+0x118>)
 80026f0:	69da      	ldr	r2, [r3, #28]
 80026f2:	4b1b      	ldr	r3, [pc, #108]	; (8002760 <HAL_UART_MspInit+0x118>)
 80026f4:	2180      	movs	r1, #128	; 0x80
 80026f6:	0289      	lsls	r1, r1, #10
 80026f8:	430a      	orrs	r2, r1
 80026fa:	61da      	str	r2, [r3, #28]
 80026fc:	4b18      	ldr	r3, [pc, #96]	; (8002760 <HAL_UART_MspInit+0x118>)
 80026fe:	69da      	ldr	r2, [r3, #28]
 8002700:	2380      	movs	r3, #128	; 0x80
 8002702:	029b      	lsls	r3, r3, #10
 8002704:	4013      	ands	r3, r2
 8002706:	613b      	str	r3, [r7, #16]
 8002708:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800270a:	4b15      	ldr	r3, [pc, #84]	; (8002760 <HAL_UART_MspInit+0x118>)
 800270c:	695a      	ldr	r2, [r3, #20]
 800270e:	4b14      	ldr	r3, [pc, #80]	; (8002760 <HAL_UART_MspInit+0x118>)
 8002710:	2180      	movs	r1, #128	; 0x80
 8002712:	0289      	lsls	r1, r1, #10
 8002714:	430a      	orrs	r2, r1
 8002716:	615a      	str	r2, [r3, #20]
 8002718:	4b11      	ldr	r3, [pc, #68]	; (8002760 <HAL_UART_MspInit+0x118>)
 800271a:	695a      	ldr	r2, [r3, #20]
 800271c:	2380      	movs	r3, #128	; 0x80
 800271e:	029b      	lsls	r3, r3, #10
 8002720:	4013      	ands	r3, r2
 8002722:	60fb      	str	r3, [r7, #12]
 8002724:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002726:	211c      	movs	r1, #28
 8002728:	187b      	adds	r3, r7, r1
 800272a:	220c      	movs	r2, #12
 800272c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800272e:	187b      	adds	r3, r7, r1
 8002730:	2202      	movs	r2, #2
 8002732:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002734:	187b      	adds	r3, r7, r1
 8002736:	2200      	movs	r2, #0
 8002738:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800273a:	187b      	adds	r3, r7, r1
 800273c:	2203      	movs	r2, #3
 800273e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002740:	187b      	adds	r3, r7, r1
 8002742:	2201      	movs	r2, #1
 8002744:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002746:	187a      	adds	r2, r7, r1
 8002748:	2390      	movs	r3, #144	; 0x90
 800274a:	05db      	lsls	r3, r3, #23
 800274c:	0011      	movs	r1, r2
 800274e:	0018      	movs	r0, r3
 8002750:	f7fd fef2 	bl	8000538 <HAL_GPIO_Init>
}
 8002754:	46c0      	nop			; (mov r8, r8)
 8002756:	46bd      	mov	sp, r7
 8002758:	b00c      	add	sp, #48	; 0x30
 800275a:	bd80      	pop	{r7, pc}
 800275c:	40013800 	.word	0x40013800
 8002760:	40021000 	.word	0x40021000
 8002764:	40004400 	.word	0x40004400

08002768 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800276c:	46c0      	nop			; (mov r8, r8)
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002776:	e7fe      	b.n	8002776 <HardFault_Handler+0x4>

08002778 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800277c:	46c0      	nop			; (mov r8, r8)
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002786:	46c0      	nop			; (mov r8, r8)
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002790:	f7fd fd7e 	bl	8000290 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002794:	46c0      	nop			; (mov r8, r8)
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
	...

0800279c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80027a0:	4b03      	ldr	r3, [pc, #12]	; (80027b0 <USART1_IRQHandler+0x14>)
 80027a2:	0018      	movs	r0, r3
 80027a4:	f7fe ff0e 	bl	80015c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80027a8:	46c0      	nop			; (mov r8, r8)
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	46c0      	nop			; (mov r8, r8)
 80027b0:	200000fc 	.word	0x200000fc

080027b4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80027bc:	4b11      	ldr	r3, [pc, #68]	; (8002804 <_sbrk+0x50>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d102      	bne.n	80027ca <_sbrk+0x16>
		heap_end = &end;
 80027c4:	4b0f      	ldr	r3, [pc, #60]	; (8002804 <_sbrk+0x50>)
 80027c6:	4a10      	ldr	r2, [pc, #64]	; (8002808 <_sbrk+0x54>)
 80027c8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80027ca:	4b0e      	ldr	r3, [pc, #56]	; (8002804 <_sbrk+0x50>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80027d0:	4b0c      	ldr	r3, [pc, #48]	; (8002804 <_sbrk+0x50>)
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	18d3      	adds	r3, r2, r3
 80027d8:	466a      	mov	r2, sp
 80027da:	4293      	cmp	r3, r2
 80027dc:	d907      	bls.n	80027ee <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80027de:	f001 f849 	bl	8003874 <__errno>
 80027e2:	0003      	movs	r3, r0
 80027e4:	220c      	movs	r2, #12
 80027e6:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80027e8:	2301      	movs	r3, #1
 80027ea:	425b      	negs	r3, r3
 80027ec:	e006      	b.n	80027fc <_sbrk+0x48>
	}

	heap_end += incr;
 80027ee:	4b05      	ldr	r3, [pc, #20]	; (8002804 <_sbrk+0x50>)
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	18d2      	adds	r2, r2, r3
 80027f6:	4b03      	ldr	r3, [pc, #12]	; (8002804 <_sbrk+0x50>)
 80027f8:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 80027fa:	68fb      	ldr	r3, [r7, #12]
}
 80027fc:	0018      	movs	r0, r3
 80027fe:	46bd      	mov	sp, r7
 8002800:	b004      	add	sp, #16
 8002802:	bd80      	pop	{r7, pc}
 8002804:	2000008c 	.word	0x2000008c
 8002808:	200002c8 	.word	0x200002c8

0800280c <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8002810:	4b1a      	ldr	r3, [pc, #104]	; (800287c <SystemInit+0x70>)
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	4b19      	ldr	r3, [pc, #100]	; (800287c <SystemInit+0x70>)
 8002816:	2101      	movs	r1, #1
 8002818:	430a      	orrs	r2, r1
 800281a:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 800281c:	4b17      	ldr	r3, [pc, #92]	; (800287c <SystemInit+0x70>)
 800281e:	685a      	ldr	r2, [r3, #4]
 8002820:	4b16      	ldr	r3, [pc, #88]	; (800287c <SystemInit+0x70>)
 8002822:	4917      	ldr	r1, [pc, #92]	; (8002880 <SystemInit+0x74>)
 8002824:	400a      	ands	r2, r1
 8002826:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8002828:	4b14      	ldr	r3, [pc, #80]	; (800287c <SystemInit+0x70>)
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	4b13      	ldr	r3, [pc, #76]	; (800287c <SystemInit+0x70>)
 800282e:	4915      	ldr	r1, [pc, #84]	; (8002884 <SystemInit+0x78>)
 8002830:	400a      	ands	r2, r1
 8002832:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8002834:	4b11      	ldr	r3, [pc, #68]	; (800287c <SystemInit+0x70>)
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	4b10      	ldr	r3, [pc, #64]	; (800287c <SystemInit+0x70>)
 800283a:	4913      	ldr	r1, [pc, #76]	; (8002888 <SystemInit+0x7c>)
 800283c:	400a      	ands	r2, r1
 800283e:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8002840:	4b0e      	ldr	r3, [pc, #56]	; (800287c <SystemInit+0x70>)
 8002842:	685a      	ldr	r2, [r3, #4]
 8002844:	4b0d      	ldr	r3, [pc, #52]	; (800287c <SystemInit+0x70>)
 8002846:	4911      	ldr	r1, [pc, #68]	; (800288c <SystemInit+0x80>)
 8002848:	400a      	ands	r2, r1
 800284a:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 800284c:	4b0b      	ldr	r3, [pc, #44]	; (800287c <SystemInit+0x70>)
 800284e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002850:	4b0a      	ldr	r3, [pc, #40]	; (800287c <SystemInit+0x70>)
 8002852:	210f      	movs	r1, #15
 8002854:	438a      	bics	r2, r1
 8002856:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 8002858:	4b08      	ldr	r3, [pc, #32]	; (800287c <SystemInit+0x70>)
 800285a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800285c:	4b07      	ldr	r3, [pc, #28]	; (800287c <SystemInit+0x70>)
 800285e:	490c      	ldr	r1, [pc, #48]	; (8002890 <SystemInit+0x84>)
 8002860:	400a      	ands	r2, r1
 8002862:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8002864:	4b05      	ldr	r3, [pc, #20]	; (800287c <SystemInit+0x70>)
 8002866:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002868:	4b04      	ldr	r3, [pc, #16]	; (800287c <SystemInit+0x70>)
 800286a:	2101      	movs	r1, #1
 800286c:	438a      	bics	r2, r1
 800286e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002870:	4b02      	ldr	r3, [pc, #8]	; (800287c <SystemInit+0x70>)
 8002872:	2200      	movs	r2, #0
 8002874:	609a      	str	r2, [r3, #8]

}
 8002876:	46c0      	nop			; (mov r8, r8)
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	40021000 	.word	0x40021000
 8002880:	08ffb80c 	.word	0x08ffb80c
 8002884:	fef6ffff 	.word	0xfef6ffff
 8002888:	fffbffff 	.word	0xfffbffff
 800288c:	ffc0ffff 	.word	0xffc0ffff
 8002890:	fffffeec 	.word	0xfffffeec

08002894 <genieBegin>:

#include  "visi_genie.h"

// Public Functions

bool genieBegin() {
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0

	pendingACK = 0;
 800289a:	4b32      	ldr	r3, [pc, #200]	; (8002964 <genieBegin+0xd0>)
 800289c:	2200      	movs	r2, #0
 800289e:	701a      	strb	r2, [r3, #0]
	pingRequest = 0;
 80028a0:	4b31      	ldr	r3, [pc, #196]	; (8002968 <genieBegin+0xd4>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	701a      	strb	r2, [r3, #0]
	recover_pulse = 50;
 80028a6:	4b31      	ldr	r3, [pc, #196]	; (800296c <genieBegin+0xd8>)
 80028a8:	2232      	movs	r2, #50	; 0x32
 80028aa:	701a      	strb	r2, [r3, #0]
	autoPing = 0;
 80028ac:	4b30      	ldr	r3, [pc, #192]	; (8002970 <genieBegin+0xdc>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	701a      	strb	r2, [r3, #0]
	GENIE_CMD_TIMEOUT = 1250;
 80028b2:	4b30      	ldr	r3, [pc, #192]	; (8002974 <genieBegin+0xe0>)
 80028b4:	4a30      	ldr	r2, [pc, #192]	; (8002978 <genieBegin+0xe4>)
 80028b6:	801a      	strh	r2, [r3, #0]
	autoPingTimer = 0;
 80028b8:	4b30      	ldr	r3, [pc, #192]	; (800297c <genieBegin+0xe8>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	601a      	str	r2, [r3, #0]
	displayDetected = 0;
 80028be:	4b30      	ldr	r3, [pc, #192]	; (8002980 <genieBegin+0xec>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	701a      	strb	r2, [r3, #0]
	displayDetectTimer = 0;
 80028c4:	4b2f      	ldr	r3, [pc, #188]	; (8002984 <genieBegin+0xf0>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	601a      	str	r2, [r3, #0]
	currentForm = -1;
 80028ca:	4b2f      	ldr	r3, [pc, #188]	; (8002988 <genieBegin+0xf4>)
 80028cc:	22ff      	movs	r2, #255	; 0xff
 80028ce:	701a      	strb	r2, [r3, #0]
	nakInj = 0;
 80028d0:	4b2e      	ldr	r3, [pc, #184]	; (800298c <genieBegin+0xf8>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	701a      	strb	r2, [r3, #0]
	badByteCounter = 0;
 80028d6:	4b2e      	ldr	r3, [pc, #184]	; (8002990 <genieBegin+0xfc>)
 80028d8:	2200      	movs	r2, #0
 80028da:	701a      	strb	r2, [r3, #0]
	delayedCycles = 0;
 80028dc:	4b2d      	ldr	r3, [pc, #180]	; (8002994 <genieBegin+0x100>)
 80028de:	2200      	movs	r2, #0
 80028e0:	601a      	str	r2, [r3, #0]
	display_uptime = 0;
 80028e2:	4b2d      	ldr	r3, [pc, #180]	; (8002998 <genieBegin+0x104>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	601a      	str	r2, [r3, #0]
	ping_spacer;
 80028e8:	4b2c      	ldr	r3, [pc, #176]	; (800299c <genieBegin+0x108>)
 80028ea:	681b      	ldr	r3, [r3, #0]
	genieStart = 1;
 80028ec:	4b2c      	ldr	r3, [pc, #176]	; (80029a0 <genieBegin+0x10c>)
 80028ee:	2201      	movs	r2, #1
 80028f0:	701a      	strb	r2, [r3, #0]

	UserHandler = NULL;
 80028f2:	4b2c      	ldr	r3, [pc, #176]	; (80029a4 <genieBegin+0x110>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]
	UserMagicByteHandler = NULL;
 80028f8:	4b2b      	ldr	r3, [pc, #172]	; (80029a8 <genieBegin+0x114>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	601a      	str	r2, [r3, #0]
	UserMagicDByteHandler = NULL;
 80028fe:	4b2b      	ldr	r3, [pc, #172]	; (80029ac <genieBegin+0x118>)
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]
	UserDebuggerHandler = NULL;
 8002904:	4b2a      	ldr	r3, [pc, #168]	; (80029b0 <genieBegin+0x11c>)
 8002906:	2200      	movs	r2, #0
 8002908:	601a      	str	r2, [r3, #0]

	display_uptime = millis(); // start uptime timer (ms)
 800290a:	f7ff fbe5 	bl	80020d8 <millis>
 800290e:	0002      	movs	r2, r0
 8002910:	4b21      	ldr	r3, [pc, #132]	; (8002998 <genieBegin+0x104>)
 8002912:	601a      	str	r2, [r3, #0]
	genieStart = 1; // start form request on startup
 8002914:	4b22      	ldr	r3, [pc, #136]	; (80029a0 <genieBegin+0x10c>)
 8002916:	2201      	movs	r2, #1
 8002918:	701a      	strb	r2, [r3, #0]
	genieReadObject(GENIE_OBJ_FORM, (uint8_t)0x00); // send form request
 800291a:	2100      	movs	r1, #0
 800291c:	200a      	movs	r0, #10
 800291e:	f000 f849 	bl	80029b4 <genieReadObject>
	uint32_t timeout_start = millis(); // timeout timer
 8002922:	f7ff fbd9 	bl	80020d8 <millis>
 8002926:	0003      	movs	r3, r0
 8002928:	607b      	str	r3, [r7, #4]
	while ( millis() - timeout_start <= 250 ) { // blocking loop, releases after 150ms to timeout, or sooner if display's detected.
 800292a:	e00b      	b.n	8002944 <genieBegin+0xb0>
		if ( genieDoEvents() == GENIE_REPORT_OBJ && !genieStart ) return true; // form is updated.
 800292c:	f000 fa80 	bl	8002e30 <genieDoEvents>
 8002930:	0003      	movs	r3, r0
 8002932:	2b05      	cmp	r3, #5
 8002934:	d106      	bne.n	8002944 <genieBegin+0xb0>
 8002936:	4b1a      	ldr	r3, [pc, #104]	; (80029a0 <genieBegin+0x10c>)
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	b2db      	uxtb	r3, r3
 800293c:	2b00      	cmp	r3, #0
 800293e:	d101      	bne.n	8002944 <genieBegin+0xb0>
 8002940:	2301      	movs	r3, #1
 8002942:	e00a      	b.n	800295a <genieBegin+0xc6>
	while ( millis() - timeout_start <= 250 ) { // blocking loop, releases after 150ms to timeout, or sooner if display's detected.
 8002944:	f7ff fbc8 	bl	80020d8 <millis>
 8002948:	0002      	movs	r2, r0
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2bfa      	cmp	r3, #250	; 0xfa
 8002950:	d9ec      	bls.n	800292c <genieBegin+0x98>
	}
	displayDetected = false;
 8002952:	4b0b      	ldr	r3, [pc, #44]	; (8002980 <genieBegin+0xec>)
 8002954:	2200      	movs	r2, #0
 8002956:	701a      	strb	r2, [r3, #0]
	return 0; // timeout occurred, status offline.
 8002958:	2300      	movs	r3, #0
}
 800295a:	0018      	movs	r0, r3
 800295c:	46bd      	mov	sp, r7
 800295e:	b002      	add	sp, #8
 8002960:	bd80      	pop	{r7, pc}
 8002962:	46c0      	nop			; (mov r8, r8)
 8002964:	200000b0 	.word	0x200000b0
 8002968:	200001d4 	.word	0x200001d4
 800296c:	200001e1 	.word	0x200001e1
 8002970:	200000f9 	.word	0x200000f9
 8002974:	2000009e 	.word	0x2000009e
 8002978:	000004e2 	.word	0x000004e2
 800297c:	200001d8 	.word	0x200001d8
 8002980:	200002c0 	.word	0x200002c0
 8002984:	2000016c 	.word	0x2000016c
 8002988:	200002c1 	.word	0x200002c1
 800298c:	200001e0 	.word	0x200001e0
 8002990:	20000247 	.word	0x20000247
 8002994:	200002bc 	.word	0x200002bc
 8002998:	200000a8 	.word	0x200000a8
 800299c:	200000a0 	.word	0x200000a0
 80029a0:	2000009c 	.word	0x2000009c
 80029a4:	200001dc 	.word	0x200001dc
 80029a8:	200000a4 	.word	0x200000a4
 80029ac:	200002b8 	.word	0x200002b8
 80029b0:	200000ac 	.word	0x200000ac

080029b4 <genieReadObject>:


uint8_t genieReadObject(uint16_t object, uint16_t index) {
 80029b4:	b590      	push	{r4, r7, lr}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	0002      	movs	r2, r0
 80029bc:	1dbb      	adds	r3, r7, #6
 80029be:	801a      	strh	r2, [r3, #0]
 80029c0:	1d3b      	adds	r3, r7, #4
 80029c2:	1c0a      	adds	r2, r1, #0
 80029c4:	801a      	strh	r2, [r3, #0]
	if ( !displayDetected )
 80029c6:	4b1a      	ldr	r3, [pc, #104]	; (8002a30 <genieReadObject+0x7c>)
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d101      	bne.n	80029d4 <genieReadObject+0x20>
		return -1;
 80029d0:	23ff      	movs	r3, #255	; 0xff
 80029d2:	e028      	b.n	8002a26 <genieReadObject+0x72>
	uint8_t checksum;
	geniePutByte((uint8_t)GENIE_READ_OBJ);
 80029d4:	2000      	movs	r0, #0
 80029d6:	f7ff fb93 	bl	8002100 <geniePutByte>
	checksum = GENIE_READ_OBJ;
 80029da:	240f      	movs	r4, #15
 80029dc:	193b      	adds	r3, r7, r4
 80029de:	2200      	movs	r2, #0
 80029e0:	701a      	strb	r2, [r3, #0]
	geniePutByte(object);
 80029e2:	1dbb      	adds	r3, r7, #6
 80029e4:	881b      	ldrh	r3, [r3, #0]
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	0018      	movs	r0, r3
 80029ea:	f7ff fb89 	bl	8002100 <geniePutByte>
	checksum ^= object;
 80029ee:	1dbb      	adds	r3, r7, #6
 80029f0:	881b      	ldrh	r3, [r3, #0]
 80029f2:	b2d9      	uxtb	r1, r3
 80029f4:	193b      	adds	r3, r7, r4
 80029f6:	193a      	adds	r2, r7, r4
 80029f8:	7812      	ldrb	r2, [r2, #0]
 80029fa:	404a      	eors	r2, r1
 80029fc:	701a      	strb	r2, [r3, #0]
	geniePutByte(index);
 80029fe:	1d3b      	adds	r3, r7, #4
 8002a00:	881b      	ldrh	r3, [r3, #0]
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	0018      	movs	r0, r3
 8002a06:	f7ff fb7b 	bl	8002100 <geniePutByte>
	checksum ^= index;
 8002a0a:	1d3b      	adds	r3, r7, #4
 8002a0c:	881b      	ldrh	r3, [r3, #0]
 8002a0e:	b2d9      	uxtb	r1, r3
 8002a10:	193b      	adds	r3, r7, r4
 8002a12:	193a      	adds	r2, r7, r4
 8002a14:	7812      	ldrb	r2, [r2, #0]
 8002a16:	404a      	eors	r2, r1
 8002a18:	701a      	strb	r2, [r3, #0]
	geniePutByte(checksum);
 8002a1a:	193b      	adds	r3, r7, r4
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	0018      	movs	r0, r3
 8002a20:	f7ff fb6e 	bl	8002100 <geniePutByte>
	return 0;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	0018      	movs	r0, r3
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	b005      	add	sp, #20
 8002a2c:	bd90      	pop	{r4, r7, pc}
 8002a2e:	46c0      	nop			; (mov r8, r8)
 8002a30:	200002c0 	.word	0x200002c0

08002a34 <genieWriteObject>:

uint16_t genieWriteObject(uint16_t object, uint16_t index, uint16_t data) {
 8002a34:	b5b0      	push	{r4, r5, r7, lr}
 8002a36:	b086      	sub	sp, #24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	0004      	movs	r4, r0
 8002a3c:	0008      	movs	r0, r1
 8002a3e:	0011      	movs	r1, r2
 8002a40:	1dbb      	adds	r3, r7, #6
 8002a42:	1c22      	adds	r2, r4, #0
 8002a44:	801a      	strh	r2, [r3, #0]
 8002a46:	1d3b      	adds	r3, r7, #4
 8002a48:	1c02      	adds	r2, r0, #0
 8002a4a:	801a      	strh	r2, [r3, #0]
 8002a4c:	1cbb      	adds	r3, r7, #2
 8002a4e:	1c0a      	adds	r2, r1, #0
 8002a50:	801a      	strh	r2, [r3, #0]
    if (!displayDetected)
 8002a52:	4b46      	ldr	r3, [pc, #280]	; (8002b6c <genieWriteObject+0x138>)
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d101      	bne.n	8002a60 <genieWriteObject+0x2c>
        return -1;
 8002a5c:	4b44      	ldr	r3, [pc, #272]	; (8002b70 <genieWriteObject+0x13c>)
 8002a5e:	e081      	b.n	8002b64 <genieWriteObject+0x130>
    uint8_t checksum;
    pendingACK = 1;
 8002a60:	4b44      	ldr	r3, [pc, #272]	; (8002b74 <genieWriteObject+0x140>)
 8002a62:	2201      	movs	r2, #1
 8002a64:	701a      	strb	r2, [r3, #0]
    geniePutByte(GENIE_WRITE_OBJ);
 8002a66:	2001      	movs	r0, #1
 8002a68:	f7ff fb4a 	bl	8002100 <geniePutByte>
    checksum = GENIE_WRITE_OBJ;
 8002a6c:	2417      	movs	r4, #23
 8002a6e:	193b      	adds	r3, r7, r4
 8002a70:	2201      	movs	r2, #1
 8002a72:	701a      	strb	r2, [r3, #0]
    geniePutByte(object);
 8002a74:	1dbb      	adds	r3, r7, #6
 8002a76:	881b      	ldrh	r3, [r3, #0]
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	0018      	movs	r0, r3
 8002a7c:	f7ff fb40 	bl	8002100 <geniePutByte>
    checksum ^= object;
 8002a80:	1dbb      	adds	r3, r7, #6
 8002a82:	881b      	ldrh	r3, [r3, #0]
 8002a84:	b2d9      	uxtb	r1, r3
 8002a86:	193b      	adds	r3, r7, r4
 8002a88:	193a      	adds	r2, r7, r4
 8002a8a:	7812      	ldrb	r2, [r2, #0]
 8002a8c:	404a      	eors	r2, r1
 8002a8e:	701a      	strb	r2, [r3, #0]
    geniePutByte(index);
 8002a90:	1d3b      	adds	r3, r7, #4
 8002a92:	881b      	ldrh	r3, [r3, #0]
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	0018      	movs	r0, r3
 8002a98:	f7ff fb32 	bl	8002100 <geniePutByte>
    checksum ^= index;
 8002a9c:	1d3b      	adds	r3, r7, #4
 8002a9e:	881b      	ldrh	r3, [r3, #0]
 8002aa0:	b2d9      	uxtb	r1, r3
 8002aa2:	193b      	adds	r3, r7, r4
 8002aa4:	193a      	adds	r2, r7, r4
 8002aa6:	7812      	ldrb	r2, [r2, #0]
 8002aa8:	404a      	eors	r2, r1
 8002aaa:	701a      	strb	r2, [r3, #0]
    geniePutByte(highByte(data));
 8002aac:	1cbb      	adds	r3, r7, #2
 8002aae:	881b      	ldrh	r3, [r3, #0]
 8002ab0:	0a1b      	lsrs	r3, r3, #8
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	0018      	movs	r0, r3
 8002ab8:	f7ff fb22 	bl	8002100 <geniePutByte>
    checksum ^= highByte(data);
 8002abc:	1cbb      	adds	r3, r7, #2
 8002abe:	881b      	ldrh	r3, [r3, #0]
 8002ac0:	0a1b      	lsrs	r3, r3, #8
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	b25a      	sxtb	r2, r3
 8002ac6:	193b      	adds	r3, r7, r4
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	b25b      	sxtb	r3, r3
 8002acc:	4053      	eors	r3, r2
 8002ace:	b25a      	sxtb	r2, r3
 8002ad0:	193b      	adds	r3, r7, r4
 8002ad2:	701a      	strb	r2, [r3, #0]
    geniePutByte(lowByte(data));
 8002ad4:	1cbb      	adds	r3, r7, #2
 8002ad6:	881b      	ldrh	r3, [r3, #0]
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	0018      	movs	r0, r3
 8002adc:	f7ff fb10 	bl	8002100 <geniePutByte>
    checksum ^= lowByte(data);
 8002ae0:	1cbb      	adds	r3, r7, #2
 8002ae2:	881b      	ldrh	r3, [r3, #0]
 8002ae4:	b25a      	sxtb	r2, r3
 8002ae6:	193b      	adds	r3, r7, r4
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	b25b      	sxtb	r3, r3
 8002aec:	4053      	eors	r3, r2
 8002aee:	b25a      	sxtb	r2, r3
 8002af0:	193b      	adds	r3, r7, r4
 8002af2:	701a      	strb	r2, [r3, #0]
    geniePutByte(checksum);
 8002af4:	193b      	adds	r3, r7, r4
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	0018      	movs	r0, r3
 8002afa:	f7ff fb01 	bl	8002100 <geniePutByte>
    uint32_t timeout_write = millis();
 8002afe:	f7ff faeb 	bl	80020d8 <millis>
 8002b02:	0003      	movs	r3, r0
 8002b04:	613b      	str	r3, [r7, #16]
    while (millis() - timeout_write <= GENIE_CMD_TIMEOUT) {
 8002b06:	e012      	b.n	8002b2e <genieWriteObject+0xfa>
        uint8_t command_return = genieDoEvents();
 8002b08:	250f      	movs	r5, #15
 8002b0a:	197c      	adds	r4, r7, r5
 8002b0c:	f000 f990 	bl	8002e30 <genieDoEvents>
 8002b10:	0003      	movs	r3, r0
 8002b12:	7023      	strb	r3, [r4, #0]
        if (command_return == GENIE_ACK) {
 8002b14:	197b      	adds	r3, r7, r5
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	2b06      	cmp	r3, #6
 8002b1a:	d101      	bne.n	8002b20 <genieWriteObject+0xec>
            return 1;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e021      	b.n	8002b64 <genieWriteObject+0x130>
        }
        if (command_return == GENIE_NAK) {
 8002b20:	230f      	movs	r3, #15
 8002b22:	18fb      	adds	r3, r7, r3
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	2b15      	cmp	r3, #21
 8002b28:	d101      	bne.n	8002b2e <genieWriteObject+0xfa>
            return 0;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	e01a      	b.n	8002b64 <genieWriteObject+0x130>
    while (millis() - timeout_write <= GENIE_CMD_TIMEOUT) {
 8002b2e:	f7ff fad3 	bl	80020d8 <millis>
 8002b32:	0002      	movs	r2, r0
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	4a0f      	ldr	r2, [pc, #60]	; (8002b78 <genieWriteObject+0x144>)
 8002b3a:	8812      	ldrh	r2, [r2, #0]
 8002b3c:	b292      	uxth	r2, r2
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d9e2      	bls.n	8002b08 <genieWriteObject+0xd4>
        }
    }
    if (UserDebuggerHandler != 0) UserDebuggerHandler("Write Object didn't receive any reply\r\n");
 8002b42:	4b0e      	ldr	r3, [pc, #56]	; (8002b7c <genieWriteObject+0x148>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d004      	beq.n	8002b54 <genieWriteObject+0x120>
 8002b4a:	4b0c      	ldr	r3, [pc, #48]	; (8002b7c <genieWriteObject+0x148>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a0c      	ldr	r2, [pc, #48]	; (8002b80 <genieWriteObject+0x14c>)
 8002b50:	0010      	movs	r0, r2
 8002b52:	4798      	blx	r3
    displayDetectTimer = millis() + DISPLAY_TIMEOUT + 10000; //manual disconnect
 8002b54:	f7ff fac0 	bl	80020d8 <millis>
 8002b58:	0003      	movs	r3, r0
 8002b5a:	4a0a      	ldr	r2, [pc, #40]	; (8002b84 <genieWriteObject+0x150>)
 8002b5c:	189a      	adds	r2, r3, r2
 8002b5e:	4b0a      	ldr	r3, [pc, #40]	; (8002b88 <genieWriteObject+0x154>)
 8002b60:	601a      	str	r2, [r3, #0]
    return -1; // timeout
 8002b62:	4b03      	ldr	r3, [pc, #12]	; (8002b70 <genieWriteObject+0x13c>)

}
 8002b64:	0018      	movs	r0, r3
 8002b66:	46bd      	mov	sp, r7
 8002b68:	b006      	add	sp, #24
 8002b6a:	bdb0      	pop	{r4, r5, r7, pc}
 8002b6c:	200002c0 	.word	0x200002c0
 8002b70:	0000ffff 	.word	0x0000ffff
 8002b74:	200000b0 	.word	0x200000b0
 8002b78:	2000009e 	.word	0x2000009e
 8002b7c:	200000ac 	.word	0x200000ac
 8002b80:	08004170 	.word	0x08004170
 8002b84:	00002ee0 	.word	0x00002ee0
 8002b88:	2000016c 	.word	0x2000016c

08002b8c <genieWriteContrast>:

uint8_t genieWriteContrast(uint16_t value) {
 8002b8c:	b5b0      	push	{r4, r5, r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	0002      	movs	r2, r0
 8002b94:	1dbb      	adds	r3, r7, #6
 8002b96:	801a      	strh	r2, [r3, #0]
    if (!displayDetected)
 8002b98:	4b2d      	ldr	r3, [pc, #180]	; (8002c50 <genieWriteContrast+0xc4>)
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <genieWriteContrast+0x1a>
        return -1;
 8002ba2:	23ff      	movs	r3, #255	; 0xff
 8002ba4:	e04f      	b.n	8002c46 <genieWriteContrast+0xba>
    uint8_t checksum;
    pendingACK = 1;
 8002ba6:	4b2b      	ldr	r3, [pc, #172]	; (8002c54 <genieWriteContrast+0xc8>)
 8002ba8:	2201      	movs	r2, #1
 8002baa:	701a      	strb	r2, [r3, #0]
    geniePutByte(GENIE_WRITE_CONTRAST);
 8002bac:	2004      	movs	r0, #4
 8002bae:	f7ff faa7 	bl	8002100 <geniePutByte>
    checksum = GENIE_WRITE_CONTRAST;
 8002bb2:	2417      	movs	r4, #23
 8002bb4:	193b      	adds	r3, r7, r4
 8002bb6:	2204      	movs	r2, #4
 8002bb8:	701a      	strb	r2, [r3, #0]
    geniePutByte(value);
 8002bba:	1dbb      	adds	r3, r7, #6
 8002bbc:	881b      	ldrh	r3, [r3, #0]
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	0018      	movs	r0, r3
 8002bc2:	f7ff fa9d 	bl	8002100 <geniePutByte>
    checksum ^= value;
 8002bc6:	1dbb      	adds	r3, r7, #6
 8002bc8:	881b      	ldrh	r3, [r3, #0]
 8002bca:	b2d9      	uxtb	r1, r3
 8002bcc:	193b      	adds	r3, r7, r4
 8002bce:	193a      	adds	r2, r7, r4
 8002bd0:	7812      	ldrb	r2, [r2, #0]
 8002bd2:	404a      	eors	r2, r1
 8002bd4:	701a      	strb	r2, [r3, #0]
    geniePutByte(checksum);
 8002bd6:	193b      	adds	r3, r7, r4
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	0018      	movs	r0, r3
 8002bdc:	f7ff fa90 	bl	8002100 <geniePutByte>
    uint32_t timeout_write = millis();
 8002be0:	f7ff fa7a 	bl	80020d8 <millis>
 8002be4:	0003      	movs	r3, r0
 8002be6:	613b      	str	r3, [r7, #16]
    while (millis() - timeout_write <= GENIE_CMD_TIMEOUT) {
 8002be8:	e012      	b.n	8002c10 <genieWriteContrast+0x84>
        uint8_t command_return = genieDoEvents();
 8002bea:	250f      	movs	r5, #15
 8002bec:	197c      	adds	r4, r7, r5
 8002bee:	f000 f91f 	bl	8002e30 <genieDoEvents>
 8002bf2:	0003      	movs	r3, r0
 8002bf4:	7023      	strb	r3, [r4, #0]
        if (command_return == GENIE_ACK) {
 8002bf6:	197b      	adds	r3, r7, r5
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	2b06      	cmp	r3, #6
 8002bfc:	d101      	bne.n	8002c02 <genieWriteContrast+0x76>
            return 1;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e021      	b.n	8002c46 <genieWriteContrast+0xba>
        }
        if (command_return == GENIE_NAK) {
 8002c02:	230f      	movs	r3, #15
 8002c04:	18fb      	adds	r3, r7, r3
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	2b15      	cmp	r3, #21
 8002c0a:	d101      	bne.n	8002c10 <genieWriteContrast+0x84>
            return 0;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	e01a      	b.n	8002c46 <genieWriteContrast+0xba>
    while (millis() - timeout_write <= GENIE_CMD_TIMEOUT) {
 8002c10:	f7ff fa62 	bl	80020d8 <millis>
 8002c14:	0002      	movs	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	4a0f      	ldr	r2, [pc, #60]	; (8002c58 <genieWriteContrast+0xcc>)
 8002c1c:	8812      	ldrh	r2, [r2, #0]
 8002c1e:	b292      	uxth	r2, r2
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d9e2      	bls.n	8002bea <genieWriteContrast+0x5e>
        }
    }
    if (UserDebuggerHandler != 0) UserDebuggerHandler("Write Contrast didn't receive any reply\r\n");
 8002c24:	4b0d      	ldr	r3, [pc, #52]	; (8002c5c <genieWriteContrast+0xd0>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d004      	beq.n	8002c36 <genieWriteContrast+0xaa>
 8002c2c:	4b0b      	ldr	r3, [pc, #44]	; (8002c5c <genieWriteContrast+0xd0>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a0b      	ldr	r2, [pc, #44]	; (8002c60 <genieWriteContrast+0xd4>)
 8002c32:	0010      	movs	r0, r2
 8002c34:	4798      	blx	r3
    displayDetectTimer = millis() + DISPLAY_TIMEOUT + 10000; //manual disconnect
 8002c36:	f7ff fa4f 	bl	80020d8 <millis>
 8002c3a:	0003      	movs	r3, r0
 8002c3c:	4a09      	ldr	r2, [pc, #36]	; (8002c64 <genieWriteContrast+0xd8>)
 8002c3e:	189a      	adds	r2, r3, r2
 8002c40:	4b09      	ldr	r3, [pc, #36]	; (8002c68 <genieWriteContrast+0xdc>)
 8002c42:	601a      	str	r2, [r3, #0]
    return -1; // timeout
 8002c44:	23ff      	movs	r3, #255	; 0xff
}
 8002c46:	0018      	movs	r0, r3
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	b006      	add	sp, #24
 8002c4c:	bdb0      	pop	{r4, r5, r7, pc}
 8002c4e:	46c0      	nop			; (mov r8, r8)
 8002c50:	200002c0 	.word	0x200002c0
 8002c54:	200000b0 	.word	0x200000b0
 8002c58:	2000009e 	.word	0x2000009e
 8002c5c:	200000ac 	.word	0x200000ac
 8002c60:	08004198 	.word	0x08004198
 8002c64:	00002ee0 	.word	0x00002ee0
 8002c68:	2000016c 	.word	0x2000016c

08002c6c <genieWriteStr>:

uint16_t genieWriteStr(uint16_t index, char *string) {
 8002c6c:	b5b0      	push	{r4, r5, r7, lr}
 8002c6e:	b088      	sub	sp, #32
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	0002      	movs	r2, r0
 8002c74:	6039      	str	r1, [r7, #0]
 8002c76:	1dbb      	adds	r3, r7, #6
 8002c78:	801a      	strh	r2, [r3, #0]
    if (!displayDetected)
 8002c7a:	4b42      	ldr	r3, [pc, #264]	; (8002d84 <genieWriteStr+0x118>)
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d101      	bne.n	8002c88 <genieWriteStr+0x1c>
        return -1;
 8002c84:	4b40      	ldr	r3, [pc, #256]	; (8002d88 <genieWriteStr+0x11c>)
 8002c86:	e079      	b.n	8002d7c <genieWriteStr+0x110>
    char* p;
    uint8_t checksum;
    pendingACK = 1;
 8002c88:	4b40      	ldr	r3, [pc, #256]	; (8002d8c <genieWriteStr+0x120>)
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	701a      	strb	r2, [r3, #0]
    int len = strlen(string);
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	0018      	movs	r0, r3
 8002c92:	f7fd fa39 	bl	8000108 <strlen>
 8002c96:	0003      	movs	r3, r0
 8002c98:	617b      	str	r3, [r7, #20]
    if (len > 255)
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	2bff      	cmp	r3, #255	; 0xff
 8002c9e:	dd01      	ble.n	8002ca4 <genieWriteStr+0x38>
        return -1;
 8002ca0:	4b39      	ldr	r3, [pc, #228]	; (8002d88 <genieWriteStr+0x11c>)
 8002ca2:	e06b      	b.n	8002d7c <genieWriteStr+0x110>
    geniePutByte(GENIE_WRITE_STR);
 8002ca4:	2002      	movs	r0, #2
 8002ca6:	f7ff fa2b 	bl	8002100 <geniePutByte>
    checksum = GENIE_WRITE_STR;
 8002caa:	241b      	movs	r4, #27
 8002cac:	193b      	adds	r3, r7, r4
 8002cae:	2202      	movs	r2, #2
 8002cb0:	701a      	strb	r2, [r3, #0]
    geniePutByte(index);
 8002cb2:	1dbb      	adds	r3, r7, #6
 8002cb4:	881b      	ldrh	r3, [r3, #0]
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	0018      	movs	r0, r3
 8002cba:	f7ff fa21 	bl	8002100 <geniePutByte>
    checksum ^= index;
 8002cbe:	1dbb      	adds	r3, r7, #6
 8002cc0:	881b      	ldrh	r3, [r3, #0]
 8002cc2:	b2d9      	uxtb	r1, r3
 8002cc4:	193b      	adds	r3, r7, r4
 8002cc6:	193a      	adds	r2, r7, r4
 8002cc8:	7812      	ldrb	r2, [r2, #0]
 8002cca:	404a      	eors	r2, r1
 8002ccc:	701a      	strb	r2, [r3, #0]
    geniePutByte((unsigned char)len);
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	0018      	movs	r0, r3
 8002cd4:	f7ff fa14 	bl	8002100 <geniePutByte>
    checksum ^= len;
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	b25a      	sxtb	r2, r3
 8002cdc:	193b      	adds	r3, r7, r4
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	b25b      	sxtb	r3, r3
 8002ce2:	4053      	eors	r3, r2
 8002ce4:	b25a      	sxtb	r2, r3
 8002ce6:	193b      	adds	r3, r7, r4
 8002ce8:	701a      	strb	r2, [r3, #0]
    for (p = string; *p; ++p) {
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	61fb      	str	r3, [r7, #28]
 8002cee:	e00f      	b.n	8002d10 <genieWriteStr+0xa4>
        geniePutByte(*p);
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	f7ff fa03 	bl	8002100 <geniePutByte>
        checksum ^= *p;
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	7819      	ldrb	r1, [r3, #0]
 8002cfe:	221b      	movs	r2, #27
 8002d00:	18bb      	adds	r3, r7, r2
 8002d02:	18ba      	adds	r2, r7, r2
 8002d04:	7812      	ldrb	r2, [r2, #0]
 8002d06:	404a      	eors	r2, r1
 8002d08:	701a      	strb	r2, [r3, #0]
    for (p = string; *p; ++p) {
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	61fb      	str	r3, [r7, #28]
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d1eb      	bne.n	8002cf0 <genieWriteStr+0x84>
    }
    geniePutByte(checksum);
 8002d18:	231b      	movs	r3, #27
 8002d1a:	18fb      	adds	r3, r7, r3
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	0018      	movs	r0, r3
 8002d20:	f7ff f9ee 	bl	8002100 <geniePutByte>
    uint32_t timeout_write = millis();
 8002d24:	f7ff f9d8 	bl	80020d8 <millis>
 8002d28:	0003      	movs	r3, r0
 8002d2a:	613b      	str	r3, [r7, #16]
    while (millis() - timeout_write <= GENIE_CMD_TIMEOUT) {
 8002d2c:	e012      	b.n	8002d54 <genieWriteStr+0xe8>
        uint8_t command_return = genieDoEvents();
 8002d2e:	250f      	movs	r5, #15
 8002d30:	197c      	adds	r4, r7, r5
 8002d32:	f000 f87d 	bl	8002e30 <genieDoEvents>
 8002d36:	0003      	movs	r3, r0
 8002d38:	7023      	strb	r3, [r4, #0]
        if (command_return == GENIE_ACK) {
 8002d3a:	197b      	adds	r3, r7, r5
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	2b06      	cmp	r3, #6
 8002d40:	d101      	bne.n	8002d46 <genieWriteStr+0xda>
            return 1;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e01a      	b.n	8002d7c <genieWriteStr+0x110>
        }
        if (command_return == GENIE_NAK) {
 8002d46:	230f      	movs	r3, #15
 8002d48:	18fb      	adds	r3, r7, r3
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	2b15      	cmp	r3, #21
 8002d4e:	d101      	bne.n	8002d54 <genieWriteStr+0xe8>
            return 0;
 8002d50:	2300      	movs	r3, #0
 8002d52:	e013      	b.n	8002d7c <genieWriteStr+0x110>
    while (millis() - timeout_write <= GENIE_CMD_TIMEOUT) {
 8002d54:	f7ff f9c0 	bl	80020d8 <millis>
 8002d58:	0002      	movs	r2, r0
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	4a0c      	ldr	r2, [pc, #48]	; (8002d90 <genieWriteStr+0x124>)
 8002d60:	8812      	ldrh	r2, [r2, #0]
 8002d62:	b292      	uxth	r2, r2
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d9e2      	bls.n	8002d2e <genieWriteStr+0xc2>
        }
    }
    if (UserDebuggerHandler != 0) UserDebuggerHandler("Write String didn't receive any reply\r\n");
 8002d68:	4b0a      	ldr	r3, [pc, #40]	; (8002d94 <genieWriteStr+0x128>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d004      	beq.n	8002d7a <genieWriteStr+0x10e>
 8002d70:	4b08      	ldr	r3, [pc, #32]	; (8002d94 <genieWriteStr+0x128>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a08      	ldr	r2, [pc, #32]	; (8002d98 <genieWriteStr+0x12c>)
 8002d76:	0010      	movs	r0, r2
 8002d78:	4798      	blx	r3
//    displayDetectTimer = millis() + DISPLAY_TIMEOUT + 10000; //manual disconnect
    return -1; // timeout
 8002d7a:	4b03      	ldr	r3, [pc, #12]	; (8002d88 <genieWriteStr+0x11c>)
}
 8002d7c:	0018      	movs	r0, r3
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	b008      	add	sp, #32
 8002d82:	bdb0      	pop	{r4, r5, r7, pc}
 8002d84:	200002c0 	.word	0x200002c0
 8002d88:	0000ffff 	.word	0x0000ffff
 8002d8c:	200000b0 	.word	0x200000b0
 8002d90:	2000009e 	.word	0x2000009e
 8002d94:	200000ac 	.word	0x200000ac
 8002d98:	080041c4 	.word	0x080041c4

08002d9c <genieGetEventData>:

bool genieEventIs(genieFrame * e, uint8_t cmd, uint8_t object, uint8_t index) {
    return (e->reportObject.cmd == cmd && e->reportObject.object == object && e->reportObject.index == index);
}

uint16_t genieGetEventData(genieFrame * e) {
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
    return (e->reportObject.data_msb << 8) + e->reportObject.data_lsb;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	78db      	ldrb	r3, [r3, #3]
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	021b      	lsls	r3, r3, #8
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	791b      	ldrb	r3, [r3, #4]
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	18d3      	adds	r3, r2, r3
 8002db6:	b29b      	uxth	r3, r3
}
 8002db8:	0018      	movs	r0, r3
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	b002      	add	sp, #8
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <genieDequeueEvent>:

uint8_t genieDequeueEvent(genieFrame * buff) {
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
    if (EventQueue.n_events > 0) {
 8002dc8:	4b18      	ldr	r3, [pc, #96]	; (8002e2c <genieDequeueEvent+0x6c>)
 8002dca:	2262      	movs	r2, #98	; 0x62
 8002dcc:	5c9b      	ldrb	r3, [r3, r2]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d027      	beq.n	8002e22 <genieDequeueEvent+0x62>
        memcpy(buff, &EventQueue.frames[EventQueue.rd_index], GENIE_FRAME_SIZE);
 8002dd2:	4b16      	ldr	r3, [pc, #88]	; (8002e2c <genieDequeueEvent+0x6c>)
 8002dd4:	2260      	movs	r2, #96	; 0x60
 8002dd6:	5c9b      	ldrb	r3, [r3, r2]
 8002dd8:	001a      	movs	r2, r3
 8002dda:	0013      	movs	r3, r2
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	189b      	adds	r3, r3, r2
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	4a12      	ldr	r2, [pc, #72]	; (8002e2c <genieDequeueEvent+0x6c>)
 8002de4:	1899      	adds	r1, r3, r2
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2206      	movs	r2, #6
 8002dea:	0018      	movs	r0, r3
 8002dec:	f000 fd6c 	bl	80038c8 <memcpy>
        EventQueue.rd_index++;
 8002df0:	4b0e      	ldr	r3, [pc, #56]	; (8002e2c <genieDequeueEvent+0x6c>)
 8002df2:	2260      	movs	r2, #96	; 0x60
 8002df4:	5c9b      	ldrb	r3, [r3, r2]
 8002df6:	3301      	adds	r3, #1
 8002df8:	b2d9      	uxtb	r1, r3
 8002dfa:	4b0c      	ldr	r3, [pc, #48]	; (8002e2c <genieDequeueEvent+0x6c>)
 8002dfc:	2260      	movs	r2, #96	; 0x60
 8002dfe:	5499      	strb	r1, [r3, r2]
        EventQueue.rd_index &= MAX_GENIE_EVENTS - 1;
 8002e00:	4b0a      	ldr	r3, [pc, #40]	; (8002e2c <genieDequeueEvent+0x6c>)
 8002e02:	2260      	movs	r2, #96	; 0x60
 8002e04:	5c9b      	ldrb	r3, [r3, r2]
 8002e06:	220f      	movs	r2, #15
 8002e08:	4013      	ands	r3, r2
 8002e0a:	b2d9      	uxtb	r1, r3
 8002e0c:	4b07      	ldr	r3, [pc, #28]	; (8002e2c <genieDequeueEvent+0x6c>)
 8002e0e:	2260      	movs	r2, #96	; 0x60
 8002e10:	5499      	strb	r1, [r3, r2]
        EventQueue.n_events--;
 8002e12:	4b06      	ldr	r3, [pc, #24]	; (8002e2c <genieDequeueEvent+0x6c>)
 8002e14:	2262      	movs	r2, #98	; 0x62
 8002e16:	5c9b      	ldrb	r3, [r3, r2]
 8002e18:	3b01      	subs	r3, #1
 8002e1a:	b2d9      	uxtb	r1, r3
 8002e1c:	4b03      	ldr	r3, [pc, #12]	; (8002e2c <genieDequeueEvent+0x6c>)
 8002e1e:	2262      	movs	r2, #98	; 0x62
 8002e20:	5499      	strb	r1, [r3, r2]
    }
    return false;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	0018      	movs	r0, r3
 8002e26:	46bd      	mov	sp, r7
 8002e28:	b002      	add	sp, #8
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	200001e4 	.word	0x200001e4

08002e30 <genieDoEvents>:

uint8_t genieDoEvents() {
 8002e30:	b590      	push	{r4, r7, lr}
 8002e32:	b087      	sub	sp, #28
 8002e34:	af00      	add	r7, sp, #0
    geniePing(); // used to keep lcd connection alive
 8002e36:	f000 fb7f 	bl	8003538 <geniePing>
//    if (UserDebuggerHandler != 0) UserDebuggerHandler("Genie Bytes Available : %i\r\n", genieGetByteCount());
    // ######################################
    // ## SLOW USER CODE? NO PROBLEM! #######
    // ######################################

    if (millis() - delayedCycles >= DISPLAY_TIMEOUT) {
 8002e3a:	f7ff f94d 	bl	80020d8 <millis>
 8002e3e:	0002      	movs	r2, r0
 8002e40:	4bd1      	ldr	r3, [pc, #836]	; (8003188 <genieDoEvents+0x358>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	4ad1      	ldr	r2, [pc, #836]	; (800318c <genieDoEvents+0x35c>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d904      	bls.n	8002e56 <genieDoEvents+0x26>
        displayDetectTimer = millis(); // reset counter to prevent false disconnections.
 8002e4c:	f7ff f944 	bl	80020d8 <millis>
 8002e50:	0002      	movs	r2, r0
 8002e52:	4bcf      	ldr	r3, [pc, #828]	; (8003190 <genieDoEvents+0x360>)
 8002e54:	601a      	str	r2, [r3, #0]
    }
    delayedCycles = millis(); // reset the doevents function timeout, every cycle.
 8002e56:	f7ff f93f 	bl	80020d8 <millis>
 8002e5a:	0002      	movs	r2, r0
 8002e5c:	4bca      	ldr	r3, [pc, #808]	; (8003188 <genieDoEvents+0x358>)
 8002e5e:	601a      	str	r2, [r3, #0]

    if (genieOnline()) {
 8002e60:	f000 fb56 	bl	8003510 <genieOnline>
 8002e64:	1e03      	subs	r3, r0, #0
 8002e66:	d038      	beq.n	8002eda <genieDoEvents+0xaa>
//        if (UserDebuggerHandler != 0) UserDebuggerHandler(" Current Time : %lu ms\r\nPrevious Time : %lu ms\r\n", millis(), displayDetectTimer);
        if (millis() - displayDetectTimer > DISPLAY_TIMEOUT) { // code online, but lcd is not?
 8002e68:	f7ff f936 	bl	80020d8 <millis>
 8002e6c:	0002      	movs	r2, r0
 8002e6e:	4bc8      	ldr	r3, [pc, #800]	; (8003190 <genieDoEvents+0x360>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	1ad2      	subs	r2, r2, r3
 8002e74:	23fa      	movs	r3, #250	; 0xfa
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d92e      	bls.n	8002eda <genieDoEvents+0xaa>
            displayDetectTimer = millis();
 8002e7c:	f7ff f92c 	bl	80020d8 <millis>
 8002e80:	0002      	movs	r2, r0
 8002e82:	4bc3      	ldr	r3, [pc, #780]	; (8003190 <genieDoEvents+0x360>)
 8002e84:	601a      	str	r2, [r3, #0]
            displayDetected = 0;
 8002e86:	4bc3      	ldr	r3, [pc, #780]	; (8003194 <genieDoEvents+0x364>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	701a      	strb	r2, [r3, #0]
            pingRequest = 0;
 8002e8c:	4bc2      	ldr	r3, [pc, #776]	; (8003198 <genieDoEvents+0x368>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	701a      	strb	r2, [r3, #0]
            rx_data[0] = GENIE_PING;
 8002e92:	1d3b      	adds	r3, r7, #4
 8002e94:	2280      	movs	r2, #128	; 0x80
 8002e96:	701a      	strb	r2, [r3, #0]
            rx_data[1] = GENIE_DISCONNECTED;
 8002e98:	1d3b      	adds	r3, r7, #4
 8002e9a:	2282      	movs	r2, #130	; 0x82
 8002e9c:	705a      	strb	r2, [r3, #1]
            rx_data[2] = 0;
 8002e9e:	1d3b      	adds	r3, r7, #4
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	709a      	strb	r2, [r3, #2]
            rx_data[3] = 0;
 8002ea4:	1d3b      	adds	r3, r7, #4
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	70da      	strb	r2, [r3, #3]
            rx_data[4] = 1;
 8002eaa:	1d3b      	adds	r3, r7, #4
 8002eac:	2201      	movs	r2, #1
 8002eae:	711a      	strb	r2, [r3, #4]
            rx_data[5] = 0;
 8002eb0:	1d3b      	adds	r3, r7, #4
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	715a      	strb	r2, [r3, #5]
            if (UserDebuggerHandler != 0) UserDebuggerHandler("Display was not responding for quite a while. Is it disconnected?\r\n");
 8002eb6:	4bb9      	ldr	r3, [pc, #740]	; (800319c <genieDoEvents+0x36c>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d004      	beq.n	8002ec8 <genieDoEvents+0x98>
 8002ebe:	4bb7      	ldr	r3, [pc, #732]	; (800319c <genieDoEvents+0x36c>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4ab7      	ldr	r2, [pc, #732]	; (80031a0 <genieDoEvents+0x370>)
 8002ec4:	0010      	movs	r0, r2
 8002ec6:	4798      	blx	r3
            genieEnqueueEvent(rx_data);
 8002ec8:	1d3b      	adds	r3, r7, #4
 8002eca:	0018      	movs	r0, r3
 8002ecc:	f000 fc06 	bl	80036dc <genieEnqueueEvent>
            currentForm = -1; // reset form holder
 8002ed0:	4bb4      	ldr	r3, [pc, #720]	; (80031a4 <genieDoEvents+0x374>)
 8002ed2:	22ff      	movs	r2, #255	; 0xff
 8002ed4:	701a      	strb	r2, [r3, #0]
            return -1;
 8002ed6:	23ff      	movs	r3, #255	; 0xff
 8002ed8:	e29a      	b.n	8003410 <genieDoEvents+0x5e0>
        }
    }

    if (!displayDetected) { // not online?
 8002eda:	4bae      	ldr	r3, [pc, #696]	; (8003194 <genieDoEvents+0x364>)
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d108      	bne.n	8002ef6 <genieDoEvents+0xc6>
        pendingACK = 0; // reset pending ACK check
 8002ee4:	4bb0      	ldr	r3, [pc, #704]	; (80031a8 <genieDoEvents+0x378>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	701a      	strb	r2, [r3, #0]
        currentForm = -1; // reset form holder
 8002eea:	4bae      	ldr	r3, [pc, #696]	; (80031a4 <genieDoEvents+0x374>)
 8002eec:	22ff      	movs	r2, #255	; 0xff
 8002eee:	701a      	strb	r2, [r3, #0]
        display_uptime = 0; // keeps timer reset
 8002ef0:	4bae      	ldr	r3, [pc, #696]	; (80031ac <genieDoEvents+0x37c>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	601a      	str	r2, [r3, #0]

    // ######################################
    // ## Main State Machine ################
    // ######################################

    if (genieGetByteCount() > 0) {
 8002ef6:	f7ff f8f7 	bl	80020e8 <genieGetByteCount>
 8002efa:	1e03      	subs	r3, r0, #0
 8002efc:	d100      	bne.n	8002f00 <genieDoEvents+0xd0>
 8002efe:	e268      	b.n	80033d2 <genieDoEvents+0x5a2>
        uint8_t b = geniePeekByte(); // Look at the next byte but don't pull it yet.
 8002f00:	2317      	movs	r3, #23
 8002f02:	18fc      	adds	r4, r7, r3
 8002f04:	f7ff f94e 	bl	80021a4 <geniePeekByte>
 8002f08:	0003      	movs	r3, r0
 8002f0a:	7023      	strb	r3, [r4, #0]
        if (!displayDetected && (b == GENIEM_REPORT_BYTES || b == GENIEM_REPORT_DBYTES))
 8002f0c:	4ba1      	ldr	r3, [pc, #644]	; (8003194 <genieDoEvents+0x364>)
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d10d      	bne.n	8002f32 <genieDoEvents+0x102>
 8002f16:	2317      	movs	r3, #23
 8002f18:	18fb      	adds	r3, r7, r3
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	2b0a      	cmp	r3, #10
 8002f1e:	d004      	beq.n	8002f2a <genieDoEvents+0xfa>
 8002f20:	2317      	movs	r3, #23
 8002f22:	18fb      	adds	r3, r7, r3
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	2b0b      	cmp	r3, #11
 8002f28:	d103      	bne.n	8002f32 <genieDoEvents+0x102>
            b = 0xFF; // force bad bytes instead of false triggering genie magic switches.
 8002f2a:	2317      	movs	r3, #23
 8002f2c:	18fb      	adds	r3, r7, r3
 8002f2e:	22ff      	movs	r2, #255	; 0xff
 8002f30:	701a      	strb	r2, [r3, #0]
        switch (b) { // We're going to parse what we see into the proper switch.
 8002f32:	2317      	movs	r3, #23
 8002f34:	18fb      	adds	r3, r7, r3
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	3b05      	subs	r3, #5
 8002f3a:	2b10      	cmp	r3, #16
 8002f3c:	d900      	bls.n	8002f40 <genieDoEvents+0x110>
 8002f3e:	e225      	b.n	800338c <genieDoEvents+0x55c>
 8002f40:	009a      	lsls	r2, r3, #2
 8002f42:	4b9b      	ldr	r3, [pc, #620]	; (80031b0 <genieDoEvents+0x380>)
 8002f44:	18d3      	adds	r3, r2, r3
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	469f      	mov	pc, r3

        case GENIE_ACK:
            displayDetectTimer = millis(); // reset display timeout since the packet is good.
 8002f4a:	f7ff f8c5 	bl	80020d8 <millis>
 8002f4e:	0002      	movs	r2, r0
 8002f50:	4b8f      	ldr	r3, [pc, #572]	; (8003190 <genieDoEvents+0x360>)
 8002f52:	601a      	str	r2, [r3, #0]
            genieGetByte(); // remove ACK
 8002f54:	f7ff f8f6 	bl	8002144 <genieGetByte>
            badByteCounter = 0; // reset the bad byte counter
 8002f58:	4b96      	ldr	r3, [pc, #600]	; (80031b4 <genieDoEvents+0x384>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	701a      	strb	r2, [r3, #0]
            pendingACK = 0;
 8002f5e:	4b92      	ldr	r3, [pc, #584]	; (80031a8 <genieDoEvents+0x378>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	701a      	strb	r2, [r3, #0]
            nakInj = 0; // reset NAK counter
 8002f64:	4b94      	ldr	r3, [pc, #592]	; (80031b8 <genieDoEvents+0x388>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	701a      	strb	r2, [r3, #0]
            return GENIE_ACK;
 8002f6a:	2306      	movs	r3, #6
 8002f6c:	e250      	b.n	8003410 <genieDoEvents+0x5e0>

        case GENIE_NAK:
            displayDetectTimer = millis(); // reset display timeout since the packet is good.
 8002f6e:	f7ff f8b3 	bl	80020d8 <millis>
 8002f72:	0002      	movs	r2, r0
 8002f74:	4b86      	ldr	r3, [pc, #536]	; (8003190 <genieDoEvents+0x360>)
 8002f76:	601a      	str	r2, [r3, #0]
            genieGetByte(); // remove NAK
 8002f78:	f7ff f8e4 	bl	8002144 <genieGetByte>
            nakInj++; // increment consecutive NAK counter.
 8002f7c:	4b8e      	ldr	r3, [pc, #568]	; (80031b8 <genieDoEvents+0x388>)
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	3301      	adds	r3, #1
 8002f84:	b2da      	uxtb	r2, r3
 8002f86:	4b8c      	ldr	r3, [pc, #560]	; (80031b8 <genieDoEvents+0x388>)
 8002f88:	701a      	strb	r2, [r3, #0]
            while (geniePeekByte() == GENIE_NAK)
 8002f8a:	e001      	b.n	8002f90 <genieDoEvents+0x160>
                genieGetByte(); // remove trailing naks for next test
 8002f8c:	f7ff f8da 	bl	8002144 <genieGetByte>
            while (geniePeekByte() == GENIE_NAK)
 8002f90:	f7ff f908 	bl	80021a4 <geniePeekByte>
 8002f94:	0003      	movs	r3, r0
 8002f96:	2b15      	cmp	r3, #21
 8002f98:	d0f8      	beq.n	8002f8c <genieDoEvents+0x15c>
            if (nakInj >= 2) { // if NAK's are consecutive 2 or more times...
 8002f9a:	4b87      	ldr	r3, [pc, #540]	; (80031b8 <genieDoEvents+0x388>)
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d905      	bls.n	8002fb0 <genieDoEvents+0x180>
                nakInj = 0; // reset the counter
 8002fa4:	4b84      	ldr	r3, [pc, #528]	; (80031b8 <genieDoEvents+0x388>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	701a      	strb	r2, [r3, #0]
                geniePutByte(0xFF); // inject a byte into the tx buffer to attempt recovery.
 8002faa:	20ff      	movs	r0, #255	; 0xff
 8002fac:	f7ff f8a8 	bl	8002100 <geniePutByte>
            }
            pendingACK = 0;
 8002fb0:	4b7d      	ldr	r3, [pc, #500]	; (80031a8 <genieDoEvents+0x378>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	701a      	strb	r2, [r3, #0]
            return GENIE_NAK;
 8002fb6:	2315      	movs	r3, #21
 8002fb8:	e22a      	b.n	8003410 <genieDoEvents+0x5e0>

        case GENIEM_REPORT_BYTES:
            if (genieGetByteCount() < 3)
 8002fba:	f7ff f895 	bl	80020e8 <genieGetByteCount>
 8002fbe:	0003      	movs	r3, r0
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d800      	bhi.n	8002fc6 <genieDoEvents+0x196>
 8002fc4:	e207      	b.n	80033d6 <genieDoEvents+0x5a6>
                break; // magic report event less than 3 bytes? check again.
            rx_data[0] = genieGetByte();
 8002fc6:	f7ff f8bd 	bl	8002144 <genieGetByte>
 8002fca:	0003      	movs	r3, r0
 8002fcc:	001a      	movs	r2, r3
 8002fce:	1d3b      	adds	r3, r7, #4
 8002fd0:	701a      	strb	r2, [r3, #0]
            rx_data[1] = genieGetByte();
 8002fd2:	f7ff f8b7 	bl	8002144 <genieGetByte>
 8002fd6:	0003      	movs	r3, r0
 8002fd8:	001a      	movs	r2, r3
 8002fda:	1d3b      	adds	r3, r7, #4
 8002fdc:	705a      	strb	r2, [r3, #1]
            rx_data[2] = genieGetByte();
 8002fde:	f7ff f8b1 	bl	8002144 <genieGetByte>
 8002fe2:	0003      	movs	r3, r0
 8002fe4:	001a      	movs	r2, r3
 8002fe6:	1d3b      	adds	r3, r7, #4
 8002fe8:	709a      	strb	r2, [r3, #2]
            displayDetectTimer = millis(); // reset display timeout since the packet is good.
 8002fea:	f7ff f875 	bl	80020d8 <millis>
 8002fee:	0002      	movs	r2, r0
 8002ff0:	4b67      	ldr	r3, [pc, #412]	; (8003190 <genieDoEvents+0x360>)
 8002ff2:	601a      	str	r2, [r3, #0]
            badByteCounter = 0; // reset the bad byte counter
 8002ff4:	4b6f      	ldr	r3, [pc, #444]	; (80031b4 <genieDoEvents+0x384>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	701a      	strb	r2, [r3, #0]
            if (UserMagicByteHandler != NULL)
 8002ffa:	4b70      	ldr	r3, [pc, #448]	; (80031bc <genieDoEvents+0x38c>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d008      	beq.n	8003014 <genieDoEvents+0x1e4>
                UserMagicByteHandler(rx_data[1], rx_data[2]);
 8003002:	4b6e      	ldr	r3, [pc, #440]	; (80031bc <genieDoEvents+0x38c>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	1d3a      	adds	r2, r7, #4
 8003008:	7850      	ldrb	r0, [r2, #1]
 800300a:	1d3a      	adds	r2, r7, #4
 800300c:	7892      	ldrb	r2, [r2, #2]
 800300e:	0011      	movs	r1, r2
 8003010:	4798      	blx	r3
 8003012:	e00d      	b.n	8003030 <genieDoEvents+0x200>
            else
                for (int i = 0; i < rx_data[2]; i++)
 8003014:	2300      	movs	r3, #0
 8003016:	613b      	str	r3, [r7, #16]
 8003018:	e004      	b.n	8003024 <genieDoEvents+0x1f4>
                    genieGetByte();
 800301a:	f7ff f893 	bl	8002144 <genieGetByte>
                for (int i = 0; i < rx_data[2]; i++)
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	3301      	adds	r3, #1
 8003022:	613b      	str	r3, [r7, #16]
 8003024:	1d3b      	adds	r3, r7, #4
 8003026:	789b      	ldrb	r3, [r3, #2]
 8003028:	001a      	movs	r2, r3
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	4293      	cmp	r3, r2
 800302e:	dbf4      	blt.n	800301a <genieDoEvents+0x1ea>
            (void)genieGetNextByte();
 8003030:	f000 fae0 	bl	80035f4 <genieGetNextByte>
            return GENIEM_REPORT_BYTES;
 8003034:	230a      	movs	r3, #10
 8003036:	e1eb      	b.n	8003410 <genieDoEvents+0x5e0>

        case GENIEM_REPORT_DBYTES:
            if (genieGetByteCount() < 3)
 8003038:	f7ff f856 	bl	80020e8 <genieGetByteCount>
 800303c:	0003      	movs	r3, r0
 800303e:	2b02      	cmp	r3, #2
 8003040:	d800      	bhi.n	8003044 <genieDoEvents+0x214>
 8003042:	e1ca      	b.n	80033da <genieDoEvents+0x5aa>
                break; // magic report event less than 3 bytes? check again.
            rx_data[0] = genieGetByte();
 8003044:	f7ff f87e 	bl	8002144 <genieGetByte>
 8003048:	0003      	movs	r3, r0
 800304a:	001a      	movs	r2, r3
 800304c:	1d3b      	adds	r3, r7, #4
 800304e:	701a      	strb	r2, [r3, #0]
            rx_data[1] = genieGetByte();
 8003050:	f7ff f878 	bl	8002144 <genieGetByte>
 8003054:	0003      	movs	r3, r0
 8003056:	001a      	movs	r2, r3
 8003058:	1d3b      	adds	r3, r7, #4
 800305a:	705a      	strb	r2, [r3, #1]
            rx_data[2] = genieGetByte();
 800305c:	f7ff f872 	bl	8002144 <genieGetByte>
 8003060:	0003      	movs	r3, r0
 8003062:	001a      	movs	r2, r3
 8003064:	1d3b      	adds	r3, r7, #4
 8003066:	709a      	strb	r2, [r3, #2]
            displayDetectTimer = millis(); // reset display timeout since the packet is good.
 8003068:	f7ff f836 	bl	80020d8 <millis>
 800306c:	0002      	movs	r2, r0
 800306e:	4b48      	ldr	r3, [pc, #288]	; (8003190 <genieDoEvents+0x360>)
 8003070:	601a      	str	r2, [r3, #0]
            badByteCounter = 0; // reset the bad byte counter
 8003072:	4b50      	ldr	r3, [pc, #320]	; (80031b4 <genieDoEvents+0x384>)
 8003074:	2200      	movs	r2, #0
 8003076:	701a      	strb	r2, [r3, #0]
            if (UserMagicDByteHandler != NULL)
 8003078:	4b51      	ldr	r3, [pc, #324]	; (80031c0 <genieDoEvents+0x390>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d008      	beq.n	8003092 <genieDoEvents+0x262>
                UserMagicDByteHandler(rx_data[1], rx_data[2]);
 8003080:	4b4f      	ldr	r3, [pc, #316]	; (80031c0 <genieDoEvents+0x390>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	1d3a      	adds	r2, r7, #4
 8003086:	7850      	ldrb	r0, [r2, #1]
 8003088:	1d3a      	adds	r2, r7, #4
 800308a:	7892      	ldrb	r2, [r2, #2]
 800308c:	0011      	movs	r1, r2
 800308e:	4798      	blx	r3
 8003090:	e00d      	b.n	80030ae <genieDoEvents+0x27e>
            else
                for (int i = 0; i < 2 * rx_data[2]; i++)
 8003092:	2300      	movs	r3, #0
 8003094:	60fb      	str	r3, [r7, #12]
 8003096:	e004      	b.n	80030a2 <genieDoEvents+0x272>
                    genieGetByte();
 8003098:	f7ff f854 	bl	8002144 <genieGetByte>
                for (int i = 0; i < 2 * rx_data[2]; i++)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	3301      	adds	r3, #1
 80030a0:	60fb      	str	r3, [r7, #12]
 80030a2:	1d3b      	adds	r3, r7, #4
 80030a4:	789b      	ldrb	r3, [r3, #2]
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	dbf4      	blt.n	8003098 <genieDoEvents+0x268>
            (void)genieGetNextByte();
 80030ae:	f000 faa1 	bl	80035f4 <genieGetNextByte>
            return GENIEM_REPORT_DBYTES;
 80030b2:	230b      	movs	r3, #11
 80030b4:	e1ac      	b.n	8003410 <genieDoEvents+0x5e0>

        case GENIE_REPORT_EVENT:
            if (genieGetByteCount() < 6)
 80030b6:	f7ff f817 	bl	80020e8 <genieGetByteCount>
 80030ba:	0003      	movs	r3, r0
 80030bc:	2b05      	cmp	r3, #5
 80030be:	d800      	bhi.n	80030c2 <genieDoEvents+0x292>
 80030c0:	e18d      	b.n	80033de <genieDoEvents+0x5ae>
                break; // report event less than 6 bytes? check again.
            rx_data[0] = genieGetByte();
 80030c2:	f7ff f83f 	bl	8002144 <genieGetByte>
 80030c6:	0003      	movs	r3, r0
 80030c8:	001a      	movs	r2, r3
 80030ca:	1d3b      	adds	r3, r7, #4
 80030cc:	701a      	strb	r2, [r3, #0]
            rx_data[1] = genieGetByte();
 80030ce:	f7ff f839 	bl	8002144 <genieGetByte>
 80030d2:	0003      	movs	r3, r0
 80030d4:	001a      	movs	r2, r3
 80030d6:	1d3b      	adds	r3, r7, #4
 80030d8:	705a      	strb	r2, [r3, #1]
            rx_data[2] = genieGetByte();
 80030da:	f7ff f833 	bl	8002144 <genieGetByte>
 80030de:	0003      	movs	r3, r0
 80030e0:	001a      	movs	r2, r3
 80030e2:	1d3b      	adds	r3, r7, #4
 80030e4:	709a      	strb	r2, [r3, #2]
            rx_data[3] = genieGetByte();
 80030e6:	f7ff f82d 	bl	8002144 <genieGetByte>
 80030ea:	0003      	movs	r3, r0
 80030ec:	001a      	movs	r2, r3
 80030ee:	1d3b      	adds	r3, r7, #4
 80030f0:	70da      	strb	r2, [r3, #3]
            rx_data[4] = genieGetByte();
 80030f2:	f7ff f827 	bl	8002144 <genieGetByte>
 80030f6:	0003      	movs	r3, r0
 80030f8:	001a      	movs	r2, r3
 80030fa:	1d3b      	adds	r3, r7, #4
 80030fc:	711a      	strb	r2, [r3, #4]
            rx_data[5] = genieGetByte();
 80030fe:	f7ff f821 	bl	8002144 <genieGetByte>
 8003102:	0003      	movs	r3, r0
 8003104:	001a      	movs	r2, r3
 8003106:	1d3b      	adds	r3, r7, #4
 8003108:	715a      	strb	r2, [r3, #5]
            checksumVerify = rx_data[0];
 800310a:	200b      	movs	r0, #11
 800310c:	183b      	adds	r3, r7, r0
 800310e:	1d3a      	adds	r2, r7, #4
 8003110:	7812      	ldrb	r2, [r2, #0]
 8003112:	701a      	strb	r2, [r3, #0]
            checksumVerify ^= rx_data[1];
 8003114:	1d3b      	adds	r3, r7, #4
 8003116:	7859      	ldrb	r1, [r3, #1]
 8003118:	183b      	adds	r3, r7, r0
 800311a:	183a      	adds	r2, r7, r0
 800311c:	7812      	ldrb	r2, [r2, #0]
 800311e:	404a      	eors	r2, r1
 8003120:	701a      	strb	r2, [r3, #0]
            checksumVerify ^= rx_data[2];
 8003122:	1d3b      	adds	r3, r7, #4
 8003124:	7899      	ldrb	r1, [r3, #2]
 8003126:	183b      	adds	r3, r7, r0
 8003128:	183a      	adds	r2, r7, r0
 800312a:	7812      	ldrb	r2, [r2, #0]
 800312c:	404a      	eors	r2, r1
 800312e:	701a      	strb	r2, [r3, #0]
            checksumVerify ^= rx_data[3];
 8003130:	1d3b      	adds	r3, r7, #4
 8003132:	78d9      	ldrb	r1, [r3, #3]
 8003134:	183b      	adds	r3, r7, r0
 8003136:	183a      	adds	r2, r7, r0
 8003138:	7812      	ldrb	r2, [r2, #0]
 800313a:	404a      	eors	r2, r1
 800313c:	701a      	strb	r2, [r3, #0]
            checksumVerify ^= rx_data[4];
 800313e:	1d3b      	adds	r3, r7, #4
 8003140:	7919      	ldrb	r1, [r3, #4]
 8003142:	183b      	adds	r3, r7, r0
 8003144:	183a      	adds	r2, r7, r0
 8003146:	7812      	ldrb	r2, [r2, #0]
 8003148:	404a      	eors	r2, r1
 800314a:	701a      	strb	r2, [r3, #0]
            if (checksumVerify != rx_data[5])
 800314c:	1d3b      	adds	r3, r7, #4
 800314e:	795b      	ldrb	r3, [r3, #5]
 8003150:	183a      	adds	r2, r7, r0
 8003152:	7812      	ldrb	r2, [r2, #0]
 8003154:	429a      	cmp	r2, r3
 8003156:	d001      	beq.n	800315c <genieDoEvents+0x32c>
                return 0; //discard this packet, CRC is bad.
 8003158:	2300      	movs	r3, #0
 800315a:	e159      	b.n	8003410 <genieDoEvents+0x5e0>
            displayDetectTimer = millis(); // reset display timeout since the packet is good.
 800315c:	f7fe ffbc 	bl	80020d8 <millis>
 8003160:	0002      	movs	r2, r0
 8003162:	4b0b      	ldr	r3, [pc, #44]	; (8003190 <genieDoEvents+0x360>)
 8003164:	601a      	str	r2, [r3, #0]
            badByteCounter = 0; // reset the bad byte counter
 8003166:	4b13      	ldr	r3, [pc, #76]	; (80031b4 <genieDoEvents+0x384>)
 8003168:	2200      	movs	r2, #0
 800316a:	701a      	strb	r2, [r3, #0]
            if (rx_data[1] == GENIE_OBJ_FORM)
 800316c:	1d3b      	adds	r3, r7, #4
 800316e:	785b      	ldrb	r3, [r3, #1]
 8003170:	2b0a      	cmp	r3, #10
 8003172:	d103      	bne.n	800317c <genieDoEvents+0x34c>
                currentForm = rx_data[2];
 8003174:	1d3b      	adds	r3, r7, #4
 8003176:	789a      	ldrb	r2, [r3, #2]
 8003178:	4b0a      	ldr	r3, [pc, #40]	; (80031a4 <genieDoEvents+0x374>)
 800317a:	701a      	strb	r2, [r3, #0]
            genieEnqueueEvent(rx_data);
 800317c:	1d3b      	adds	r3, r7, #4
 800317e:	0018      	movs	r0, r3
 8003180:	f000 faac 	bl	80036dc <genieEnqueueEvent>
            return GENIE_REPORT_EVENT;
 8003184:	2307      	movs	r3, #7
 8003186:	e143      	b.n	8003410 <genieDoEvents+0x5e0>
 8003188:	200002bc 	.word	0x200002bc
 800318c:	000007cf 	.word	0x000007cf
 8003190:	2000016c 	.word	0x2000016c
 8003194:	200002c0 	.word	0x200002c0
 8003198:	200001d4 	.word	0x200001d4
 800319c:	200000ac 	.word	0x200000ac
 80031a0:	0800421c 	.word	0x0800421c
 80031a4:	200002c1 	.word	0x200002c1
 80031a8:	200000b0 	.word	0x200000b0
 80031ac:	200000a8 	.word	0x200000a8
 80031b0:	08004408 	.word	0x08004408
 80031b4:	20000247 	.word	0x20000247
 80031b8:	200001e0 	.word	0x200001e0
 80031bc:	200000a4 	.word	0x200000a4
 80031c0:	200002b8 	.word	0x200002b8

        case GENIE_REPORT_OBJ:
            if (genieGetByteCount() < 6) {
 80031c4:	f7fe ff90 	bl	80020e8 <genieGetByteCount>
 80031c8:	0003      	movs	r3, r0
 80031ca:	2b05      	cmp	r3, #5
 80031cc:	d800      	bhi.n	80031d0 <genieDoEvents+0x3a0>
 80031ce:	e108      	b.n	80033e2 <genieDoEvents+0x5b2>
            //	if (UserDebuggerHandler != 0) UserDebuggerHandler("Genie Report Object has not enough bytes: %i\r\n", genieGetByteCount());
                break; // report event less than 6 bytes? check again.
            }
            rx_data[0] = genieGetByte();
 80031d0:	f7fe ffb8 	bl	8002144 <genieGetByte>
 80031d4:	0003      	movs	r3, r0
 80031d6:	001a      	movs	r2, r3
 80031d8:	1d3b      	adds	r3, r7, #4
 80031da:	701a      	strb	r2, [r3, #0]
            rx_data[1] = genieGetByte();
 80031dc:	f7fe ffb2 	bl	8002144 <genieGetByte>
 80031e0:	0003      	movs	r3, r0
 80031e2:	001a      	movs	r2, r3
 80031e4:	1d3b      	adds	r3, r7, #4
 80031e6:	705a      	strb	r2, [r3, #1]
            rx_data[2] = genieGetByte();
 80031e8:	f7fe ffac 	bl	8002144 <genieGetByte>
 80031ec:	0003      	movs	r3, r0
 80031ee:	001a      	movs	r2, r3
 80031f0:	1d3b      	adds	r3, r7, #4
 80031f2:	709a      	strb	r2, [r3, #2]
            rx_data[3] = genieGetByte();
 80031f4:	f7fe ffa6 	bl	8002144 <genieGetByte>
 80031f8:	0003      	movs	r3, r0
 80031fa:	001a      	movs	r2, r3
 80031fc:	1d3b      	adds	r3, r7, #4
 80031fe:	70da      	strb	r2, [r3, #3]
            rx_data[4] = genieGetByte();
 8003200:	f7fe ffa0 	bl	8002144 <genieGetByte>
 8003204:	0003      	movs	r3, r0
 8003206:	001a      	movs	r2, r3
 8003208:	1d3b      	adds	r3, r7, #4
 800320a:	711a      	strb	r2, [r3, #4]
            rx_data[5] = genieGetByte();
 800320c:	f7fe ff9a 	bl	8002144 <genieGetByte>
 8003210:	0003      	movs	r3, r0
 8003212:	001a      	movs	r2, r3
 8003214:	1d3b      	adds	r3, r7, #4
 8003216:	715a      	strb	r2, [r3, #5]
            checksumVerify = rx_data[0];
 8003218:	200b      	movs	r0, #11
 800321a:	183b      	adds	r3, r7, r0
 800321c:	1d3a      	adds	r2, r7, #4
 800321e:	7812      	ldrb	r2, [r2, #0]
 8003220:	701a      	strb	r2, [r3, #0]
            checksumVerify ^= rx_data[1];
 8003222:	1d3b      	adds	r3, r7, #4
 8003224:	7859      	ldrb	r1, [r3, #1]
 8003226:	183b      	adds	r3, r7, r0
 8003228:	183a      	adds	r2, r7, r0
 800322a:	7812      	ldrb	r2, [r2, #0]
 800322c:	404a      	eors	r2, r1
 800322e:	701a      	strb	r2, [r3, #0]
            checksumVerify ^= rx_data[2];
 8003230:	1d3b      	adds	r3, r7, #4
 8003232:	7899      	ldrb	r1, [r3, #2]
 8003234:	183b      	adds	r3, r7, r0
 8003236:	183a      	adds	r2, r7, r0
 8003238:	7812      	ldrb	r2, [r2, #0]
 800323a:	404a      	eors	r2, r1
 800323c:	701a      	strb	r2, [r3, #0]
            checksumVerify ^= rx_data[3];
 800323e:	1d3b      	adds	r3, r7, #4
 8003240:	78d9      	ldrb	r1, [r3, #3]
 8003242:	183b      	adds	r3, r7, r0
 8003244:	183a      	adds	r2, r7, r0
 8003246:	7812      	ldrb	r2, [r2, #0]
 8003248:	404a      	eors	r2, r1
 800324a:	701a      	strb	r2, [r3, #0]
            checksumVerify ^= rx_data[4];
 800324c:	1d3b      	adds	r3, r7, #4
 800324e:	7919      	ldrb	r1, [r3, #4]
 8003250:	183b      	adds	r3, r7, r0
 8003252:	183a      	adds	r2, r7, r0
 8003254:	7812      	ldrb	r2, [r2, #0]
 8003256:	404a      	eors	r2, r1
 8003258:	701a      	strb	r2, [r3, #0]
            if (checksumVerify != rx_data[5]){
 800325a:	1d3b      	adds	r3, r7, #4
 800325c:	795b      	ldrb	r3, [r3, #5]
 800325e:	183a      	adds	r2, r7, r0
 8003260:	7812      	ldrb	r2, [r2, #0]
 8003262:	429a      	cmp	r2, r3
 8003264:	d00a      	beq.n	800327c <genieDoEvents+0x44c>
            	if (UserDebuggerHandler != 0) UserDebuggerHandler("Genie Report Object has bad CRC\r\n");
 8003266:	4b6c      	ldr	r3, [pc, #432]	; (8003418 <genieDoEvents+0x5e8>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d004      	beq.n	8003278 <genieDoEvents+0x448>
 800326e:	4b6a      	ldr	r3, [pc, #424]	; (8003418 <genieDoEvents+0x5e8>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a6a      	ldr	r2, [pc, #424]	; (800341c <genieDoEvents+0x5ec>)
 8003274:	0010      	movs	r0, r2
 8003276:	4798      	blx	r3
            	return 0; //discard this packet, CRC is bad.
 8003278:	2300      	movs	r3, #0
 800327a:	e0c9      	b.n	8003410 <genieDoEvents+0x5e0>
            }

            displayDetectTimer = millis(); // reset display timeout since the packet is good.
 800327c:	f7fe ff2c 	bl	80020d8 <millis>
 8003280:	0002      	movs	r2, r0
 8003282:	4b67      	ldr	r3, [pc, #412]	; (8003420 <genieDoEvents+0x5f0>)
 8003284:	601a      	str	r2, [r3, #0]
            badByteCounter = 0; // reset the bad byte counter
 8003286:	4b67      	ldr	r3, [pc, #412]	; (8003424 <genieDoEvents+0x5f4>)
 8003288:	2200      	movs	r2, #0
 800328a:	701a      	strb	r2, [r3, #0]
            if (rx_data[1] == GENIE_OBJ_FORM) {
 800328c:	1d3b      	adds	r3, r7, #4
 800328e:	785b      	ldrb	r3, [r3, #1]
 8003290:	2b0a      	cmp	r3, #10
 8003292:	d10c      	bne.n	80032ae <genieDoEvents+0x47e>
                currentForm = rx_data[4];
 8003294:	1d3b      	adds	r3, r7, #4
 8003296:	791a      	ldrb	r2, [r3, #4]
 8003298:	4b63      	ldr	r3, [pc, #396]	; (8003428 <genieDoEvents+0x5f8>)
 800329a:	701a      	strb	r2, [r3, #0]
                if (UserDebuggerHandler != 0) UserDebuggerHandler("Got Current Form\r\n");
 800329c:	4b5e      	ldr	r3, [pc, #376]	; (8003418 <genieDoEvents+0x5e8>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d004      	beq.n	80032ae <genieDoEvents+0x47e>
 80032a4:	4b5c      	ldr	r3, [pc, #368]	; (8003418 <genieDoEvents+0x5e8>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a60      	ldr	r2, [pc, #384]	; (800342c <genieDoEvents+0x5fc>)
 80032aa:	0010      	movs	r0, r2
 80032ac:	4798      	blx	r3
            }
            // if ( genieStart ) { genieStart = 0; return GENIE_REPORT_OBJ; } // disable startup form checker

            if ((autoPing || pingRequest) && rx_data[1] == GENIE_OBJ_FORM) {
 80032ae:	4b60      	ldr	r3, [pc, #384]	; (8003430 <genieDoEvents+0x600>)
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d104      	bne.n	80032c2 <genieDoEvents+0x492>
 80032b8:	4b5e      	ldr	r3, [pc, #376]	; (8003434 <genieDoEvents+0x604>)
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d05e      	beq.n	8003380 <genieDoEvents+0x550>
 80032c2:	1d3b      	adds	r3, r7, #4
 80032c4:	785b      	ldrb	r3, [r3, #1]
 80032c6:	2b0a      	cmp	r3, #10
 80032c8:	d15a      	bne.n	8003380 <genieDoEvents+0x550>
                if (autoPing) {
 80032ca:	4b59      	ldr	r3, [pc, #356]	; (8003430 <genieDoEvents+0x600>)
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d036      	beq.n	8003342 <genieDoEvents+0x512>
                    autoPing = 0; //switch off after queueing event
 80032d4:	4b56      	ldr	r3, [pc, #344]	; (8003430 <genieDoEvents+0x600>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	701a      	strb	r2, [r3, #0]
                    if (!displayDetected) { // if previously disconnected and now is connected...
 80032da:	4b57      	ldr	r3, [pc, #348]	; (8003438 <genieDoEvents+0x608>)
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d124      	bne.n	800332e <genieDoEvents+0x4fe>
                        display_uptime = millis(); // start uptime timer (ms)
 80032e4:	f7fe fef8 	bl	80020d8 <millis>
 80032e8:	0002      	movs	r2, r0
 80032ea:	4b54      	ldr	r3, [pc, #336]	; (800343c <genieDoEvents+0x60c>)
 80032ec:	601a      	str	r2, [r3, #0]
                        rx_data[0] = GENIE_PING;
 80032ee:	1d3b      	adds	r3, r7, #4
 80032f0:	2280      	movs	r2, #128	; 0x80
 80032f2:	701a      	strb	r2, [r3, #0]
                        rx_data[1] = GENIE_READY;
 80032f4:	1d3b      	adds	r3, r7, #4
 80032f6:	2281      	movs	r2, #129	; 0x81
 80032f8:	705a      	strb	r2, [r3, #1]
                        rx_data[2] = 0;
 80032fa:	1d3b      	adds	r3, r7, #4
 80032fc:	2200      	movs	r2, #0
 80032fe:	709a      	strb	r2, [r3, #2]
                        rx_data[3] = 0;
 8003300:	1d3b      	adds	r3, r7, #4
 8003302:	2200      	movs	r2, #0
 8003304:	70da      	strb	r2, [r3, #3]
                        rx_data[4] = 0;
 8003306:	1d3b      	adds	r3, r7, #4
 8003308:	2200      	movs	r2, #0
 800330a:	711a      	strb	r2, [r3, #4]
                        rx_data[5] = 0;
 800330c:	1d3b      	adds	r3, r7, #4
 800330e:	2200      	movs	r2, #0
 8003310:	715a      	strb	r2, [r3, #5]
                        genieEnqueueEvent(rx_data); // send ready state to user handler.
 8003312:	1d3b      	adds	r3, r7, #4
 8003314:	0018      	movs	r0, r3
 8003316:	f000 f9e1 	bl	80036dc <genieEnqueueEvent>
                        while (genieGetByteCount() > 0)
 800331a:	e001      	b.n	8003320 <genieDoEvents+0x4f0>
                            genieGetByte(); // clear on new connect
 800331c:	f7fe ff12 	bl	8002144 <genieGetByte>
                        while (genieGetByteCount() > 0)
 8003320:	f7fe fee2 	bl	80020e8 <genieGetByteCount>
 8003324:	1e03      	subs	r3, r0, #0
 8003326:	d1f9      	bne.n	800331c <genieDoEvents+0x4ec>
                        displayDetected = 1; // turn on functions
 8003328:	4b43      	ldr	r3, [pc, #268]	; (8003438 <genieDoEvents+0x608>)
 800332a:	2201      	movs	r2, #1
 800332c:	701a      	strb	r2, [r3, #0]
                    }
                    if (genieStart) {
 800332e:	4b44      	ldr	r3, [pc, #272]	; (8003440 <genieDoEvents+0x610>)
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	b2db      	uxtb	r3, r3
 8003334:	2b00      	cmp	r3, #0
 8003336:	d056      	beq.n	80033e6 <genieDoEvents+0x5b6>
                        genieStart = 0;
 8003338:	4b41      	ldr	r3, [pc, #260]	; (8003440 <genieDoEvents+0x610>)
 800333a:	2200      	movs	r2, #0
 800333c:	701a      	strb	r2, [r3, #0]
                        return GENIE_REPORT_OBJ;
 800333e:	2305      	movs	r3, #5
 8003340:	e066      	b.n	8003410 <genieDoEvents+0x5e0>
                    }
                    break;
                }

                if (pingRequest) {
 8003342:	4b3c      	ldr	r3, [pc, #240]	; (8003434 <genieDoEvents+0x604>)
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	b2db      	uxtb	r3, r3
 8003348:	2b00      	cmp	r3, #0
 800334a:	d04e      	beq.n	80033ea <genieDoEvents+0x5ba>
                    pingRequest = 0; //switch off after queueing event
 800334c:	4b39      	ldr	r3, [pc, #228]	; (8003434 <genieDoEvents+0x604>)
 800334e:	2200      	movs	r2, #0
 8003350:	701a      	strb	r2, [r3, #0]
                    rx_data[0] = GENIE_PING;
 8003352:	1d3b      	adds	r3, r7, #4
 8003354:	2280      	movs	r2, #128	; 0x80
 8003356:	701a      	strb	r2, [r3, #0]
                    rx_data[1] = GENIE_ACK;
 8003358:	1d3b      	adds	r3, r7, #4
 800335a:	2206      	movs	r2, #6
 800335c:	705a      	strb	r2, [r3, #1]
                    rx_data[2] = 0;
 800335e:	1d3b      	adds	r3, r7, #4
 8003360:	2200      	movs	r2, #0
 8003362:	709a      	strb	r2, [r3, #2]
                    rx_data[3] = 0;
 8003364:	1d3b      	adds	r3, r7, #4
 8003366:	2200      	movs	r2, #0
 8003368:	70da      	strb	r2, [r3, #3]
                    rx_data[4] = 0;
 800336a:	1d3b      	adds	r3, r7, #4
 800336c:	2200      	movs	r2, #0
 800336e:	711a      	strb	r2, [r3, #4]
                    rx_data[5] = 0;
 8003370:	1d3b      	adds	r3, r7, #4
 8003372:	2200      	movs	r2, #0
 8003374:	715a      	strb	r2, [r3, #5]
                    genieEnqueueEvent(rx_data); // send ACK to user ping request in handler.
 8003376:	1d3b      	adds	r3, r7, #4
 8003378:	0018      	movs	r0, r3
 800337a:	f000 f9af 	bl	80036dc <genieEnqueueEvent>
                }
                break;
 800337e:	e034      	b.n	80033ea <genieDoEvents+0x5ba>
            }

            genieEnqueueEvent(rx_data);
 8003380:	1d3b      	adds	r3, r7, #4
 8003382:	0018      	movs	r0, r3
 8003384:	f000 f9aa 	bl	80036dc <genieEnqueueEvent>
            return GENIE_REPORT_OBJ; // all other reading of object data flow to event handler
 8003388:	2305      	movs	r3, #5
 800338a:	e041      	b.n	8003410 <genieDoEvents+0x5e0>

        default: // unknown bytes found, shift out and start count for possible disconnection.
//            uint8_t bad_byte = genieGetByte();
        	(void) genieGetByte();
 800338c:	f7fe feda 	bl	8002144 <genieGetByte>
            badByteCounter++; // We count consecutively to 10 bytes in a row and assume display offline.
 8003390:	4b24      	ldr	r3, [pc, #144]	; (8003424 <genieDoEvents+0x5f4>)
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	b2db      	uxtb	r3, r3
 8003396:	3301      	adds	r3, #1
 8003398:	b2da      	uxtb	r2, r3
 800339a:	4b22      	ldr	r3, [pc, #136]	; (8003424 <genieDoEvents+0x5f4>)
 800339c:	701a      	strb	r2, [r3, #0]
            if (badByteCounter > 10) {
 800339e:	4b21      	ldr	r3, [pc, #132]	; (8003424 <genieDoEvents+0x5f4>)
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	2b0a      	cmp	r3, #10
 80033a6:	d912      	bls.n	80033ce <genieDoEvents+0x59e>
                badByteCounter = 0; // let DoEvents do the disconnection.
 80033a8:	4b1e      	ldr	r3, [pc, #120]	; (8003424 <genieDoEvents+0x5f4>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	701a      	strb	r2, [r3, #0]
                if (UserDebuggerHandler != 0) UserDebuggerHandler("Bad bytes received. Manual disconnect\r\n");
 80033ae:	4b1a      	ldr	r3, [pc, #104]	; (8003418 <genieDoEvents+0x5e8>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d004      	beq.n	80033c0 <genieDoEvents+0x590>
 80033b6:	4b18      	ldr	r3, [pc, #96]	; (8003418 <genieDoEvents+0x5e8>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a22      	ldr	r2, [pc, #136]	; (8003444 <genieDoEvents+0x614>)
 80033bc:	0010      	movs	r0, r2
 80033be:	4798      	blx	r3
                displayDetectTimer = millis() + DISPLAY_TIMEOUT + 10000;
 80033c0:	f7fe fe8a 	bl	80020d8 <millis>
 80033c4:	0003      	movs	r3, r0
 80033c6:	4a20      	ldr	r2, [pc, #128]	; (8003448 <genieDoEvents+0x618>)
 80033c8:	189a      	adds	r2, r3, r2
 80033ca:	4b15      	ldr	r3, [pc, #84]	; (8003420 <genieDoEvents+0x5f0>)
 80033cc:	601a      	str	r2, [r3, #0]
            }
            return GENIE_NAK;
 80033ce:	2315      	movs	r3, #21
 80033d0:	e01e      	b.n	8003410 <genieDoEvents+0x5e0>
        }
    }
 80033d2:	46c0      	nop			; (mov r8, r8)
 80033d4:	e00a      	b.n	80033ec <genieDoEvents+0x5bc>
                break; // magic report event less than 3 bytes? check again.
 80033d6:	46c0      	nop			; (mov r8, r8)
 80033d8:	e008      	b.n	80033ec <genieDoEvents+0x5bc>
                break; // magic report event less than 3 bytes? check again.
 80033da:	46c0      	nop			; (mov r8, r8)
 80033dc:	e006      	b.n	80033ec <genieDoEvents+0x5bc>
                break; // report event less than 6 bytes? check again.
 80033de:	46c0      	nop			; (mov r8, r8)
 80033e0:	e004      	b.n	80033ec <genieDoEvents+0x5bc>
                break; // report event less than 6 bytes? check again.
 80033e2:	46c0      	nop			; (mov r8, r8)
 80033e4:	e002      	b.n	80033ec <genieDoEvents+0x5bc>
                    break;
 80033e6:	46c0      	nop			; (mov r8, r8)
 80033e8:	e000      	b.n	80033ec <genieDoEvents+0x5bc>
                break;
 80033ea:	46c0      	nop			; (mov r8, r8)
    if (!pendingACK && EventQueue.n_events > 0 && UserHandler != NULL)
 80033ec:	4b17      	ldr	r3, [pc, #92]	; (800344c <genieDoEvents+0x61c>)
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d10b      	bne.n	800340e <genieDoEvents+0x5de>
 80033f6:	4b16      	ldr	r3, [pc, #88]	; (8003450 <genieDoEvents+0x620>)
 80033f8:	2262      	movs	r2, #98	; 0x62
 80033fa:	5c9b      	ldrb	r3, [r3, r2]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d006      	beq.n	800340e <genieDoEvents+0x5de>
 8003400:	4b14      	ldr	r3, [pc, #80]	; (8003454 <genieDoEvents+0x624>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d002      	beq.n	800340e <genieDoEvents+0x5de>
        UserHandler(); // trigger userhandler if queues exist.
 8003408:	4b12      	ldr	r3, [pc, #72]	; (8003454 <genieDoEvents+0x624>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4798      	blx	r3
    return 0;
 800340e:	2300      	movs	r3, #0
}
 8003410:	0018      	movs	r0, r3
 8003412:	46bd      	mov	sp, r7
 8003414:	b007      	add	sp, #28
 8003416:	bd90      	pop	{r4, r7, pc}
 8003418:	200000ac 	.word	0x200000ac
 800341c:	08004260 	.word	0x08004260
 8003420:	2000016c 	.word	0x2000016c
 8003424:	20000247 	.word	0x20000247
 8003428:	200002c1 	.word	0x200002c1
 800342c:	08004284 	.word	0x08004284
 8003430:	200000f9 	.word	0x200000f9
 8003434:	200001d4 	.word	0x200001d4
 8003438:	200002c0 	.word	0x200002c0
 800343c:	200000a8 	.word	0x200000a8
 8003440:	2000009c 	.word	0x2000009c
 8003444:	08004298 	.word	0x08004298
 8003448:	00002ee0 	.word	0x00002ee0
 800344c:	200000b0 	.word	0x200000b0
 8003450:	200001e4 	.word	0x200001e4
 8003454:	200001dc 	.word	0x200001dc

08003458 <genieAttachDebugger>:

void genieAttachDebugger(UserDebuggerHandlerPtr handler) {
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
	UserDebuggerHandler = handler;
 8003460:	4b03      	ldr	r3, [pc, #12]	; (8003470 <genieAttachDebugger+0x18>)
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	601a      	str	r2, [r3, #0]
}
 8003466:	46c0      	nop			; (mov r8, r8)
 8003468:	46bd      	mov	sp, r7
 800346a:	b002      	add	sp, #8
 800346c:	bd80      	pop	{r7, pc}
 800346e:	46c0      	nop			; (mov r8, r8)
 8003470:	200000ac 	.word	0x200000ac

08003474 <genieAttachEventHandler>:

void genieAttachEventHandler(UserEventHandlerPtr handler) {
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
    UserHandler = handler;
 800347c:	4b20      	ldr	r3, [pc, #128]	; (8003500 <genieAttachEventHandler+0x8c>)
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	601a      	str	r2, [r3, #0]
    uint8_t rx_data[6];
    // display status already collected from Begin function, user just enabled handler, so give a status.
    if (displayDetected) {
 8003482:	4b20      	ldr	r3, [pc, #128]	; (8003504 <genieAttachEventHandler+0x90>)
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	b2db      	uxtb	r3, r3
 8003488:	2b00      	cmp	r3, #0
 800348a:	d013      	beq.n	80034b4 <genieAttachEventHandler+0x40>
        rx_data[0] = GENIE_PING;
 800348c:	2108      	movs	r1, #8
 800348e:	187b      	adds	r3, r7, r1
 8003490:	2280      	movs	r2, #128	; 0x80
 8003492:	701a      	strb	r2, [r3, #0]
        rx_data[1] = GENIE_READY;
 8003494:	187b      	adds	r3, r7, r1
 8003496:	2281      	movs	r2, #129	; 0x81
 8003498:	705a      	strb	r2, [r3, #1]
        rx_data[2] = 0;
 800349a:	187b      	adds	r3, r7, r1
 800349c:	2200      	movs	r2, #0
 800349e:	709a      	strb	r2, [r3, #2]
        rx_data[3] = 0;
 80034a0:	187b      	adds	r3, r7, r1
 80034a2:	2200      	movs	r2, #0
 80034a4:	70da      	strb	r2, [r3, #3]
        rx_data[4] = 0;
 80034a6:	187b      	adds	r3, r7, r1
 80034a8:	2200      	movs	r2, #0
 80034aa:	711a      	strb	r2, [r3, #4]
        rx_data[5] = 0;
 80034ac:	187b      	adds	r3, r7, r1
 80034ae:	2200      	movs	r2, #0
 80034b0:	715a      	strb	r2, [r3, #5]
 80034b2:	e01b      	b.n	80034ec <genieAttachEventHandler+0x78>
    }
    else {
        rx_data[0] = GENIE_PING;
 80034b4:	2108      	movs	r1, #8
 80034b6:	187b      	adds	r3, r7, r1
 80034b8:	2280      	movs	r2, #128	; 0x80
 80034ba:	701a      	strb	r2, [r3, #0]
        rx_data[1] = GENIE_DISCONNECTED;
 80034bc:	187b      	adds	r3, r7, r1
 80034be:	2282      	movs	r2, #130	; 0x82
 80034c0:	705a      	strb	r2, [r3, #1]
        rx_data[2] = 0;
 80034c2:	187b      	adds	r3, r7, r1
 80034c4:	2200      	movs	r2, #0
 80034c6:	709a      	strb	r2, [r3, #2]
        rx_data[3] = 0;
 80034c8:	187b      	adds	r3, r7, r1
 80034ca:	2200      	movs	r2, #0
 80034cc:	70da      	strb	r2, [r3, #3]
        rx_data[4] = 0;
 80034ce:	187b      	adds	r3, r7, r1
 80034d0:	2200      	movs	r2, #0
 80034d2:	711a      	strb	r2, [r3, #4]
        rx_data[5] = 0;
 80034d4:	187b      	adds	r3, r7, r1
 80034d6:	2200      	movs	r2, #0
 80034d8:	715a      	strb	r2, [r3, #5]
        if (UserDebuggerHandler != 0) UserDebuggerHandler("Display was disconnected while attaching event handler\r\n");
 80034da:	4b0b      	ldr	r3, [pc, #44]	; (8003508 <genieAttachEventHandler+0x94>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d004      	beq.n	80034ec <genieAttachEventHandler+0x78>
 80034e2:	4b09      	ldr	r3, [pc, #36]	; (8003508 <genieAttachEventHandler+0x94>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a09      	ldr	r2, [pc, #36]	; (800350c <genieAttachEventHandler+0x98>)
 80034e8:	0010      	movs	r0, r2
 80034ea:	4798      	blx	r3
    }
    genieEnqueueEvent(rx_data); // send current state to user handler.
 80034ec:	2308      	movs	r3, #8
 80034ee:	18fb      	adds	r3, r7, r3
 80034f0:	0018      	movs	r0, r3
 80034f2:	f000 f8f3 	bl	80036dc <genieEnqueueEvent>
}
 80034f6:	46c0      	nop			; (mov r8, r8)
 80034f8:	46bd      	mov	sp, r7
 80034fa:	b004      	add	sp, #16
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	46c0      	nop			; (mov r8, r8)
 8003500:	200001dc 	.word	0x200001dc
 8003504:	200002c0 	.word	0x200002c0
 8003508:	200000ac 	.word	0x200000ac
 800350c:	080042c0 	.word	0x080042c0

08003510 <genieOnline>:
void genieAttachMagicDoubleByteReader(UserMagicDByteHandlerPtr handler) {
    UserMagicDByteHandler = handler;
}


bool genieOnline() {
 8003510:	b580      	push	{r7, lr}
 8003512:	af00      	add	r7, sp, #0
    return displayDetected;
 8003514:	4b02      	ldr	r3, [pc, #8]	; (8003520 <genieOnline+0x10>)
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	b2db      	uxtb	r3, r3
}
 800351a:	0018      	movs	r0, r3
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	200002c0 	.word	0x200002c0

08003524 <genieCurrentForm>:
        return millis() - display_uptime;
    else
        return 0;
}

uint8_t	genieCurrentForm() {
 8003524:	b580      	push	{r7, lr}
 8003526:	af00      	add	r7, sp, #0
	return currentForm;
 8003528:	4b02      	ldr	r3, [pc, #8]	; (8003534 <genieCurrentForm+0x10>)
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	b2db      	uxtb	r3, r3
}
 800352e:	0018      	movs	r0, r3
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	200002c1 	.word	0x200002c1

08003538 <geniePing>:
        return 0; // no less than 50 recommended! this will trigger the disconnect flag!
    GENIE_CMD_TIMEOUT = value;
    return 1;
}

uint8_t geniePing() {
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
    uint16_t geniePingTimerChanger;
    if (displayDetected)
 800353e:	4b26      	ldr	r3, [pc, #152]	; (80035d8 <geniePing+0xa0>)
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	b2db      	uxtb	r3, r3
 8003544:	2b00      	cmp	r3, #0
 8003546:	d002      	beq.n	800354e <geniePing+0x16>
        geniePingTimerChanger = AUTO_PING_CYCLE; // preset online pinger
 8003548:	1dbb      	adds	r3, r7, #6
 800354a:	4a24      	ldr	r2, [pc, #144]	; (80035dc <geniePing+0xa4>)
 800354c:	801a      	strh	r2, [r3, #0]
    if (!displayDetected)
 800354e:	4b22      	ldr	r3, [pc, #136]	; (80035d8 <geniePing+0xa0>)
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	b2db      	uxtb	r3, r3
 8003554:	2b00      	cmp	r3, #0
 8003556:	d104      	bne.n	8003562 <geniePing+0x2a>
        geniePingTimerChanger = recover_pulse; // 50ms offline pinger
 8003558:	4b21      	ldr	r3, [pc, #132]	; (80035e0 <geniePing+0xa8>)
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	b2da      	uxtb	r2, r3
 800355e:	1dbb      	adds	r3, r7, #6
 8003560:	801a      	strh	r2, [r3, #0]
    if (millis() - autoPingTimer > geniePingTimerChanger) {
 8003562:	f7fe fdb9 	bl	80020d8 <millis>
 8003566:	0002      	movs	r2, r0
 8003568:	4b1e      	ldr	r3, [pc, #120]	; (80035e4 <geniePing+0xac>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	1ad2      	subs	r2, r2, r3
 800356e:	1dbb      	adds	r3, r7, #6
 8003570:	881b      	ldrh	r3, [r3, #0]
 8003572:	429a      	cmp	r2, r3
 8003574:	d92b      	bls.n	80035ce <geniePing+0x96>
        autoPingTimer = millis();
 8003576:	f7fe fdaf 	bl	80020d8 <millis>
 800357a:	0002      	movs	r2, r0
 800357c:	4b19      	ldr	r3, [pc, #100]	; (80035e4 <geniePing+0xac>)
 800357e:	601a      	str	r2, [r3, #0]
        autoPing = 1;
 8003580:	4b19      	ldr	r3, [pc, #100]	; (80035e8 <geniePing+0xb0>)
 8003582:	2201      	movs	r2, #1
 8003584:	701a      	strb	r2, [r3, #0]
        uint8_t checksum;
        geniePutByte((uint8_t)GENIE_READ_OBJ);
 8003586:	2000      	movs	r0, #0
 8003588:	f7fe fdba 	bl	8002100 <geniePutByte>
        checksum = GENIE_READ_OBJ;
 800358c:	1d7b      	adds	r3, r7, #5
 800358e:	2200      	movs	r2, #0
 8003590:	701a      	strb	r2, [r3, #0]
        geniePutByte((uint8_t)GENIE_OBJ_FORM);
 8003592:	200a      	movs	r0, #10
 8003594:	f7fe fdb4 	bl	8002100 <geniePutByte>
        checksum ^= (uint8_t)GENIE_OBJ_FORM;
 8003598:	1d7b      	adds	r3, r7, #5
 800359a:	1d7a      	adds	r2, r7, #5
 800359c:	7812      	ldrb	r2, [r2, #0]
 800359e:	210a      	movs	r1, #10
 80035a0:	404a      	eors	r2, r1
 80035a2:	701a      	strb	r2, [r3, #0]
        geniePutByte((uint8_t)0x00);
 80035a4:	2000      	movs	r0, #0
 80035a6:	f7fe fdab 	bl	8002100 <geniePutByte>
        checksum ^= (uint8_t)0x00;
 80035aa:	1d7b      	adds	r3, r7, #5
 80035ac:	1d7a      	adds	r2, r7, #5
 80035ae:	7812      	ldrb	r2, [r2, #0]
 80035b0:	701a      	strb	r2, [r3, #0]
        geniePutByte(checksum);
 80035b2:	1d7b      	adds	r3, r7, #5
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	0018      	movs	r0, r3
 80035b8:	f7fe fda2 	bl	8002100 <geniePutByte>
        if (UserDebuggerHandler != 0) UserDebuggerHandler("Sending Read Form as Ping\r\n");
 80035bc:	4b0b      	ldr	r3, [pc, #44]	; (80035ec <geniePing+0xb4>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d004      	beq.n	80035ce <geniePing+0x96>
 80035c4:	4b09      	ldr	r3, [pc, #36]	; (80035ec <geniePing+0xb4>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a09      	ldr	r2, [pc, #36]	; (80035f0 <geniePing+0xb8>)
 80035ca:	0010      	movs	r0, r2
 80035cc:	4798      	blx	r3
    }
    return 1;
 80035ce:	2301      	movs	r3, #1
}
 80035d0:	0018      	movs	r0, r3
 80035d2:	46bd      	mov	sp, r7
 80035d4:	b002      	add	sp, #8
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	200002c0 	.word	0x200002c0
 80035dc:	000004e2 	.word	0x000004e2
 80035e0:	200001e1 	.word	0x200001e1
 80035e4:	200001d8 	.word	0x200001d8
 80035e8:	200000f9 	.word	0x200000f9
 80035ec:	200000ac 	.word	0x200000ac
 80035f0:	080042fc 	.word	0x080042fc

080035f4 <genieGetNextByte>:
    if (UserDebuggerHandler != 0) UserDebuggerHandler("Write Magic Double Bytes didn't receive any reply\r\n");
	displayDetectTimer = millis() + DISPLAY_TIMEOUT + 10000; //manual disconnect
	return -1; // timeout
}

uint8_t genieGetNextByte(void) {
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
    if (!displayDetected)
 80035fa:	4b32      	ldr	r3, [pc, #200]	; (80036c4 <genieGetNextByte+0xd0>)
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	2b00      	cmp	r3, #0
 8003602:	d101      	bne.n	8003608 <genieGetNextByte+0x14>
        return -1; // user code may keep requesting, block till ready.
 8003604:	23ff      	movs	r3, #255	; 0xff
 8003606:	e058      	b.n	80036ba <genieGetNextByte+0xc6>
    uint8_t rx_data[6];
    uint32_t timeout = millis();
 8003608:	f7fe fd66 	bl	80020d8 <millis>
 800360c:	0003      	movs	r3, r0
 800360e:	60fb      	str	r3, [r7, #12]
    while (genieGetByteCount() < 1) {
 8003610:	e042      	b.n	8003698 <genieGetNextByte+0xa4>
        delayedCycles = millis();
 8003612:	f7fe fd61 	bl	80020d8 <millis>
 8003616:	0002      	movs	r2, r0
 8003618:	4b2b      	ldr	r3, [pc, #172]	; (80036c8 <genieGetNextByte+0xd4>)
 800361a:	601a      	str	r2, [r3, #0]
        displayDetectTimer = millis();
 800361c:	f7fe fd5c 	bl	80020d8 <millis>
 8003620:	0002      	movs	r2, r0
 8003622:	4b2a      	ldr	r3, [pc, #168]	; (80036cc <genieGetNextByte+0xd8>)
 8003624:	601a      	str	r2, [r3, #0]
        if (millis() - timeout >= 2000) { // we issue an immediate manual disconnect.
 8003626:	f7fe fd57 	bl	80020d8 <millis>
 800362a:	0002      	movs	r2, r0
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	4a27      	ldr	r2, [pc, #156]	; (80036d0 <genieGetNextByte+0xdc>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d92f      	bls.n	8003696 <genieGetNextByte+0xa2>
            displayDetectTimer = millis();
 8003636:	f7fe fd4f 	bl	80020d8 <millis>
 800363a:	0002      	movs	r2, r0
 800363c:	4b23      	ldr	r3, [pc, #140]	; (80036cc <genieGetNextByte+0xd8>)
 800363e:	601a      	str	r2, [r3, #0]
            displayDetected = 0;
 8003640:	4b20      	ldr	r3, [pc, #128]	; (80036c4 <genieGetNextByte+0xd0>)
 8003642:	2200      	movs	r2, #0
 8003644:	701a      	strb	r2, [r3, #0]
            while (genieGetByteCount() > 0)
 8003646:	e001      	b.n	800364c <genieGetNextByte+0x58>
                genieGetByte();
 8003648:	f7fe fd7c 	bl	8002144 <genieGetByte>
            while (genieGetByteCount() > 0)
 800364c:	f7fe fd4c 	bl	80020e8 <genieGetByteCount>
 8003650:	1e03      	subs	r3, r0, #0
 8003652:	d1f9      	bne.n	8003648 <genieGetNextByte+0x54>
            rx_data[0] = GENIE_PING;
 8003654:	1d3b      	adds	r3, r7, #4
 8003656:	2280      	movs	r2, #128	; 0x80
 8003658:	701a      	strb	r2, [r3, #0]
            rx_data[1] = GENIE_DISCONNECTED;
 800365a:	1d3b      	adds	r3, r7, #4
 800365c:	2282      	movs	r2, #130	; 0x82
 800365e:	705a      	strb	r2, [r3, #1]
            rx_data[2] = 0;
 8003660:	1d3b      	adds	r3, r7, #4
 8003662:	2200      	movs	r2, #0
 8003664:	709a      	strb	r2, [r3, #2]
            rx_data[3] = 0;
 8003666:	1d3b      	adds	r3, r7, #4
 8003668:	2200      	movs	r2, #0
 800366a:	70da      	strb	r2, [r3, #3]
            rx_data[4] = 0;
 800366c:	1d3b      	adds	r3, r7, #4
 800366e:	2200      	movs	r2, #0
 8003670:	711a      	strb	r2, [r3, #4]
            rx_data[5] = 0;
 8003672:	1d3b      	adds	r3, r7, #4
 8003674:	2200      	movs	r2, #0
 8003676:	715a      	strb	r2, [r3, #5]
            if (UserDebuggerHandler != 0) UserDebuggerHandler("Display was disconnected while waiting for next byte\r\n");
 8003678:	4b16      	ldr	r3, [pc, #88]	; (80036d4 <genieGetNextByte+0xe0>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d004      	beq.n	800368a <genieGetNextByte+0x96>
 8003680:	4b14      	ldr	r3, [pc, #80]	; (80036d4 <genieGetNextByte+0xe0>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a14      	ldr	r2, [pc, #80]	; (80036d8 <genieGetNextByte+0xe4>)
 8003686:	0010      	movs	r0, r2
 8003688:	4798      	blx	r3
            genieEnqueueEvent(rx_data);
 800368a:	1d3b      	adds	r3, r7, #4
 800368c:	0018      	movs	r0, r3
 800368e:	f000 f825 	bl	80036dc <genieEnqueueEvent>
            return -1;
 8003692:	23ff      	movs	r3, #255	; 0xff
 8003694:	e011      	b.n	80036ba <genieGetNextByte+0xc6>
        }
        continue;
 8003696:	46c0      	nop			; (mov r8, r8)
    while (genieGetByteCount() < 1) {
 8003698:	f7fe fd26 	bl	80020e8 <genieGetByteCount>
 800369c:	1e03      	subs	r3, r0, #0
 800369e:	d0b8      	beq.n	8003612 <genieGetNextByte+0x1e>
    }
    delayedCycles = millis();
 80036a0:	f7fe fd1a 	bl	80020d8 <millis>
 80036a4:	0002      	movs	r2, r0
 80036a6:	4b08      	ldr	r3, [pc, #32]	; (80036c8 <genieGetNextByte+0xd4>)
 80036a8:	601a      	str	r2, [r3, #0]
    displayDetectTimer = millis();
 80036aa:	f7fe fd15 	bl	80020d8 <millis>
 80036ae:	0002      	movs	r2, r0
 80036b0:	4b06      	ldr	r3, [pc, #24]	; (80036cc <genieGetNextByte+0xd8>)
 80036b2:	601a      	str	r2, [r3, #0]
    return genieGetByte();
 80036b4:	f7fe fd46 	bl	8002144 <genieGetByte>
 80036b8:	0003      	movs	r3, r0
}
 80036ba:	0018      	movs	r0, r3
 80036bc:	46bd      	mov	sp, r7
 80036be:	b004      	add	sp, #16
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	46c0      	nop			; (mov r8, r8)
 80036c4:	200002c0 	.word	0x200002c0
 80036c8:	200002bc 	.word	0x200002bc
 80036cc:	2000016c 	.word	0x2000016c
 80036d0:	000007cf 	.word	0x000007cf
 80036d4:	200000ac 	.word	0x200000ac
 80036d8:	0800437c 	.word	0x0800437c

080036dc <genieEnqueueEvent>:
}


// Private Functions

uint8_t genieEnqueueEvent(uint8_t * data) {
 80036dc:	b580      	push	{r7, lr}
 80036de:	b086      	sub	sp, #24
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
    if (EventQueue.n_events < MAX_GENIE_EVENTS - 2) {
 80036e4:	4b4d      	ldr	r3, [pc, #308]	; (800381c <genieEnqueueEvent+0x140>)
 80036e6:	2262      	movs	r2, #98	; 0x62
 80036e8:	5c9b      	ldrb	r3, [r3, r2]
 80036ea:	2b0d      	cmp	r3, #13
 80036ec:	d900      	bls.n	80036f0 <genieEnqueueEvent+0x14>
 80036ee:	e08f      	b.n	8003810 <genieEnqueueEvent+0x134>
        int i, j;
        bool fnd = 0;
 80036f0:	230f      	movs	r3, #15
 80036f2:	18fb      	adds	r3, r7, r3
 80036f4:	2200      	movs	r2, #0
 80036f6:	701a      	strb	r2, [r3, #0]
        j = EventQueue.wr_index;
 80036f8:	4b48      	ldr	r3, [pc, #288]	; (800381c <genieEnqueueEvent+0x140>)
 80036fa:	2261      	movs	r2, #97	; 0x61
 80036fc:	5c9b      	ldrb	r3, [r3, r2]
 80036fe:	613b      	str	r3, [r7, #16]
        for (i = EventQueue.n_events; i > 0; i--) {
 8003700:	4b46      	ldr	r3, [pc, #280]	; (800381c <genieEnqueueEvent+0x140>)
 8003702:	2262      	movs	r2, #98	; 0x62
 8003704:	5c9b      	ldrb	r3, [r3, r2]
 8003706:	617b      	str	r3, [r7, #20]
 8003708:	e04e      	b.n	80037a8 <genieEnqueueEvent+0xcc>
            j--;
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	3b01      	subs	r3, #1
 800370e:	613b      	str	r3, [r7, #16]
            if (j < 0)
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	2b00      	cmp	r3, #0
 8003714:	da01      	bge.n	800371a <genieEnqueueEvent+0x3e>
                j = MAX_GENIE_EVENTS - 1;
 8003716:	230f      	movs	r3, #15
 8003718:	613b      	str	r3, [r7, #16]
            if ((EventQueue.frames[j].reportObject.cmd == data[0]) && (EventQueue.frames[j].reportObject.object == data[1]) && (EventQueue.frames[j].reportObject.index == data[2])) {
 800371a:	4940      	ldr	r1, [pc, #256]	; (800381c <genieEnqueueEvent+0x140>)
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	0013      	movs	r3, r2
 8003720:	005b      	lsls	r3, r3, #1
 8003722:	189b      	adds	r3, r3, r2
 8003724:	005b      	lsls	r3, r3, #1
 8003726:	5c5a      	ldrb	r2, [r3, r1]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	429a      	cmp	r2, r3
 800372e:	d138      	bne.n	80037a2 <genieEnqueueEvent+0xc6>
 8003730:	493a      	ldr	r1, [pc, #232]	; (800381c <genieEnqueueEvent+0x140>)
 8003732:	693a      	ldr	r2, [r7, #16]
 8003734:	0013      	movs	r3, r2
 8003736:	005b      	lsls	r3, r3, #1
 8003738:	189b      	adds	r3, r3, r2
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	18cb      	adds	r3, r1, r3
 800373e:	3301      	adds	r3, #1
 8003740:	781a      	ldrb	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	3301      	adds	r3, #1
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	429a      	cmp	r2, r3
 800374a:	d12a      	bne.n	80037a2 <genieEnqueueEvent+0xc6>
 800374c:	4933      	ldr	r1, [pc, #204]	; (800381c <genieEnqueueEvent+0x140>)
 800374e:	693a      	ldr	r2, [r7, #16]
 8003750:	0013      	movs	r3, r2
 8003752:	005b      	lsls	r3, r3, #1
 8003754:	189b      	adds	r3, r3, r2
 8003756:	005b      	lsls	r3, r3, #1
 8003758:	18cb      	adds	r3, r1, r3
 800375a:	3302      	adds	r3, #2
 800375c:	781a      	ldrb	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	3302      	adds	r3, #2
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	429a      	cmp	r2, r3
 8003766:	d11c      	bne.n	80037a2 <genieEnqueueEvent+0xc6>
                EventQueue.frames[j].reportObject.data_msb = data[3];
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	78d8      	ldrb	r0, [r3, #3]
 800376c:	492b      	ldr	r1, [pc, #172]	; (800381c <genieEnqueueEvent+0x140>)
 800376e:	693a      	ldr	r2, [r7, #16]
 8003770:	0013      	movs	r3, r2
 8003772:	005b      	lsls	r3, r3, #1
 8003774:	189b      	adds	r3, r3, r2
 8003776:	005b      	lsls	r3, r3, #1
 8003778:	18cb      	adds	r3, r1, r3
 800377a:	3303      	adds	r3, #3
 800377c:	1c02      	adds	r2, r0, #0
 800377e:	701a      	strb	r2, [r3, #0]
                EventQueue.frames[j].reportObject.data_lsb = data[4];
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	7918      	ldrb	r0, [r3, #4]
 8003784:	4925      	ldr	r1, [pc, #148]	; (800381c <genieEnqueueEvent+0x140>)
 8003786:	693a      	ldr	r2, [r7, #16]
 8003788:	0013      	movs	r3, r2
 800378a:	005b      	lsls	r3, r3, #1
 800378c:	189b      	adds	r3, r3, r2
 800378e:	005b      	lsls	r3, r3, #1
 8003790:	18cb      	adds	r3, r1, r3
 8003792:	3304      	adds	r3, #4
 8003794:	1c02      	adds	r2, r0, #0
 8003796:	701a      	strb	r2, [r3, #0]
                fnd = 1;
 8003798:	230f      	movs	r3, #15
 800379a:	18fb      	adds	r3, r7, r3
 800379c:	2201      	movs	r2, #1
 800379e:	701a      	strb	r2, [r3, #0]
                break;
 80037a0:	e005      	b.n	80037ae <genieEnqueueEvent+0xd2>
        for (i = EventQueue.n_events; i > 0; i--) {
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	3b01      	subs	r3, #1
 80037a6:	617b      	str	r3, [r7, #20]
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	dcad      	bgt.n	800370a <genieEnqueueEvent+0x2e>
            }
        }
        if (!fnd) {
 80037ae:	230f      	movs	r3, #15
 80037b0:	18fb      	adds	r3, r7, r3
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d127      	bne.n	8003808 <genieEnqueueEvent+0x12c>
            memcpy(&EventQueue.frames[EventQueue.wr_index], data, GENIE_FRAME_SIZE);
 80037b8:	4b18      	ldr	r3, [pc, #96]	; (800381c <genieEnqueueEvent+0x140>)
 80037ba:	2261      	movs	r2, #97	; 0x61
 80037bc:	5c9b      	ldrb	r3, [r3, r2]
 80037be:	001a      	movs	r2, r3
 80037c0:	0013      	movs	r3, r2
 80037c2:	005b      	lsls	r3, r3, #1
 80037c4:	189b      	adds	r3, r3, r2
 80037c6:	005b      	lsls	r3, r3, #1
 80037c8:	4a14      	ldr	r2, [pc, #80]	; (800381c <genieEnqueueEvent+0x140>)
 80037ca:	189b      	adds	r3, r3, r2
 80037cc:	6879      	ldr	r1, [r7, #4]
 80037ce:	2206      	movs	r2, #6
 80037d0:	0018      	movs	r0, r3
 80037d2:	f000 f879 	bl	80038c8 <memcpy>
            EventQueue.wr_index++;
 80037d6:	4b11      	ldr	r3, [pc, #68]	; (800381c <genieEnqueueEvent+0x140>)
 80037d8:	2261      	movs	r2, #97	; 0x61
 80037da:	5c9b      	ldrb	r3, [r3, r2]
 80037dc:	3301      	adds	r3, #1
 80037de:	b2d9      	uxtb	r1, r3
 80037e0:	4b0e      	ldr	r3, [pc, #56]	; (800381c <genieEnqueueEvent+0x140>)
 80037e2:	2261      	movs	r2, #97	; 0x61
 80037e4:	5499      	strb	r1, [r3, r2]
            EventQueue.wr_index &= MAX_GENIE_EVENTS - 1;
 80037e6:	4b0d      	ldr	r3, [pc, #52]	; (800381c <genieEnqueueEvent+0x140>)
 80037e8:	2261      	movs	r2, #97	; 0x61
 80037ea:	5c9b      	ldrb	r3, [r3, r2]
 80037ec:	220f      	movs	r2, #15
 80037ee:	4013      	ands	r3, r2
 80037f0:	b2d9      	uxtb	r1, r3
 80037f2:	4b0a      	ldr	r3, [pc, #40]	; (800381c <genieEnqueueEvent+0x140>)
 80037f4:	2261      	movs	r2, #97	; 0x61
 80037f6:	5499      	strb	r1, [r3, r2]
            EventQueue.n_events++;
 80037f8:	4b08      	ldr	r3, [pc, #32]	; (800381c <genieEnqueueEvent+0x140>)
 80037fa:	2262      	movs	r2, #98	; 0x62
 80037fc:	5c9b      	ldrb	r3, [r3, r2]
 80037fe:	3301      	adds	r3, #1
 8003800:	b2d9      	uxtb	r1, r3
 8003802:	4b06      	ldr	r3, [pc, #24]	; (800381c <genieEnqueueEvent+0x140>)
 8003804:	2262      	movs	r2, #98	; 0x62
 8003806:	5499      	strb	r1, [r3, r2]
        }
        return fnd;
 8003808:	230f      	movs	r3, #15
 800380a:	18fb      	adds	r3, r7, r3
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	e000      	b.n	8003812 <genieEnqueueEvent+0x136>
    }
    return false;
 8003810:	2300      	movs	r3, #0
}
 8003812:	0018      	movs	r0, r3
 8003814:	46bd      	mov	sp, r7
 8003816:	b006      	add	sp, #24
 8003818:	bd80      	pop	{r7, pc}
 800381a:	46c0      	nop			; (mov r8, r8)
 800381c:	200001e4 	.word	0x200001e4

08003820 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003820:	480d      	ldr	r0, [pc, #52]	; (8003858 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003822:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003824:	480d      	ldr	r0, [pc, #52]	; (800385c <LoopForever+0x6>)
  ldr r1, =_edata
 8003826:	490e      	ldr	r1, [pc, #56]	; (8003860 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003828:	4a0e      	ldr	r2, [pc, #56]	; (8003864 <LoopForever+0xe>)
  movs r3, #0
 800382a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800382c:	e002      	b.n	8003834 <LoopCopyDataInit>

0800382e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800382e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003830:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003832:	3304      	adds	r3, #4

08003834 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003834:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003836:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003838:	d3f9      	bcc.n	800382e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800383a:	4a0b      	ldr	r2, [pc, #44]	; (8003868 <LoopForever+0x12>)
  ldr r4, =_ebss
 800383c:	4c0b      	ldr	r4, [pc, #44]	; (800386c <LoopForever+0x16>)
  movs r3, #0
 800383e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003840:	e001      	b.n	8003846 <LoopFillZerobss>

08003842 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003842:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003844:	3204      	adds	r2, #4

08003846 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003846:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003848:	d3fb      	bcc.n	8003842 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800384a:	f7fe ffdf 	bl	800280c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800384e:	f000 f817 	bl	8003880 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003852:	f7fe fd27 	bl	80022a4 <main>

08003856 <LoopForever>:

LoopForever:
    b LoopForever
 8003856:	e7fe      	b.n	8003856 <LoopForever>
  ldr   r0, =_estack
 8003858:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800385c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003860:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8003864:	08004488 	.word	0x08004488
  ldr r2, =_sbss
 8003868:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800386c:	200002c8 	.word	0x200002c8

08003870 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003870:	e7fe      	b.n	8003870 <ADC1_IRQHandler>
	...

08003874 <__errno>:
 8003874:	4b01      	ldr	r3, [pc, #4]	; (800387c <__errno+0x8>)
 8003876:	6818      	ldr	r0, [r3, #0]
 8003878:	4770      	bx	lr
 800387a:	46c0      	nop			; (mov r8, r8)
 800387c:	20000008 	.word	0x20000008

08003880 <__libc_init_array>:
 8003880:	b570      	push	{r4, r5, r6, lr}
 8003882:	2600      	movs	r6, #0
 8003884:	4d0c      	ldr	r5, [pc, #48]	; (80038b8 <__libc_init_array+0x38>)
 8003886:	4c0d      	ldr	r4, [pc, #52]	; (80038bc <__libc_init_array+0x3c>)
 8003888:	1b64      	subs	r4, r4, r5
 800388a:	10a4      	asrs	r4, r4, #2
 800388c:	42a6      	cmp	r6, r4
 800388e:	d109      	bne.n	80038a4 <__libc_init_array+0x24>
 8003890:	2600      	movs	r6, #0
 8003892:	f000 fc3f 	bl	8004114 <_init>
 8003896:	4d0a      	ldr	r5, [pc, #40]	; (80038c0 <__libc_init_array+0x40>)
 8003898:	4c0a      	ldr	r4, [pc, #40]	; (80038c4 <__libc_init_array+0x44>)
 800389a:	1b64      	subs	r4, r4, r5
 800389c:	10a4      	asrs	r4, r4, #2
 800389e:	42a6      	cmp	r6, r4
 80038a0:	d105      	bne.n	80038ae <__libc_init_array+0x2e>
 80038a2:	bd70      	pop	{r4, r5, r6, pc}
 80038a4:	00b3      	lsls	r3, r6, #2
 80038a6:	58eb      	ldr	r3, [r5, r3]
 80038a8:	4798      	blx	r3
 80038aa:	3601      	adds	r6, #1
 80038ac:	e7ee      	b.n	800388c <__libc_init_array+0xc>
 80038ae:	00b3      	lsls	r3, r6, #2
 80038b0:	58eb      	ldr	r3, [r5, r3]
 80038b2:	4798      	blx	r3
 80038b4:	3601      	adds	r6, #1
 80038b6:	e7f2      	b.n	800389e <__libc_init_array+0x1e>
 80038b8:	08004480 	.word	0x08004480
 80038bc:	08004480 	.word	0x08004480
 80038c0:	08004480 	.word	0x08004480
 80038c4:	08004484 	.word	0x08004484

080038c8 <memcpy>:
 80038c8:	2300      	movs	r3, #0
 80038ca:	b510      	push	{r4, lr}
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d100      	bne.n	80038d2 <memcpy+0xa>
 80038d0:	bd10      	pop	{r4, pc}
 80038d2:	5ccc      	ldrb	r4, [r1, r3]
 80038d4:	54c4      	strb	r4, [r0, r3]
 80038d6:	3301      	adds	r3, #1
 80038d8:	e7f8      	b.n	80038cc <memcpy+0x4>

080038da <memset>:
 80038da:	0003      	movs	r3, r0
 80038dc:	1812      	adds	r2, r2, r0
 80038de:	4293      	cmp	r3, r2
 80038e0:	d100      	bne.n	80038e4 <memset+0xa>
 80038e2:	4770      	bx	lr
 80038e4:	7019      	strb	r1, [r3, #0]
 80038e6:	3301      	adds	r3, #1
 80038e8:	e7f9      	b.n	80038de <memset+0x4>

080038ea <_vsniprintf_r>:
 80038ea:	b530      	push	{r4, r5, lr}
 80038ec:	0014      	movs	r4, r2
 80038ee:	b09b      	sub	sp, #108	; 0x6c
 80038f0:	0005      	movs	r5, r0
 80038f2:	001a      	movs	r2, r3
 80038f4:	2c00      	cmp	r4, #0
 80038f6:	da05      	bge.n	8003904 <_vsniprintf_r+0x1a>
 80038f8:	238b      	movs	r3, #139	; 0x8b
 80038fa:	6003      	str	r3, [r0, #0]
 80038fc:	2001      	movs	r0, #1
 80038fe:	4240      	negs	r0, r0
 8003900:	b01b      	add	sp, #108	; 0x6c
 8003902:	bd30      	pop	{r4, r5, pc}
 8003904:	2382      	movs	r3, #130	; 0x82
 8003906:	4668      	mov	r0, sp
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	8183      	strh	r3, [r0, #12]
 800390c:	2300      	movs	r3, #0
 800390e:	9100      	str	r1, [sp, #0]
 8003910:	9104      	str	r1, [sp, #16]
 8003912:	429c      	cmp	r4, r3
 8003914:	d000      	beq.n	8003918 <_vsniprintf_r+0x2e>
 8003916:	1e63      	subs	r3, r4, #1
 8003918:	9302      	str	r3, [sp, #8]
 800391a:	9305      	str	r3, [sp, #20]
 800391c:	2301      	movs	r3, #1
 800391e:	4669      	mov	r1, sp
 8003920:	425b      	negs	r3, r3
 8003922:	81cb      	strh	r3, [r1, #14]
 8003924:	0028      	movs	r0, r5
 8003926:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003928:	f000 f878 	bl	8003a1c <_svfiprintf_r>
 800392c:	1c43      	adds	r3, r0, #1
 800392e:	da01      	bge.n	8003934 <_vsniprintf_r+0x4a>
 8003930:	238b      	movs	r3, #139	; 0x8b
 8003932:	602b      	str	r3, [r5, #0]
 8003934:	2c00      	cmp	r4, #0
 8003936:	d0e3      	beq.n	8003900 <_vsniprintf_r+0x16>
 8003938:	2300      	movs	r3, #0
 800393a:	9a00      	ldr	r2, [sp, #0]
 800393c:	7013      	strb	r3, [r2, #0]
 800393e:	e7df      	b.n	8003900 <_vsniprintf_r+0x16>

08003940 <vsniprintf>:
 8003940:	b507      	push	{r0, r1, r2, lr}
 8003942:	9300      	str	r3, [sp, #0]
 8003944:	0013      	movs	r3, r2
 8003946:	000a      	movs	r2, r1
 8003948:	0001      	movs	r1, r0
 800394a:	4802      	ldr	r0, [pc, #8]	; (8003954 <vsniprintf+0x14>)
 800394c:	6800      	ldr	r0, [r0, #0]
 800394e:	f7ff ffcc 	bl	80038ea <_vsniprintf_r>
 8003952:	bd0e      	pop	{r1, r2, r3, pc}
 8003954:	20000008 	.word	0x20000008

08003958 <__ssputs_r>:
 8003958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800395a:	688e      	ldr	r6, [r1, #8]
 800395c:	b085      	sub	sp, #20
 800395e:	0007      	movs	r7, r0
 8003960:	000c      	movs	r4, r1
 8003962:	9203      	str	r2, [sp, #12]
 8003964:	9301      	str	r3, [sp, #4]
 8003966:	429e      	cmp	r6, r3
 8003968:	d83c      	bhi.n	80039e4 <__ssputs_r+0x8c>
 800396a:	2390      	movs	r3, #144	; 0x90
 800396c:	898a      	ldrh	r2, [r1, #12]
 800396e:	00db      	lsls	r3, r3, #3
 8003970:	421a      	tst	r2, r3
 8003972:	d034      	beq.n	80039de <__ssputs_r+0x86>
 8003974:	2503      	movs	r5, #3
 8003976:	6909      	ldr	r1, [r1, #16]
 8003978:	6823      	ldr	r3, [r4, #0]
 800397a:	1a5b      	subs	r3, r3, r1
 800397c:	9302      	str	r3, [sp, #8]
 800397e:	6963      	ldr	r3, [r4, #20]
 8003980:	9802      	ldr	r0, [sp, #8]
 8003982:	435d      	muls	r5, r3
 8003984:	0feb      	lsrs	r3, r5, #31
 8003986:	195d      	adds	r5, r3, r5
 8003988:	9b01      	ldr	r3, [sp, #4]
 800398a:	106d      	asrs	r5, r5, #1
 800398c:	3301      	adds	r3, #1
 800398e:	181b      	adds	r3, r3, r0
 8003990:	42ab      	cmp	r3, r5
 8003992:	d900      	bls.n	8003996 <__ssputs_r+0x3e>
 8003994:	001d      	movs	r5, r3
 8003996:	0553      	lsls	r3, r2, #21
 8003998:	d532      	bpl.n	8003a00 <__ssputs_r+0xa8>
 800399a:	0029      	movs	r1, r5
 800399c:	0038      	movs	r0, r7
 800399e:	f000 fb19 	bl	8003fd4 <_malloc_r>
 80039a2:	1e06      	subs	r6, r0, #0
 80039a4:	d109      	bne.n	80039ba <__ssputs_r+0x62>
 80039a6:	230c      	movs	r3, #12
 80039a8:	603b      	str	r3, [r7, #0]
 80039aa:	2340      	movs	r3, #64	; 0x40
 80039ac:	2001      	movs	r0, #1
 80039ae:	89a2      	ldrh	r2, [r4, #12]
 80039b0:	4240      	negs	r0, r0
 80039b2:	4313      	orrs	r3, r2
 80039b4:	81a3      	strh	r3, [r4, #12]
 80039b6:	b005      	add	sp, #20
 80039b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039ba:	9a02      	ldr	r2, [sp, #8]
 80039bc:	6921      	ldr	r1, [r4, #16]
 80039be:	f7ff ff83 	bl	80038c8 <memcpy>
 80039c2:	89a3      	ldrh	r3, [r4, #12]
 80039c4:	4a14      	ldr	r2, [pc, #80]	; (8003a18 <__ssputs_r+0xc0>)
 80039c6:	401a      	ands	r2, r3
 80039c8:	2380      	movs	r3, #128	; 0x80
 80039ca:	4313      	orrs	r3, r2
 80039cc:	81a3      	strh	r3, [r4, #12]
 80039ce:	9b02      	ldr	r3, [sp, #8]
 80039d0:	6126      	str	r6, [r4, #16]
 80039d2:	18f6      	adds	r6, r6, r3
 80039d4:	6026      	str	r6, [r4, #0]
 80039d6:	6165      	str	r5, [r4, #20]
 80039d8:	9e01      	ldr	r6, [sp, #4]
 80039da:	1aed      	subs	r5, r5, r3
 80039dc:	60a5      	str	r5, [r4, #8]
 80039de:	9b01      	ldr	r3, [sp, #4]
 80039e0:	429e      	cmp	r6, r3
 80039e2:	d900      	bls.n	80039e6 <__ssputs_r+0x8e>
 80039e4:	9e01      	ldr	r6, [sp, #4]
 80039e6:	0032      	movs	r2, r6
 80039e8:	9903      	ldr	r1, [sp, #12]
 80039ea:	6820      	ldr	r0, [r4, #0]
 80039ec:	f000 fa95 	bl	8003f1a <memmove>
 80039f0:	68a3      	ldr	r3, [r4, #8]
 80039f2:	2000      	movs	r0, #0
 80039f4:	1b9b      	subs	r3, r3, r6
 80039f6:	60a3      	str	r3, [r4, #8]
 80039f8:	6823      	ldr	r3, [r4, #0]
 80039fa:	199e      	adds	r6, r3, r6
 80039fc:	6026      	str	r6, [r4, #0]
 80039fe:	e7da      	b.n	80039b6 <__ssputs_r+0x5e>
 8003a00:	002a      	movs	r2, r5
 8003a02:	0038      	movs	r0, r7
 8003a04:	f000 fb44 	bl	8004090 <_realloc_r>
 8003a08:	1e06      	subs	r6, r0, #0
 8003a0a:	d1e0      	bne.n	80039ce <__ssputs_r+0x76>
 8003a0c:	6921      	ldr	r1, [r4, #16]
 8003a0e:	0038      	movs	r0, r7
 8003a10:	f000 fa96 	bl	8003f40 <_free_r>
 8003a14:	e7c7      	b.n	80039a6 <__ssputs_r+0x4e>
 8003a16:	46c0      	nop			; (mov r8, r8)
 8003a18:	fffffb7f 	.word	0xfffffb7f

08003a1c <_svfiprintf_r>:
 8003a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a1e:	b0a1      	sub	sp, #132	; 0x84
 8003a20:	9003      	str	r0, [sp, #12]
 8003a22:	001d      	movs	r5, r3
 8003a24:	898b      	ldrh	r3, [r1, #12]
 8003a26:	000f      	movs	r7, r1
 8003a28:	0016      	movs	r6, r2
 8003a2a:	061b      	lsls	r3, r3, #24
 8003a2c:	d511      	bpl.n	8003a52 <_svfiprintf_r+0x36>
 8003a2e:	690b      	ldr	r3, [r1, #16]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d10e      	bne.n	8003a52 <_svfiprintf_r+0x36>
 8003a34:	2140      	movs	r1, #64	; 0x40
 8003a36:	f000 facd 	bl	8003fd4 <_malloc_r>
 8003a3a:	6038      	str	r0, [r7, #0]
 8003a3c:	6138      	str	r0, [r7, #16]
 8003a3e:	2800      	cmp	r0, #0
 8003a40:	d105      	bne.n	8003a4e <_svfiprintf_r+0x32>
 8003a42:	230c      	movs	r3, #12
 8003a44:	9a03      	ldr	r2, [sp, #12]
 8003a46:	3801      	subs	r0, #1
 8003a48:	6013      	str	r3, [r2, #0]
 8003a4a:	b021      	add	sp, #132	; 0x84
 8003a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a4e:	2340      	movs	r3, #64	; 0x40
 8003a50:	617b      	str	r3, [r7, #20]
 8003a52:	2300      	movs	r3, #0
 8003a54:	ac08      	add	r4, sp, #32
 8003a56:	6163      	str	r3, [r4, #20]
 8003a58:	3320      	adds	r3, #32
 8003a5a:	7663      	strb	r3, [r4, #25]
 8003a5c:	3310      	adds	r3, #16
 8003a5e:	76a3      	strb	r3, [r4, #26]
 8003a60:	9507      	str	r5, [sp, #28]
 8003a62:	0035      	movs	r5, r6
 8003a64:	782b      	ldrb	r3, [r5, #0]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d001      	beq.n	8003a6e <_svfiprintf_r+0x52>
 8003a6a:	2b25      	cmp	r3, #37	; 0x25
 8003a6c:	d146      	bne.n	8003afc <_svfiprintf_r+0xe0>
 8003a6e:	1bab      	subs	r3, r5, r6
 8003a70:	9305      	str	r3, [sp, #20]
 8003a72:	d00c      	beq.n	8003a8e <_svfiprintf_r+0x72>
 8003a74:	0032      	movs	r2, r6
 8003a76:	0039      	movs	r1, r7
 8003a78:	9803      	ldr	r0, [sp, #12]
 8003a7a:	f7ff ff6d 	bl	8003958 <__ssputs_r>
 8003a7e:	1c43      	adds	r3, r0, #1
 8003a80:	d100      	bne.n	8003a84 <_svfiprintf_r+0x68>
 8003a82:	e0ae      	b.n	8003be2 <_svfiprintf_r+0x1c6>
 8003a84:	6962      	ldr	r2, [r4, #20]
 8003a86:	9b05      	ldr	r3, [sp, #20]
 8003a88:	4694      	mov	ip, r2
 8003a8a:	4463      	add	r3, ip
 8003a8c:	6163      	str	r3, [r4, #20]
 8003a8e:	782b      	ldrb	r3, [r5, #0]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d100      	bne.n	8003a96 <_svfiprintf_r+0x7a>
 8003a94:	e0a5      	b.n	8003be2 <_svfiprintf_r+0x1c6>
 8003a96:	2201      	movs	r2, #1
 8003a98:	2300      	movs	r3, #0
 8003a9a:	4252      	negs	r2, r2
 8003a9c:	6062      	str	r2, [r4, #4]
 8003a9e:	a904      	add	r1, sp, #16
 8003aa0:	3254      	adds	r2, #84	; 0x54
 8003aa2:	1852      	adds	r2, r2, r1
 8003aa4:	1c6e      	adds	r6, r5, #1
 8003aa6:	6023      	str	r3, [r4, #0]
 8003aa8:	60e3      	str	r3, [r4, #12]
 8003aaa:	60a3      	str	r3, [r4, #8]
 8003aac:	7013      	strb	r3, [r2, #0]
 8003aae:	65a3      	str	r3, [r4, #88]	; 0x58
 8003ab0:	7831      	ldrb	r1, [r6, #0]
 8003ab2:	2205      	movs	r2, #5
 8003ab4:	4853      	ldr	r0, [pc, #332]	; (8003c04 <_svfiprintf_r+0x1e8>)
 8003ab6:	f000 fa25 	bl	8003f04 <memchr>
 8003aba:	1c75      	adds	r5, r6, #1
 8003abc:	2800      	cmp	r0, #0
 8003abe:	d11f      	bne.n	8003b00 <_svfiprintf_r+0xe4>
 8003ac0:	6822      	ldr	r2, [r4, #0]
 8003ac2:	06d3      	lsls	r3, r2, #27
 8003ac4:	d504      	bpl.n	8003ad0 <_svfiprintf_r+0xb4>
 8003ac6:	2353      	movs	r3, #83	; 0x53
 8003ac8:	a904      	add	r1, sp, #16
 8003aca:	185b      	adds	r3, r3, r1
 8003acc:	2120      	movs	r1, #32
 8003ace:	7019      	strb	r1, [r3, #0]
 8003ad0:	0713      	lsls	r3, r2, #28
 8003ad2:	d504      	bpl.n	8003ade <_svfiprintf_r+0xc2>
 8003ad4:	2353      	movs	r3, #83	; 0x53
 8003ad6:	a904      	add	r1, sp, #16
 8003ad8:	185b      	adds	r3, r3, r1
 8003ada:	212b      	movs	r1, #43	; 0x2b
 8003adc:	7019      	strb	r1, [r3, #0]
 8003ade:	7833      	ldrb	r3, [r6, #0]
 8003ae0:	2b2a      	cmp	r3, #42	; 0x2a
 8003ae2:	d016      	beq.n	8003b12 <_svfiprintf_r+0xf6>
 8003ae4:	0035      	movs	r5, r6
 8003ae6:	2100      	movs	r1, #0
 8003ae8:	200a      	movs	r0, #10
 8003aea:	68e3      	ldr	r3, [r4, #12]
 8003aec:	782a      	ldrb	r2, [r5, #0]
 8003aee:	1c6e      	adds	r6, r5, #1
 8003af0:	3a30      	subs	r2, #48	; 0x30
 8003af2:	2a09      	cmp	r2, #9
 8003af4:	d94e      	bls.n	8003b94 <_svfiprintf_r+0x178>
 8003af6:	2900      	cmp	r1, #0
 8003af8:	d018      	beq.n	8003b2c <_svfiprintf_r+0x110>
 8003afa:	e010      	b.n	8003b1e <_svfiprintf_r+0x102>
 8003afc:	3501      	adds	r5, #1
 8003afe:	e7b1      	b.n	8003a64 <_svfiprintf_r+0x48>
 8003b00:	4b40      	ldr	r3, [pc, #256]	; (8003c04 <_svfiprintf_r+0x1e8>)
 8003b02:	6822      	ldr	r2, [r4, #0]
 8003b04:	1ac0      	subs	r0, r0, r3
 8003b06:	2301      	movs	r3, #1
 8003b08:	4083      	lsls	r3, r0
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	6023      	str	r3, [r4, #0]
 8003b0e:	002e      	movs	r6, r5
 8003b10:	e7ce      	b.n	8003ab0 <_svfiprintf_r+0x94>
 8003b12:	9b07      	ldr	r3, [sp, #28]
 8003b14:	1d19      	adds	r1, r3, #4
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	9107      	str	r1, [sp, #28]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	db01      	blt.n	8003b22 <_svfiprintf_r+0x106>
 8003b1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003b20:	e004      	b.n	8003b2c <_svfiprintf_r+0x110>
 8003b22:	425b      	negs	r3, r3
 8003b24:	60e3      	str	r3, [r4, #12]
 8003b26:	2302      	movs	r3, #2
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	6023      	str	r3, [r4, #0]
 8003b2c:	782b      	ldrb	r3, [r5, #0]
 8003b2e:	2b2e      	cmp	r3, #46	; 0x2e
 8003b30:	d10a      	bne.n	8003b48 <_svfiprintf_r+0x12c>
 8003b32:	786b      	ldrb	r3, [r5, #1]
 8003b34:	2b2a      	cmp	r3, #42	; 0x2a
 8003b36:	d135      	bne.n	8003ba4 <_svfiprintf_r+0x188>
 8003b38:	9b07      	ldr	r3, [sp, #28]
 8003b3a:	3502      	adds	r5, #2
 8003b3c:	1d1a      	adds	r2, r3, #4
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	9207      	str	r2, [sp, #28]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	db2b      	blt.n	8003b9e <_svfiprintf_r+0x182>
 8003b46:	9309      	str	r3, [sp, #36]	; 0x24
 8003b48:	4e2f      	ldr	r6, [pc, #188]	; (8003c08 <_svfiprintf_r+0x1ec>)
 8003b4a:	7829      	ldrb	r1, [r5, #0]
 8003b4c:	2203      	movs	r2, #3
 8003b4e:	0030      	movs	r0, r6
 8003b50:	f000 f9d8 	bl	8003f04 <memchr>
 8003b54:	2800      	cmp	r0, #0
 8003b56:	d006      	beq.n	8003b66 <_svfiprintf_r+0x14a>
 8003b58:	2340      	movs	r3, #64	; 0x40
 8003b5a:	1b80      	subs	r0, r0, r6
 8003b5c:	4083      	lsls	r3, r0
 8003b5e:	6822      	ldr	r2, [r4, #0]
 8003b60:	3501      	adds	r5, #1
 8003b62:	4313      	orrs	r3, r2
 8003b64:	6023      	str	r3, [r4, #0]
 8003b66:	7829      	ldrb	r1, [r5, #0]
 8003b68:	2206      	movs	r2, #6
 8003b6a:	4828      	ldr	r0, [pc, #160]	; (8003c0c <_svfiprintf_r+0x1f0>)
 8003b6c:	1c6e      	adds	r6, r5, #1
 8003b6e:	7621      	strb	r1, [r4, #24]
 8003b70:	f000 f9c8 	bl	8003f04 <memchr>
 8003b74:	2800      	cmp	r0, #0
 8003b76:	d03c      	beq.n	8003bf2 <_svfiprintf_r+0x1d6>
 8003b78:	4b25      	ldr	r3, [pc, #148]	; (8003c10 <_svfiprintf_r+0x1f4>)
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d125      	bne.n	8003bca <_svfiprintf_r+0x1ae>
 8003b7e:	2207      	movs	r2, #7
 8003b80:	9b07      	ldr	r3, [sp, #28]
 8003b82:	3307      	adds	r3, #7
 8003b84:	4393      	bics	r3, r2
 8003b86:	3308      	adds	r3, #8
 8003b88:	9307      	str	r3, [sp, #28]
 8003b8a:	6963      	ldr	r3, [r4, #20]
 8003b8c:	9a04      	ldr	r2, [sp, #16]
 8003b8e:	189b      	adds	r3, r3, r2
 8003b90:	6163      	str	r3, [r4, #20]
 8003b92:	e766      	b.n	8003a62 <_svfiprintf_r+0x46>
 8003b94:	4343      	muls	r3, r0
 8003b96:	2101      	movs	r1, #1
 8003b98:	189b      	adds	r3, r3, r2
 8003b9a:	0035      	movs	r5, r6
 8003b9c:	e7a6      	b.n	8003aec <_svfiprintf_r+0xd0>
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	425b      	negs	r3, r3
 8003ba2:	e7d0      	b.n	8003b46 <_svfiprintf_r+0x12a>
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	200a      	movs	r0, #10
 8003ba8:	001a      	movs	r2, r3
 8003baa:	3501      	adds	r5, #1
 8003bac:	6063      	str	r3, [r4, #4]
 8003bae:	7829      	ldrb	r1, [r5, #0]
 8003bb0:	1c6e      	adds	r6, r5, #1
 8003bb2:	3930      	subs	r1, #48	; 0x30
 8003bb4:	2909      	cmp	r1, #9
 8003bb6:	d903      	bls.n	8003bc0 <_svfiprintf_r+0x1a4>
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d0c5      	beq.n	8003b48 <_svfiprintf_r+0x12c>
 8003bbc:	9209      	str	r2, [sp, #36]	; 0x24
 8003bbe:	e7c3      	b.n	8003b48 <_svfiprintf_r+0x12c>
 8003bc0:	4342      	muls	r2, r0
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	1852      	adds	r2, r2, r1
 8003bc6:	0035      	movs	r5, r6
 8003bc8:	e7f1      	b.n	8003bae <_svfiprintf_r+0x192>
 8003bca:	ab07      	add	r3, sp, #28
 8003bcc:	9300      	str	r3, [sp, #0]
 8003bce:	003a      	movs	r2, r7
 8003bd0:	4b10      	ldr	r3, [pc, #64]	; (8003c14 <_svfiprintf_r+0x1f8>)
 8003bd2:	0021      	movs	r1, r4
 8003bd4:	9803      	ldr	r0, [sp, #12]
 8003bd6:	e000      	b.n	8003bda <_svfiprintf_r+0x1be>
 8003bd8:	bf00      	nop
 8003bda:	9004      	str	r0, [sp, #16]
 8003bdc:	9b04      	ldr	r3, [sp, #16]
 8003bde:	3301      	adds	r3, #1
 8003be0:	d1d3      	bne.n	8003b8a <_svfiprintf_r+0x16e>
 8003be2:	89bb      	ldrh	r3, [r7, #12]
 8003be4:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003be6:	065b      	lsls	r3, r3, #25
 8003be8:	d400      	bmi.n	8003bec <_svfiprintf_r+0x1d0>
 8003bea:	e72e      	b.n	8003a4a <_svfiprintf_r+0x2e>
 8003bec:	2001      	movs	r0, #1
 8003bee:	4240      	negs	r0, r0
 8003bf0:	e72b      	b.n	8003a4a <_svfiprintf_r+0x2e>
 8003bf2:	ab07      	add	r3, sp, #28
 8003bf4:	9300      	str	r3, [sp, #0]
 8003bf6:	003a      	movs	r2, r7
 8003bf8:	4b06      	ldr	r3, [pc, #24]	; (8003c14 <_svfiprintf_r+0x1f8>)
 8003bfa:	0021      	movs	r1, r4
 8003bfc:	9803      	ldr	r0, [sp, #12]
 8003bfe:	f000 f879 	bl	8003cf4 <_printf_i>
 8003c02:	e7ea      	b.n	8003bda <_svfiprintf_r+0x1be>
 8003c04:	0800444c 	.word	0x0800444c
 8003c08:	08004452 	.word	0x08004452
 8003c0c:	08004456 	.word	0x08004456
 8003c10:	00000000 	.word	0x00000000
 8003c14:	08003959 	.word	0x08003959

08003c18 <_printf_common>:
 8003c18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c1a:	0015      	movs	r5, r2
 8003c1c:	9301      	str	r3, [sp, #4]
 8003c1e:	688a      	ldr	r2, [r1, #8]
 8003c20:	690b      	ldr	r3, [r1, #16]
 8003c22:	9000      	str	r0, [sp, #0]
 8003c24:	000c      	movs	r4, r1
 8003c26:	4293      	cmp	r3, r2
 8003c28:	da00      	bge.n	8003c2c <_printf_common+0x14>
 8003c2a:	0013      	movs	r3, r2
 8003c2c:	0022      	movs	r2, r4
 8003c2e:	602b      	str	r3, [r5, #0]
 8003c30:	3243      	adds	r2, #67	; 0x43
 8003c32:	7812      	ldrb	r2, [r2, #0]
 8003c34:	2a00      	cmp	r2, #0
 8003c36:	d001      	beq.n	8003c3c <_printf_common+0x24>
 8003c38:	3301      	adds	r3, #1
 8003c3a:	602b      	str	r3, [r5, #0]
 8003c3c:	6823      	ldr	r3, [r4, #0]
 8003c3e:	069b      	lsls	r3, r3, #26
 8003c40:	d502      	bpl.n	8003c48 <_printf_common+0x30>
 8003c42:	682b      	ldr	r3, [r5, #0]
 8003c44:	3302      	adds	r3, #2
 8003c46:	602b      	str	r3, [r5, #0]
 8003c48:	2706      	movs	r7, #6
 8003c4a:	6823      	ldr	r3, [r4, #0]
 8003c4c:	401f      	ands	r7, r3
 8003c4e:	d027      	beq.n	8003ca0 <_printf_common+0x88>
 8003c50:	0023      	movs	r3, r4
 8003c52:	3343      	adds	r3, #67	; 0x43
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	1e5a      	subs	r2, r3, #1
 8003c58:	4193      	sbcs	r3, r2
 8003c5a:	6822      	ldr	r2, [r4, #0]
 8003c5c:	0692      	lsls	r2, r2, #26
 8003c5e:	d430      	bmi.n	8003cc2 <_printf_common+0xaa>
 8003c60:	0022      	movs	r2, r4
 8003c62:	9901      	ldr	r1, [sp, #4]
 8003c64:	3243      	adds	r2, #67	; 0x43
 8003c66:	9800      	ldr	r0, [sp, #0]
 8003c68:	9e08      	ldr	r6, [sp, #32]
 8003c6a:	47b0      	blx	r6
 8003c6c:	1c43      	adds	r3, r0, #1
 8003c6e:	d025      	beq.n	8003cbc <_printf_common+0xa4>
 8003c70:	2306      	movs	r3, #6
 8003c72:	6820      	ldr	r0, [r4, #0]
 8003c74:	682a      	ldr	r2, [r5, #0]
 8003c76:	68e1      	ldr	r1, [r4, #12]
 8003c78:	4003      	ands	r3, r0
 8003c7a:	2500      	movs	r5, #0
 8003c7c:	2b04      	cmp	r3, #4
 8003c7e:	d103      	bne.n	8003c88 <_printf_common+0x70>
 8003c80:	1a8d      	subs	r5, r1, r2
 8003c82:	43eb      	mvns	r3, r5
 8003c84:	17db      	asrs	r3, r3, #31
 8003c86:	401d      	ands	r5, r3
 8003c88:	68a3      	ldr	r3, [r4, #8]
 8003c8a:	6922      	ldr	r2, [r4, #16]
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	dd01      	ble.n	8003c94 <_printf_common+0x7c>
 8003c90:	1a9b      	subs	r3, r3, r2
 8003c92:	18ed      	adds	r5, r5, r3
 8003c94:	2700      	movs	r7, #0
 8003c96:	42bd      	cmp	r5, r7
 8003c98:	d120      	bne.n	8003cdc <_printf_common+0xc4>
 8003c9a:	2000      	movs	r0, #0
 8003c9c:	e010      	b.n	8003cc0 <_printf_common+0xa8>
 8003c9e:	3701      	adds	r7, #1
 8003ca0:	68e3      	ldr	r3, [r4, #12]
 8003ca2:	682a      	ldr	r2, [r5, #0]
 8003ca4:	1a9b      	subs	r3, r3, r2
 8003ca6:	42bb      	cmp	r3, r7
 8003ca8:	ddd2      	ble.n	8003c50 <_printf_common+0x38>
 8003caa:	0022      	movs	r2, r4
 8003cac:	2301      	movs	r3, #1
 8003cae:	3219      	adds	r2, #25
 8003cb0:	9901      	ldr	r1, [sp, #4]
 8003cb2:	9800      	ldr	r0, [sp, #0]
 8003cb4:	9e08      	ldr	r6, [sp, #32]
 8003cb6:	47b0      	blx	r6
 8003cb8:	1c43      	adds	r3, r0, #1
 8003cba:	d1f0      	bne.n	8003c9e <_printf_common+0x86>
 8003cbc:	2001      	movs	r0, #1
 8003cbe:	4240      	negs	r0, r0
 8003cc0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003cc2:	2030      	movs	r0, #48	; 0x30
 8003cc4:	18e1      	adds	r1, r4, r3
 8003cc6:	3143      	adds	r1, #67	; 0x43
 8003cc8:	7008      	strb	r0, [r1, #0]
 8003cca:	0021      	movs	r1, r4
 8003ccc:	1c5a      	adds	r2, r3, #1
 8003cce:	3145      	adds	r1, #69	; 0x45
 8003cd0:	7809      	ldrb	r1, [r1, #0]
 8003cd2:	18a2      	adds	r2, r4, r2
 8003cd4:	3243      	adds	r2, #67	; 0x43
 8003cd6:	3302      	adds	r3, #2
 8003cd8:	7011      	strb	r1, [r2, #0]
 8003cda:	e7c1      	b.n	8003c60 <_printf_common+0x48>
 8003cdc:	0022      	movs	r2, r4
 8003cde:	2301      	movs	r3, #1
 8003ce0:	321a      	adds	r2, #26
 8003ce2:	9901      	ldr	r1, [sp, #4]
 8003ce4:	9800      	ldr	r0, [sp, #0]
 8003ce6:	9e08      	ldr	r6, [sp, #32]
 8003ce8:	47b0      	blx	r6
 8003cea:	1c43      	adds	r3, r0, #1
 8003cec:	d0e6      	beq.n	8003cbc <_printf_common+0xa4>
 8003cee:	3701      	adds	r7, #1
 8003cf0:	e7d1      	b.n	8003c96 <_printf_common+0x7e>
	...

08003cf4 <_printf_i>:
 8003cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cf6:	b089      	sub	sp, #36	; 0x24
 8003cf8:	9204      	str	r2, [sp, #16]
 8003cfa:	000a      	movs	r2, r1
 8003cfc:	3243      	adds	r2, #67	; 0x43
 8003cfe:	9305      	str	r3, [sp, #20]
 8003d00:	9003      	str	r0, [sp, #12]
 8003d02:	9202      	str	r2, [sp, #8]
 8003d04:	7e0a      	ldrb	r2, [r1, #24]
 8003d06:	000c      	movs	r4, r1
 8003d08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003d0a:	2a6e      	cmp	r2, #110	; 0x6e
 8003d0c:	d100      	bne.n	8003d10 <_printf_i+0x1c>
 8003d0e:	e086      	b.n	8003e1e <_printf_i+0x12a>
 8003d10:	d81f      	bhi.n	8003d52 <_printf_i+0x5e>
 8003d12:	2a63      	cmp	r2, #99	; 0x63
 8003d14:	d033      	beq.n	8003d7e <_printf_i+0x8a>
 8003d16:	d808      	bhi.n	8003d2a <_printf_i+0x36>
 8003d18:	2a00      	cmp	r2, #0
 8003d1a:	d100      	bne.n	8003d1e <_printf_i+0x2a>
 8003d1c:	e08c      	b.n	8003e38 <_printf_i+0x144>
 8003d1e:	2a58      	cmp	r2, #88	; 0x58
 8003d20:	d04d      	beq.n	8003dbe <_printf_i+0xca>
 8003d22:	0025      	movs	r5, r4
 8003d24:	3542      	adds	r5, #66	; 0x42
 8003d26:	702a      	strb	r2, [r5, #0]
 8003d28:	e030      	b.n	8003d8c <_printf_i+0x98>
 8003d2a:	2a64      	cmp	r2, #100	; 0x64
 8003d2c:	d001      	beq.n	8003d32 <_printf_i+0x3e>
 8003d2e:	2a69      	cmp	r2, #105	; 0x69
 8003d30:	d1f7      	bne.n	8003d22 <_printf_i+0x2e>
 8003d32:	6819      	ldr	r1, [r3, #0]
 8003d34:	6825      	ldr	r5, [r4, #0]
 8003d36:	1d0a      	adds	r2, r1, #4
 8003d38:	0628      	lsls	r0, r5, #24
 8003d3a:	d529      	bpl.n	8003d90 <_printf_i+0x9c>
 8003d3c:	6808      	ldr	r0, [r1, #0]
 8003d3e:	601a      	str	r2, [r3, #0]
 8003d40:	2800      	cmp	r0, #0
 8003d42:	da03      	bge.n	8003d4c <_printf_i+0x58>
 8003d44:	232d      	movs	r3, #45	; 0x2d
 8003d46:	9a02      	ldr	r2, [sp, #8]
 8003d48:	4240      	negs	r0, r0
 8003d4a:	7013      	strb	r3, [r2, #0]
 8003d4c:	4e6b      	ldr	r6, [pc, #428]	; (8003efc <_printf_i+0x208>)
 8003d4e:	270a      	movs	r7, #10
 8003d50:	e04f      	b.n	8003df2 <_printf_i+0xfe>
 8003d52:	2a73      	cmp	r2, #115	; 0x73
 8003d54:	d074      	beq.n	8003e40 <_printf_i+0x14c>
 8003d56:	d808      	bhi.n	8003d6a <_printf_i+0x76>
 8003d58:	2a6f      	cmp	r2, #111	; 0x6f
 8003d5a:	d01f      	beq.n	8003d9c <_printf_i+0xa8>
 8003d5c:	2a70      	cmp	r2, #112	; 0x70
 8003d5e:	d1e0      	bne.n	8003d22 <_printf_i+0x2e>
 8003d60:	2220      	movs	r2, #32
 8003d62:	6809      	ldr	r1, [r1, #0]
 8003d64:	430a      	orrs	r2, r1
 8003d66:	6022      	str	r2, [r4, #0]
 8003d68:	e003      	b.n	8003d72 <_printf_i+0x7e>
 8003d6a:	2a75      	cmp	r2, #117	; 0x75
 8003d6c:	d016      	beq.n	8003d9c <_printf_i+0xa8>
 8003d6e:	2a78      	cmp	r2, #120	; 0x78
 8003d70:	d1d7      	bne.n	8003d22 <_printf_i+0x2e>
 8003d72:	0022      	movs	r2, r4
 8003d74:	2178      	movs	r1, #120	; 0x78
 8003d76:	3245      	adds	r2, #69	; 0x45
 8003d78:	7011      	strb	r1, [r2, #0]
 8003d7a:	4e61      	ldr	r6, [pc, #388]	; (8003f00 <_printf_i+0x20c>)
 8003d7c:	e022      	b.n	8003dc4 <_printf_i+0xd0>
 8003d7e:	0025      	movs	r5, r4
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	3542      	adds	r5, #66	; 0x42
 8003d84:	1d11      	adds	r1, r2, #4
 8003d86:	6019      	str	r1, [r3, #0]
 8003d88:	6813      	ldr	r3, [r2, #0]
 8003d8a:	702b      	strb	r3, [r5, #0]
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e065      	b.n	8003e5c <_printf_i+0x168>
 8003d90:	6808      	ldr	r0, [r1, #0]
 8003d92:	601a      	str	r2, [r3, #0]
 8003d94:	0669      	lsls	r1, r5, #25
 8003d96:	d5d3      	bpl.n	8003d40 <_printf_i+0x4c>
 8003d98:	b200      	sxth	r0, r0
 8003d9a:	e7d1      	b.n	8003d40 <_printf_i+0x4c>
 8003d9c:	6819      	ldr	r1, [r3, #0]
 8003d9e:	6825      	ldr	r5, [r4, #0]
 8003da0:	1d08      	adds	r0, r1, #4
 8003da2:	6018      	str	r0, [r3, #0]
 8003da4:	6808      	ldr	r0, [r1, #0]
 8003da6:	062e      	lsls	r6, r5, #24
 8003da8:	d505      	bpl.n	8003db6 <_printf_i+0xc2>
 8003daa:	4e54      	ldr	r6, [pc, #336]	; (8003efc <_printf_i+0x208>)
 8003dac:	2708      	movs	r7, #8
 8003dae:	2a6f      	cmp	r2, #111	; 0x6f
 8003db0:	d01b      	beq.n	8003dea <_printf_i+0xf6>
 8003db2:	270a      	movs	r7, #10
 8003db4:	e019      	b.n	8003dea <_printf_i+0xf6>
 8003db6:	066d      	lsls	r5, r5, #25
 8003db8:	d5f7      	bpl.n	8003daa <_printf_i+0xb6>
 8003dba:	b280      	uxth	r0, r0
 8003dbc:	e7f5      	b.n	8003daa <_printf_i+0xb6>
 8003dbe:	3145      	adds	r1, #69	; 0x45
 8003dc0:	4e4e      	ldr	r6, [pc, #312]	; (8003efc <_printf_i+0x208>)
 8003dc2:	700a      	strb	r2, [r1, #0]
 8003dc4:	6818      	ldr	r0, [r3, #0]
 8003dc6:	6822      	ldr	r2, [r4, #0]
 8003dc8:	1d01      	adds	r1, r0, #4
 8003dca:	6800      	ldr	r0, [r0, #0]
 8003dcc:	6019      	str	r1, [r3, #0]
 8003dce:	0615      	lsls	r5, r2, #24
 8003dd0:	d521      	bpl.n	8003e16 <_printf_i+0x122>
 8003dd2:	07d3      	lsls	r3, r2, #31
 8003dd4:	d502      	bpl.n	8003ddc <_printf_i+0xe8>
 8003dd6:	2320      	movs	r3, #32
 8003dd8:	431a      	orrs	r2, r3
 8003dda:	6022      	str	r2, [r4, #0]
 8003ddc:	2710      	movs	r7, #16
 8003dde:	2800      	cmp	r0, #0
 8003de0:	d103      	bne.n	8003dea <_printf_i+0xf6>
 8003de2:	2320      	movs	r3, #32
 8003de4:	6822      	ldr	r2, [r4, #0]
 8003de6:	439a      	bics	r2, r3
 8003de8:	6022      	str	r2, [r4, #0]
 8003dea:	0023      	movs	r3, r4
 8003dec:	2200      	movs	r2, #0
 8003dee:	3343      	adds	r3, #67	; 0x43
 8003df0:	701a      	strb	r2, [r3, #0]
 8003df2:	6863      	ldr	r3, [r4, #4]
 8003df4:	60a3      	str	r3, [r4, #8]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	db58      	blt.n	8003eac <_printf_i+0x1b8>
 8003dfa:	2204      	movs	r2, #4
 8003dfc:	6821      	ldr	r1, [r4, #0]
 8003dfe:	4391      	bics	r1, r2
 8003e00:	6021      	str	r1, [r4, #0]
 8003e02:	2800      	cmp	r0, #0
 8003e04:	d154      	bne.n	8003eb0 <_printf_i+0x1bc>
 8003e06:	9d02      	ldr	r5, [sp, #8]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d05a      	beq.n	8003ec2 <_printf_i+0x1ce>
 8003e0c:	0025      	movs	r5, r4
 8003e0e:	7833      	ldrb	r3, [r6, #0]
 8003e10:	3542      	adds	r5, #66	; 0x42
 8003e12:	702b      	strb	r3, [r5, #0]
 8003e14:	e055      	b.n	8003ec2 <_printf_i+0x1ce>
 8003e16:	0655      	lsls	r5, r2, #25
 8003e18:	d5db      	bpl.n	8003dd2 <_printf_i+0xde>
 8003e1a:	b280      	uxth	r0, r0
 8003e1c:	e7d9      	b.n	8003dd2 <_printf_i+0xde>
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	680d      	ldr	r5, [r1, #0]
 8003e22:	1d10      	adds	r0, r2, #4
 8003e24:	6949      	ldr	r1, [r1, #20]
 8003e26:	6018      	str	r0, [r3, #0]
 8003e28:	6813      	ldr	r3, [r2, #0]
 8003e2a:	062e      	lsls	r6, r5, #24
 8003e2c:	d501      	bpl.n	8003e32 <_printf_i+0x13e>
 8003e2e:	6019      	str	r1, [r3, #0]
 8003e30:	e002      	b.n	8003e38 <_printf_i+0x144>
 8003e32:	066d      	lsls	r5, r5, #25
 8003e34:	d5fb      	bpl.n	8003e2e <_printf_i+0x13a>
 8003e36:	8019      	strh	r1, [r3, #0]
 8003e38:	2300      	movs	r3, #0
 8003e3a:	9d02      	ldr	r5, [sp, #8]
 8003e3c:	6123      	str	r3, [r4, #16]
 8003e3e:	e04f      	b.n	8003ee0 <_printf_i+0x1ec>
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	1d11      	adds	r1, r2, #4
 8003e44:	6019      	str	r1, [r3, #0]
 8003e46:	6815      	ldr	r5, [r2, #0]
 8003e48:	2100      	movs	r1, #0
 8003e4a:	6862      	ldr	r2, [r4, #4]
 8003e4c:	0028      	movs	r0, r5
 8003e4e:	f000 f859 	bl	8003f04 <memchr>
 8003e52:	2800      	cmp	r0, #0
 8003e54:	d001      	beq.n	8003e5a <_printf_i+0x166>
 8003e56:	1b40      	subs	r0, r0, r5
 8003e58:	6060      	str	r0, [r4, #4]
 8003e5a:	6863      	ldr	r3, [r4, #4]
 8003e5c:	6123      	str	r3, [r4, #16]
 8003e5e:	2300      	movs	r3, #0
 8003e60:	9a02      	ldr	r2, [sp, #8]
 8003e62:	7013      	strb	r3, [r2, #0]
 8003e64:	e03c      	b.n	8003ee0 <_printf_i+0x1ec>
 8003e66:	6923      	ldr	r3, [r4, #16]
 8003e68:	002a      	movs	r2, r5
 8003e6a:	9904      	ldr	r1, [sp, #16]
 8003e6c:	9803      	ldr	r0, [sp, #12]
 8003e6e:	9d05      	ldr	r5, [sp, #20]
 8003e70:	47a8      	blx	r5
 8003e72:	1c43      	adds	r3, r0, #1
 8003e74:	d03e      	beq.n	8003ef4 <_printf_i+0x200>
 8003e76:	6823      	ldr	r3, [r4, #0]
 8003e78:	079b      	lsls	r3, r3, #30
 8003e7a:	d415      	bmi.n	8003ea8 <_printf_i+0x1b4>
 8003e7c:	9b07      	ldr	r3, [sp, #28]
 8003e7e:	68e0      	ldr	r0, [r4, #12]
 8003e80:	4298      	cmp	r0, r3
 8003e82:	da39      	bge.n	8003ef8 <_printf_i+0x204>
 8003e84:	0018      	movs	r0, r3
 8003e86:	e037      	b.n	8003ef8 <_printf_i+0x204>
 8003e88:	0022      	movs	r2, r4
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	3219      	adds	r2, #25
 8003e8e:	9904      	ldr	r1, [sp, #16]
 8003e90:	9803      	ldr	r0, [sp, #12]
 8003e92:	9e05      	ldr	r6, [sp, #20]
 8003e94:	47b0      	blx	r6
 8003e96:	1c43      	adds	r3, r0, #1
 8003e98:	d02c      	beq.n	8003ef4 <_printf_i+0x200>
 8003e9a:	3501      	adds	r5, #1
 8003e9c:	68e3      	ldr	r3, [r4, #12]
 8003e9e:	9a07      	ldr	r2, [sp, #28]
 8003ea0:	1a9b      	subs	r3, r3, r2
 8003ea2:	42ab      	cmp	r3, r5
 8003ea4:	dcf0      	bgt.n	8003e88 <_printf_i+0x194>
 8003ea6:	e7e9      	b.n	8003e7c <_printf_i+0x188>
 8003ea8:	2500      	movs	r5, #0
 8003eaa:	e7f7      	b.n	8003e9c <_printf_i+0x1a8>
 8003eac:	2800      	cmp	r0, #0
 8003eae:	d0ad      	beq.n	8003e0c <_printf_i+0x118>
 8003eb0:	9d02      	ldr	r5, [sp, #8]
 8003eb2:	0039      	movs	r1, r7
 8003eb4:	f7fc f9b6 	bl	8000224 <__aeabi_uidivmod>
 8003eb8:	5c73      	ldrb	r3, [r6, r1]
 8003eba:	3d01      	subs	r5, #1
 8003ebc:	702b      	strb	r3, [r5, #0]
 8003ebe:	2800      	cmp	r0, #0
 8003ec0:	d1f7      	bne.n	8003eb2 <_printf_i+0x1be>
 8003ec2:	2f08      	cmp	r7, #8
 8003ec4:	d109      	bne.n	8003eda <_printf_i+0x1e6>
 8003ec6:	6823      	ldr	r3, [r4, #0]
 8003ec8:	07db      	lsls	r3, r3, #31
 8003eca:	d506      	bpl.n	8003eda <_printf_i+0x1e6>
 8003ecc:	6863      	ldr	r3, [r4, #4]
 8003ece:	6922      	ldr	r2, [r4, #16]
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	dc02      	bgt.n	8003eda <_printf_i+0x1e6>
 8003ed4:	2330      	movs	r3, #48	; 0x30
 8003ed6:	3d01      	subs	r5, #1
 8003ed8:	702b      	strb	r3, [r5, #0]
 8003eda:	9b02      	ldr	r3, [sp, #8]
 8003edc:	1b5b      	subs	r3, r3, r5
 8003ede:	6123      	str	r3, [r4, #16]
 8003ee0:	9b05      	ldr	r3, [sp, #20]
 8003ee2:	aa07      	add	r2, sp, #28
 8003ee4:	9300      	str	r3, [sp, #0]
 8003ee6:	0021      	movs	r1, r4
 8003ee8:	9b04      	ldr	r3, [sp, #16]
 8003eea:	9803      	ldr	r0, [sp, #12]
 8003eec:	f7ff fe94 	bl	8003c18 <_printf_common>
 8003ef0:	1c43      	adds	r3, r0, #1
 8003ef2:	d1b8      	bne.n	8003e66 <_printf_i+0x172>
 8003ef4:	2001      	movs	r0, #1
 8003ef6:	4240      	negs	r0, r0
 8003ef8:	b009      	add	sp, #36	; 0x24
 8003efa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003efc:	0800445d 	.word	0x0800445d
 8003f00:	0800446e 	.word	0x0800446e

08003f04 <memchr>:
 8003f04:	b2c9      	uxtb	r1, r1
 8003f06:	1882      	adds	r2, r0, r2
 8003f08:	4290      	cmp	r0, r2
 8003f0a:	d101      	bne.n	8003f10 <memchr+0xc>
 8003f0c:	2000      	movs	r0, #0
 8003f0e:	4770      	bx	lr
 8003f10:	7803      	ldrb	r3, [r0, #0]
 8003f12:	428b      	cmp	r3, r1
 8003f14:	d0fb      	beq.n	8003f0e <memchr+0xa>
 8003f16:	3001      	adds	r0, #1
 8003f18:	e7f6      	b.n	8003f08 <memchr+0x4>

08003f1a <memmove>:
 8003f1a:	b510      	push	{r4, lr}
 8003f1c:	4288      	cmp	r0, r1
 8003f1e:	d902      	bls.n	8003f26 <memmove+0xc>
 8003f20:	188b      	adds	r3, r1, r2
 8003f22:	4298      	cmp	r0, r3
 8003f24:	d303      	bcc.n	8003f2e <memmove+0x14>
 8003f26:	2300      	movs	r3, #0
 8003f28:	e007      	b.n	8003f3a <memmove+0x20>
 8003f2a:	5c8b      	ldrb	r3, [r1, r2]
 8003f2c:	5483      	strb	r3, [r0, r2]
 8003f2e:	3a01      	subs	r2, #1
 8003f30:	d2fb      	bcs.n	8003f2a <memmove+0x10>
 8003f32:	bd10      	pop	{r4, pc}
 8003f34:	5ccc      	ldrb	r4, [r1, r3]
 8003f36:	54c4      	strb	r4, [r0, r3]
 8003f38:	3301      	adds	r3, #1
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d1fa      	bne.n	8003f34 <memmove+0x1a>
 8003f3e:	e7f8      	b.n	8003f32 <memmove+0x18>

08003f40 <_free_r>:
 8003f40:	b570      	push	{r4, r5, r6, lr}
 8003f42:	0005      	movs	r5, r0
 8003f44:	2900      	cmp	r1, #0
 8003f46:	d010      	beq.n	8003f6a <_free_r+0x2a>
 8003f48:	1f0c      	subs	r4, r1, #4
 8003f4a:	6823      	ldr	r3, [r4, #0]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	da00      	bge.n	8003f52 <_free_r+0x12>
 8003f50:	18e4      	adds	r4, r4, r3
 8003f52:	0028      	movs	r0, r5
 8003f54:	f000 f8d4 	bl	8004100 <__malloc_lock>
 8003f58:	4a1d      	ldr	r2, [pc, #116]	; (8003fd0 <_free_r+0x90>)
 8003f5a:	6813      	ldr	r3, [r2, #0]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d105      	bne.n	8003f6c <_free_r+0x2c>
 8003f60:	6063      	str	r3, [r4, #4]
 8003f62:	6014      	str	r4, [r2, #0]
 8003f64:	0028      	movs	r0, r5
 8003f66:	f000 f8cc 	bl	8004102 <__malloc_unlock>
 8003f6a:	bd70      	pop	{r4, r5, r6, pc}
 8003f6c:	42a3      	cmp	r3, r4
 8003f6e:	d909      	bls.n	8003f84 <_free_r+0x44>
 8003f70:	6821      	ldr	r1, [r4, #0]
 8003f72:	1860      	adds	r0, r4, r1
 8003f74:	4283      	cmp	r3, r0
 8003f76:	d1f3      	bne.n	8003f60 <_free_r+0x20>
 8003f78:	6818      	ldr	r0, [r3, #0]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	1841      	adds	r1, r0, r1
 8003f7e:	6021      	str	r1, [r4, #0]
 8003f80:	e7ee      	b.n	8003f60 <_free_r+0x20>
 8003f82:	0013      	movs	r3, r2
 8003f84:	685a      	ldr	r2, [r3, #4]
 8003f86:	2a00      	cmp	r2, #0
 8003f88:	d001      	beq.n	8003f8e <_free_r+0x4e>
 8003f8a:	42a2      	cmp	r2, r4
 8003f8c:	d9f9      	bls.n	8003f82 <_free_r+0x42>
 8003f8e:	6819      	ldr	r1, [r3, #0]
 8003f90:	1858      	adds	r0, r3, r1
 8003f92:	42a0      	cmp	r0, r4
 8003f94:	d10b      	bne.n	8003fae <_free_r+0x6e>
 8003f96:	6820      	ldr	r0, [r4, #0]
 8003f98:	1809      	adds	r1, r1, r0
 8003f9a:	1858      	adds	r0, r3, r1
 8003f9c:	6019      	str	r1, [r3, #0]
 8003f9e:	4282      	cmp	r2, r0
 8003fa0:	d1e0      	bne.n	8003f64 <_free_r+0x24>
 8003fa2:	6810      	ldr	r0, [r2, #0]
 8003fa4:	6852      	ldr	r2, [r2, #4]
 8003fa6:	1841      	adds	r1, r0, r1
 8003fa8:	6019      	str	r1, [r3, #0]
 8003faa:	605a      	str	r2, [r3, #4]
 8003fac:	e7da      	b.n	8003f64 <_free_r+0x24>
 8003fae:	42a0      	cmp	r0, r4
 8003fb0:	d902      	bls.n	8003fb8 <_free_r+0x78>
 8003fb2:	230c      	movs	r3, #12
 8003fb4:	602b      	str	r3, [r5, #0]
 8003fb6:	e7d5      	b.n	8003f64 <_free_r+0x24>
 8003fb8:	6821      	ldr	r1, [r4, #0]
 8003fba:	1860      	adds	r0, r4, r1
 8003fbc:	4282      	cmp	r2, r0
 8003fbe:	d103      	bne.n	8003fc8 <_free_r+0x88>
 8003fc0:	6810      	ldr	r0, [r2, #0]
 8003fc2:	6852      	ldr	r2, [r2, #4]
 8003fc4:	1841      	adds	r1, r0, r1
 8003fc6:	6021      	str	r1, [r4, #0]
 8003fc8:	6062      	str	r2, [r4, #4]
 8003fca:	605c      	str	r4, [r3, #4]
 8003fcc:	e7ca      	b.n	8003f64 <_free_r+0x24>
 8003fce:	46c0      	nop			; (mov r8, r8)
 8003fd0:	20000090 	.word	0x20000090

08003fd4 <_malloc_r>:
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	b570      	push	{r4, r5, r6, lr}
 8003fd8:	1ccd      	adds	r5, r1, #3
 8003fda:	439d      	bics	r5, r3
 8003fdc:	3508      	adds	r5, #8
 8003fde:	0006      	movs	r6, r0
 8003fe0:	2d0c      	cmp	r5, #12
 8003fe2:	d21e      	bcs.n	8004022 <_malloc_r+0x4e>
 8003fe4:	250c      	movs	r5, #12
 8003fe6:	42a9      	cmp	r1, r5
 8003fe8:	d81d      	bhi.n	8004026 <_malloc_r+0x52>
 8003fea:	0030      	movs	r0, r6
 8003fec:	f000 f888 	bl	8004100 <__malloc_lock>
 8003ff0:	4a25      	ldr	r2, [pc, #148]	; (8004088 <_malloc_r+0xb4>)
 8003ff2:	6814      	ldr	r4, [r2, #0]
 8003ff4:	0021      	movs	r1, r4
 8003ff6:	2900      	cmp	r1, #0
 8003ff8:	d119      	bne.n	800402e <_malloc_r+0x5a>
 8003ffa:	4c24      	ldr	r4, [pc, #144]	; (800408c <_malloc_r+0xb8>)
 8003ffc:	6823      	ldr	r3, [r4, #0]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d103      	bne.n	800400a <_malloc_r+0x36>
 8004002:	0030      	movs	r0, r6
 8004004:	f000 f86a 	bl	80040dc <_sbrk_r>
 8004008:	6020      	str	r0, [r4, #0]
 800400a:	0029      	movs	r1, r5
 800400c:	0030      	movs	r0, r6
 800400e:	f000 f865 	bl	80040dc <_sbrk_r>
 8004012:	1c43      	adds	r3, r0, #1
 8004014:	d12b      	bne.n	800406e <_malloc_r+0x9a>
 8004016:	230c      	movs	r3, #12
 8004018:	0030      	movs	r0, r6
 800401a:	6033      	str	r3, [r6, #0]
 800401c:	f000 f871 	bl	8004102 <__malloc_unlock>
 8004020:	e003      	b.n	800402a <_malloc_r+0x56>
 8004022:	2d00      	cmp	r5, #0
 8004024:	dadf      	bge.n	8003fe6 <_malloc_r+0x12>
 8004026:	230c      	movs	r3, #12
 8004028:	6033      	str	r3, [r6, #0]
 800402a:	2000      	movs	r0, #0
 800402c:	bd70      	pop	{r4, r5, r6, pc}
 800402e:	680b      	ldr	r3, [r1, #0]
 8004030:	1b5b      	subs	r3, r3, r5
 8004032:	d419      	bmi.n	8004068 <_malloc_r+0x94>
 8004034:	2b0b      	cmp	r3, #11
 8004036:	d903      	bls.n	8004040 <_malloc_r+0x6c>
 8004038:	600b      	str	r3, [r1, #0]
 800403a:	18cc      	adds	r4, r1, r3
 800403c:	6025      	str	r5, [r4, #0]
 800403e:	e003      	b.n	8004048 <_malloc_r+0x74>
 8004040:	684b      	ldr	r3, [r1, #4]
 8004042:	428c      	cmp	r4, r1
 8004044:	d10d      	bne.n	8004062 <_malloc_r+0x8e>
 8004046:	6013      	str	r3, [r2, #0]
 8004048:	0030      	movs	r0, r6
 800404a:	f000 f85a 	bl	8004102 <__malloc_unlock>
 800404e:	0020      	movs	r0, r4
 8004050:	2207      	movs	r2, #7
 8004052:	300b      	adds	r0, #11
 8004054:	1d23      	adds	r3, r4, #4
 8004056:	4390      	bics	r0, r2
 8004058:	1ac3      	subs	r3, r0, r3
 800405a:	d0e7      	beq.n	800402c <_malloc_r+0x58>
 800405c:	425a      	negs	r2, r3
 800405e:	50e2      	str	r2, [r4, r3]
 8004060:	e7e4      	b.n	800402c <_malloc_r+0x58>
 8004062:	6063      	str	r3, [r4, #4]
 8004064:	000c      	movs	r4, r1
 8004066:	e7ef      	b.n	8004048 <_malloc_r+0x74>
 8004068:	000c      	movs	r4, r1
 800406a:	6849      	ldr	r1, [r1, #4]
 800406c:	e7c3      	b.n	8003ff6 <_malloc_r+0x22>
 800406e:	2303      	movs	r3, #3
 8004070:	1cc4      	adds	r4, r0, #3
 8004072:	439c      	bics	r4, r3
 8004074:	42a0      	cmp	r0, r4
 8004076:	d0e1      	beq.n	800403c <_malloc_r+0x68>
 8004078:	1a21      	subs	r1, r4, r0
 800407a:	0030      	movs	r0, r6
 800407c:	f000 f82e 	bl	80040dc <_sbrk_r>
 8004080:	1c43      	adds	r3, r0, #1
 8004082:	d1db      	bne.n	800403c <_malloc_r+0x68>
 8004084:	e7c7      	b.n	8004016 <_malloc_r+0x42>
 8004086:	46c0      	nop			; (mov r8, r8)
 8004088:	20000090 	.word	0x20000090
 800408c:	20000094 	.word	0x20000094

08004090 <_realloc_r>:
 8004090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004092:	0007      	movs	r7, r0
 8004094:	000d      	movs	r5, r1
 8004096:	0016      	movs	r6, r2
 8004098:	2900      	cmp	r1, #0
 800409a:	d105      	bne.n	80040a8 <_realloc_r+0x18>
 800409c:	0011      	movs	r1, r2
 800409e:	f7ff ff99 	bl	8003fd4 <_malloc_r>
 80040a2:	0004      	movs	r4, r0
 80040a4:	0020      	movs	r0, r4
 80040a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040a8:	2a00      	cmp	r2, #0
 80040aa:	d103      	bne.n	80040b4 <_realloc_r+0x24>
 80040ac:	f7ff ff48 	bl	8003f40 <_free_r>
 80040b0:	0034      	movs	r4, r6
 80040b2:	e7f7      	b.n	80040a4 <_realloc_r+0x14>
 80040b4:	f000 f826 	bl	8004104 <_malloc_usable_size_r>
 80040b8:	002c      	movs	r4, r5
 80040ba:	42b0      	cmp	r0, r6
 80040bc:	d2f2      	bcs.n	80040a4 <_realloc_r+0x14>
 80040be:	0031      	movs	r1, r6
 80040c0:	0038      	movs	r0, r7
 80040c2:	f7ff ff87 	bl	8003fd4 <_malloc_r>
 80040c6:	1e04      	subs	r4, r0, #0
 80040c8:	d0ec      	beq.n	80040a4 <_realloc_r+0x14>
 80040ca:	0029      	movs	r1, r5
 80040cc:	0032      	movs	r2, r6
 80040ce:	f7ff fbfb 	bl	80038c8 <memcpy>
 80040d2:	0029      	movs	r1, r5
 80040d4:	0038      	movs	r0, r7
 80040d6:	f7ff ff33 	bl	8003f40 <_free_r>
 80040da:	e7e3      	b.n	80040a4 <_realloc_r+0x14>

080040dc <_sbrk_r>:
 80040dc:	2300      	movs	r3, #0
 80040de:	b570      	push	{r4, r5, r6, lr}
 80040e0:	4c06      	ldr	r4, [pc, #24]	; (80040fc <_sbrk_r+0x20>)
 80040e2:	0005      	movs	r5, r0
 80040e4:	0008      	movs	r0, r1
 80040e6:	6023      	str	r3, [r4, #0]
 80040e8:	f7fe fb64 	bl	80027b4 <_sbrk>
 80040ec:	1c43      	adds	r3, r0, #1
 80040ee:	d103      	bne.n	80040f8 <_sbrk_r+0x1c>
 80040f0:	6823      	ldr	r3, [r4, #0]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d000      	beq.n	80040f8 <_sbrk_r+0x1c>
 80040f6:	602b      	str	r3, [r5, #0]
 80040f8:	bd70      	pop	{r4, r5, r6, pc}
 80040fa:	46c0      	nop			; (mov r8, r8)
 80040fc:	200002c4 	.word	0x200002c4

08004100 <__malloc_lock>:
 8004100:	4770      	bx	lr

08004102 <__malloc_unlock>:
 8004102:	4770      	bx	lr

08004104 <_malloc_usable_size_r>:
 8004104:	1f0b      	subs	r3, r1, #4
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	1f18      	subs	r0, r3, #4
 800410a:	2b00      	cmp	r3, #0
 800410c:	da01      	bge.n	8004112 <_malloc_usable_size_r+0xe>
 800410e:	580b      	ldr	r3, [r1, r0]
 8004110:	18c0      	adds	r0, r0, r3
 8004112:	4770      	bx	lr

08004114 <_init>:
 8004114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004116:	46c0      	nop			; (mov r8, r8)
 8004118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800411a:	bc08      	pop	{r3}
 800411c:	469e      	mov	lr, r3
 800411e:	4770      	bx	lr

08004120 <_fini>:
 8004120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004122:	46c0      	nop			; (mov r8, r8)
 8004124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004126:	bc08      	pop	{r3}
 8004128:	469e      	mov	lr, r3
 800412a:	4770      	bx	lr
